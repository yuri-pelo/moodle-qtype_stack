{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"en/","text":"STACK STACK is the world-leading open-source (GPL) automatic assessment system for mathematics, science and related disciplines. Students type in mathematical expressions, and are not restricted to multiple choice. Separate validation and assessment with an emphasis on formative assessment. Random generation of questions. A wide variety of input types, including line by line working. Support for multipart questions. Support for scientific units and significant figures. A case studies collection and a flyer about the STACK project are available. In 2019 we produced a self-contained \"Getting started with STACK\" guide to authoring STACK questions. Overview Welcome to the official user documentation for STACK. About General information about STACK, including: A feature overview . The philosophy of STACK . Publications . Credits . Authoring Documentation for question authors, including: An authoring quick start guide , which can be used in conjunction with the \"Getting started with STACK\" guide . Information on various authoring topics , such as answer tests , inputs , potential response trees and translations . Frequently asked questions . Information on using the CAS Maxima for question authoring, including randomisation , plotting graphs , and expression simplification . Students Information for students using STACK, including: Input instructions . How answers are assessed . Frequently asked questions . Installation Installation instructions . Developers Topics for developers, including: A development history . Translating the STACK interface . Creating an input type .","title":"STACK"},{"location":"en/#stack","text":"STACK is the world-leading open-source (GPL) automatic assessment system for mathematics, science and related disciplines. Students type in mathematical expressions, and are not restricted to multiple choice. Separate validation and assessment with an emphasis on formative assessment. Random generation of questions. A wide variety of input types, including line by line working. Support for multipart questions. Support for scientific units and significant figures. A case studies collection and a flyer about the STACK project are available. In 2019 we produced a self-contained \"Getting started with STACK\" guide to authoring STACK questions.","title":"STACK"},{"location":"en/#overview","text":"Welcome to the official user documentation for STACK.","title":"Overview"},{"location":"en/#about","text":"General information about STACK, including: A feature overview . The philosophy of STACK . Publications . Credits .","title":"About"},{"location":"en/#authoring","text":"Documentation for question authors, including: An authoring quick start guide , which can be used in conjunction with the \"Getting started with STACK\" guide . Information on various authoring topics , such as answer tests , inputs , potential response trees and translations . Frequently asked questions . Information on using the CAS Maxima for question authoring, including randomisation , plotting graphs , and expression simplification .","title":"Authoring"},{"location":"en/#students","text":"Information for students using STACK, including: Input instructions . How answers are assessed . Frequently asked questions .","title":"Students"},{"location":"en/#installation","text":"Installation instructions .","title":"Installation"},{"location":"en/#developers","text":"Topics for developers, including: A development history . Translating the STACK interface . Creating an input type .","title":"Developers"},{"location":"en/About/","text":"About the STACK Project STACK is an assessment system for mathematics, science and related disciplines, designed to enable students to answer questions with a mathematical expression, such as a polynomial. Students are not limited to multiple choice. Below is a typical STACK question. Note that the student's answer can be any algebraic expression, and that their answer is interpreted by the system before it is marked. This allows the student to confirm the answer is what they intended before being marked. Notice also the automatically generated feedback. STACK uses a Computer Algebra System to power the assessment system. The built-in knowledge of mathematics that the computer algebra system provides opens up entirely new possibilities to computer-aided assessment. Primarily, STACK provides a question type for the Moodle and ILIAS learning environments. STACK can be integrated into other systems using LTI . A demonstration server is also available: https://stack.maths.ed.ac.uk/demo Main STACK Features STACK has many features. Equivalent answers of the right form STACK can accept equivalent expressions, for example (x+1)^2 = x^2+2x+1 . STACK can also establish the form of an answer, for example if it is factorised. STACK is designed to let teachers specify independent properties required in an answer. Ask for examples The system can mark questions that ask the student to provide an example. Give an example of a function f(x) with a minimum at x=0 and a maximum at x=2. Rather than comparing the student's answer to the teacher's answer, STACK checks that the answer has the required properties. Giving examples is a higher-order skill that is impossible to assess with conventional Computer Aided Assessment (CAA) systems. Intelligent randomisation Randomising questions is invaluable in ensuring students can practice and reducing sharing of answers. The trick is to reverse-engineer the randomised question from a randomised answer. Computer algebra is invaluable to support this process. Give feedback and partial credit Consider a question like: Give an example of a cubic polynomial with the following properties: p(0)=1 , p(x)=0 at x=2 and at x=3 . Here, STACK can check each condition separately on the student's answer and assign partial credit accordingly. If the student gave the answer p(x) = x^2-5x+6 for example, then STACK could reply: Your answer does have zeros at the required points but its value at zero is not equal to 1. You received 2 out of 3 points. Please try again. There are a variety of ways in which feedback can be given, including plotting the students' answer against the teacher's answer. Multipart questions STACK supports multipart questions, like the following: (a) differentiate x^2+5x with respect to x. (b) substitute x=5 into your answer. You can have follow-through marking for situations where, for example, the student enters a wrong expression to part (a), but correctly substitutes in values into their expression in part (b). Here, STACK can recognise the work the student put into part (b), even though their answer is different from the \"correct\" answer. Support for many types of questions STACK has a large number of inputs and answer tests to support the diverse needs of users across mathematics and science. This includes support for questions about numerical accuracy , significant figures and scientific units . You can also assess students' ability to reason line-by-line with equivalence reasoning . Further information The philosophy of STACK . A demonstration server . Associated publications . STACK Community and Credits . The mathematics behind the STACK logo .","title":"About the STACK Project"},{"location":"en/About/#about-the-stack-project","text":"STACK is an assessment system for mathematics, science and related disciplines, designed to enable students to answer questions with a mathematical expression, such as a polynomial. Students are not limited to multiple choice. Below is a typical STACK question. Note that the student's answer can be any algebraic expression, and that their answer is interpreted by the system before it is marked. This allows the student to confirm the answer is what they intended before being marked. Notice also the automatically generated feedback. STACK uses a Computer Algebra System to power the assessment system. The built-in knowledge of mathematics that the computer algebra system provides opens up entirely new possibilities to computer-aided assessment. Primarily, STACK provides a question type for the Moodle and ILIAS learning environments. STACK can be integrated into other systems using LTI . A demonstration server is also available: https://stack.maths.ed.ac.uk/demo","title":"About the STACK Project"},{"location":"en/About/#main-stack-features","text":"STACK has many features.","title":"Main STACK Features"},{"location":"en/About/#equivalent-answers-of-the-right-form","text":"STACK can accept equivalent expressions, for example (x+1)^2 = x^2+2x+1 . STACK can also establish the form of an answer, for example if it is factorised. STACK is designed to let teachers specify independent properties required in an answer.","title":"Equivalent answers of the right form"},{"location":"en/About/#ask-for-examples","text":"The system can mark questions that ask the student to provide an example. Give an example of a function f(x) with a minimum at x=0 and a maximum at x=2. Rather than comparing the student's answer to the teacher's answer, STACK checks that the answer has the required properties. Giving examples is a higher-order skill that is impossible to assess with conventional Computer Aided Assessment (CAA) systems.","title":"Ask for examples"},{"location":"en/About/#intelligent-randomisation","text":"Randomising questions is invaluable in ensuring students can practice and reducing sharing of answers. The trick is to reverse-engineer the randomised question from a randomised answer. Computer algebra is invaluable to support this process.","title":"Intelligent randomisation"},{"location":"en/About/#give-feedback-and-partial-credit","text":"Consider a question like: Give an example of a cubic polynomial with the following properties: p(0)=1 , p(x)=0 at x=2 and at x=3 . Here, STACK can check each condition separately on the student's answer and assign partial credit accordingly. If the student gave the answer p(x) = x^2-5x+6 for example, then STACK could reply: Your answer does have zeros at the required points but its value at zero is not equal to 1. You received 2 out of 3 points. Please try again. There are a variety of ways in which feedback can be given, including plotting the students' answer against the teacher's answer.","title":"Give feedback and partial credit"},{"location":"en/About/#multipart-questions","text":"STACK supports multipart questions, like the following: (a) differentiate x^2+5x with respect to x. (b) substitute x=5 into your answer. You can have follow-through marking for situations where, for example, the student enters a wrong expression to part (a), but correctly substitutes in values into their expression in part (b). Here, STACK can recognise the work the student put into part (b), even though their answer is different from the \"correct\" answer.","title":"Multipart questions"},{"location":"en/About/#support-for-many-types-of-questions","text":"STACK has a large number of inputs and answer tests to support the diverse needs of users across mathematics and science. This includes support for questions about numerical accuracy , significant figures and scientific units . You can also assess students' ability to reason line-by-line with equivalence reasoning .","title":"Support for many types of questions"},{"location":"en/About/#further-information","text":"The philosophy of STACK . A demonstration server . Associated publications . STACK Community and Credits . The mathematics behind the STACK logo .","title":"Further information"},{"location":"en/About/Community/","text":"Community There is a large and growing community of STACK users. This includes large universities with many teachers and thousands of students, through to smaller setups. STACK is in regular use in English, Finnish, Swedish, Japanese, German, Spanish and Portuguese. If you are using STACK please let us know! A demonstration server is available in Edinburgh: https://stack.maths.ed.ac.uk/demo In 2017 the STACK project was awarded a Collaborative Award for Teaching Excellence. How can I contribute? STACK is a community project and contributions are welcome in many ways. Helping colleagues write questions, and use online assessment is a good place to start. Contributing to the documentation and examples. Undertaking projects with your students and sharing the results. Contributing sample questions and question banks. Translating the system and sample materials. Contributions to the code base are very welcome. This is more difficult, but do contact the developers with ideas. How do I keep up to date with announcements about STACK? We will make announcements about progress and developments with STACK on the Moodle maths tools forum. For the STACK Question Plugin see https://docu.ilias.de/goto_docu_cat_4119.html. How do I report a bug? Bug reports are always very welcome. Please try to make sure it is really not a bug with your question! Where possible, please export a minimal question and a clear description of how to recreate the bug. Issues such as this can be reported on GitHub . For the STACK Question Plugin see https://docu.ilias.de/goto_docu_cat_4119.html. How do I request a new feature? Please look at the ideas we have for our development track and future plans . If your request does not appear here, then please email the developers to discuss it. Alternatively, you are very welcome to start a new issue on github to discuss it. For the STACK Question Plugin see https://docu.ilias.de/goto_docu_cat_4119.html. How do I submit my code changes? Submit a pull request https://github.com/maths/moodle-qtype_stack , or one of the other plugins. If you are not yet familiar with git, please talk to us about your changes, and we will help. Actually, it is probably a good idea to talk to us about proposed changes before you make them in any case. How do I share my experiences using STACK? Please do research and publish your experiences of using STACK with students. A list of publications is available. User Community Exchange of questions There is a database of STACK-questions at https://db.ak-mathe-digital.de/domain. Right now, there are over 400 STACK-questions, in many different languages. A filter simplifies the search for specific questions. Questions can easily be exported as xml-files and as such can be used in Moodle as well as in ILIAS. Everybody can contribute their own questions. Meetings The 1st international STACK Conference took place on the 15th and 16th of November 2018 in F\u00fcrth at the Friedrich-Alexander-Universit\u00e4t Erlangen-N\u00fcrnberg. Further information and slides at https://www.stack-konferenz.de/. Groups Groups of people who use STACK. You are welcome to join, ask questions and participate. * SIG Mathe+ILIAS * Arbeitskreis Digitale Mathematik-Aufgaben in der Hochschullehre User list The following institutions made use of previous versions of STACK. If you are actively using STACK and would like to be listed below then please contact the developers. School of Mathematics, The University of Edinburgh The home of STACK. Contact Chris Sangwin . School of Mathematics and Statistics, The Open University, Contact Tim Hunt and Tim Lowe School of Science, Aalto University, Helsinki, Finland Contact Matti Harjula and Antti Rasila Mathematics Education Centre, Loughborough University Contact Ian Jones School of Informatics and Sciences, Nagoya University, Japan Contact Yasuyuki Nakamura Ja STACK Community Contact Ja STACK.org Polytechnic Institute of Leiria, Leiria, Portugal Contact Rui Paiva School of Computing, Information and Mathematical Sciences, The University of the South Pacific Contact Dhiraj Bhartu Gymnasium Himmelsth\u00fcr, Hildesheim, Deutschland Contact Frank Sch\u00fctte Universidad Michoacana de San Nicolas de Hidalgo Contact Victor Hugo Huerta e-MAIO project, Coimbra Institute of Engineering, Portugal Contact e_MAIO@isec.pt Maseno University, Kenya Contact Michael Oyengo IDEMS International Contact Santiago Borio","title":"Community"},{"location":"en/About/Community/#community","text":"There is a large and growing community of STACK users. This includes large universities with many teachers and thousands of students, through to smaller setups. STACK is in regular use in English, Finnish, Swedish, Japanese, German, Spanish and Portuguese. If you are using STACK please let us know! A demonstration server is available in Edinburgh: https://stack.maths.ed.ac.uk/demo In 2017 the STACK project was awarded a Collaborative Award for Teaching Excellence.","title":"Community"},{"location":"en/About/Community/#how-can-i-contribute","text":"STACK is a community project and contributions are welcome in many ways. Helping colleagues write questions, and use online assessment is a good place to start. Contributing to the documentation and examples. Undertaking projects with your students and sharing the results. Contributing sample questions and question banks. Translating the system and sample materials. Contributions to the code base are very welcome. This is more difficult, but do contact the developers with ideas.","title":"How can I contribute?"},{"location":"en/About/Community/#how-do-i-keep-up-to-date-with-announcements-about-stack","text":"We will make announcements about progress and developments with STACK on the Moodle maths tools forum. For the STACK Question Plugin see https://docu.ilias.de/goto_docu_cat_4119.html.","title":"How do I keep up to date with announcements about STACK?"},{"location":"en/About/Community/#how-do-i-report-a-bug","text":"Bug reports are always very welcome. Please try to make sure it is really not a bug with your question! Where possible, please export a minimal question and a clear description of how to recreate the bug. Issues such as this can be reported on GitHub . For the STACK Question Plugin see https://docu.ilias.de/goto_docu_cat_4119.html.","title":"How do I report a bug?"},{"location":"en/About/Community/#how-do-i-request-a-new-feature","text":"Please look at the ideas we have for our development track and future plans . If your request does not appear here, then please email the developers to discuss it. Alternatively, you are very welcome to start a new issue on github to discuss it. For the STACK Question Plugin see https://docu.ilias.de/goto_docu_cat_4119.html.","title":"How do I request a new feature?"},{"location":"en/About/Community/#how-do-i-submit-my-code-changes","text":"Submit a pull request https://github.com/maths/moodle-qtype_stack , or one of the other plugins. If you are not yet familiar with git, please talk to us about your changes, and we will help. Actually, it is probably a good idea to talk to us about proposed changes before you make them in any case.","title":"How do I submit my code changes?"},{"location":"en/About/Community/#how-do-i-share-my-experiences-using-stack","text":"Please do research and publish your experiences of using STACK with students. A list of publications is available.","title":"How do I share my experiences using STACK?"},{"location":"en/About/Community/#user-community","text":"","title":"User Community"},{"location":"en/About/Community/#exchange-of-questions","text":"There is a database of STACK-questions at https://db.ak-mathe-digital.de/domain. Right now, there are over 400 STACK-questions, in many different languages. A filter simplifies the search for specific questions. Questions can easily be exported as xml-files and as such can be used in Moodle as well as in ILIAS. Everybody can contribute their own questions.","title":"Exchange of questions"},{"location":"en/About/Community/#meetings","text":"The 1st international STACK Conference took place on the 15th and 16th of November 2018 in F\u00fcrth at the Friedrich-Alexander-Universit\u00e4t Erlangen-N\u00fcrnberg. Further information and slides at https://www.stack-konferenz.de/.","title":"Meetings"},{"location":"en/About/Community/#groups","text":"Groups of people who use STACK. You are welcome to join, ask questions and participate. * SIG Mathe+ILIAS * Arbeitskreis Digitale Mathematik-Aufgaben in der Hochschullehre","title":"Groups"},{"location":"en/About/Community/#user-list","text":"The following institutions made use of previous versions of STACK. If you are actively using STACK and would like to be listed below then please contact the developers. School of Mathematics, The University of Edinburgh The home of STACK. Contact Chris Sangwin . School of Mathematics and Statistics, The Open University, Contact Tim Hunt and Tim Lowe School of Science, Aalto University, Helsinki, Finland Contact Matti Harjula and Antti Rasila Mathematics Education Centre, Loughborough University Contact Ian Jones School of Informatics and Sciences, Nagoya University, Japan Contact Yasuyuki Nakamura Ja STACK Community Contact Ja STACK.org Polytechnic Institute of Leiria, Leiria, Portugal Contact Rui Paiva School of Computing, Information and Mathematical Sciences, The University of the South Pacific Contact Dhiraj Bhartu Gymnasium Himmelsth\u00fcr, Hildesheim, Deutschland Contact Frank Sch\u00fctte Universidad Michoacana de San Nicolas de Hidalgo Contact Victor Hugo Huerta e-MAIO project, Coimbra Institute of Engineering, Portugal Contact e_MAIO@isec.pt Maseno University, Kenya Contact Michael Oyengo IDEMS International Contact Santiago Borio","title":"User list"},{"location":"en/About/Credits/","text":"Contributors to the STACK Project More details of our development history are given in the development track . Chris Sangwin of the University of Edinburgh. STACK is the brainchild of Chris Sangwin. Tim Hunt and Tim Lowe of the Open University. Matti Harjula of Aalto University, Finland. Previous developers have included John Beedell Simon Hammond Jonathan Hart Ben Holmes Maksim Kraev Mikael Kurula Matti Pauna Malthe Sporring Dan Williams STACK is an open source project and many others have made contributions of various sizes. Translation of the STACK Project STACK is designed to support the straightforward addition of other language packs. If you have translated STACK into other languages - or would be interested in doing so - please let us know ! Likewise, if you would really like to see STACK in another language please contact us. Details of how to add language packs, translate STACK, and forthcoming translations, are given on the Language packs developers page. STACK is released in many languages, using Moodle's ATOS language system. EN: English (British), by Chris Sangwin (and others) FI: Finnish, by Matti Pauna SV: Swedish, by Mikael Kurula DA: Danish, by Malthe Sporring ES: Spanish, by Victor Hugo Huerta JA: Japanese, by Yasuyuki Nakamura and Takahiro Nakahara German documentation was added in Jan 2019 by Eva Mix and Mario Josupeit of University of Cologne, Germany. Other implementations and projects STACK has been ported to the plugin assStackQuestion for the Learning Management System ILIAS by: Jesus Copado Fred Neumann This project received a lot of moral support from the ILIAS association and its product manager Matthias Kunkel, as well as funding from various institutions: Duale Hochschule Baden W\u00fcrttemberg Hochschule Bremen Helmut-Schmidt-Universit\u00e4t Hamburg Fachhochschule Aachen Hochschule Karlsruhe Fachhochschule M\u00fcnster Universit\u00e4t Freiburg Universit\u00e4t Erlangen-N\u00fcrnberg Universit\u00e4t zu K\u00f6ln","title":"Contributors to the STACK Project"},{"location":"en/About/Credits/#contributors-to-the-stack-project","text":"More details of our development history are given in the development track . Chris Sangwin of the University of Edinburgh. STACK is the brainchild of Chris Sangwin. Tim Hunt and Tim Lowe of the Open University. Matti Harjula of Aalto University, Finland. Previous developers have included John Beedell Simon Hammond Jonathan Hart Ben Holmes Maksim Kraev Mikael Kurula Matti Pauna Malthe Sporring Dan Williams STACK is an open source project and many others have made contributions of various sizes.","title":"Contributors to the STACK Project"},{"location":"en/About/Credits/#translation-of-the-stack-project","text":"STACK is designed to support the straightforward addition of other language packs. If you have translated STACK into other languages - or would be interested in doing so - please let us know ! Likewise, if you would really like to see STACK in another language please contact us. Details of how to add language packs, translate STACK, and forthcoming translations, are given on the Language packs developers page. STACK is released in many languages, using Moodle's ATOS language system. EN: English (British), by Chris Sangwin (and others) FI: Finnish, by Matti Pauna SV: Swedish, by Mikael Kurula DA: Danish, by Malthe Sporring ES: Spanish, by Victor Hugo Huerta JA: Japanese, by Yasuyuki Nakamura and Takahiro Nakahara German documentation was added in Jan 2019 by Eva Mix and Mario Josupeit of University of Cologne, Germany.","title":"Translation of the STACK Project"},{"location":"en/About/Credits/#other-implementations-and-projects","text":"STACK has been ported to the plugin assStackQuestion for the Learning Management System ILIAS by: Jesus Copado Fred Neumann This project received a lot of moral support from the ILIAS association and its product manager Matthias Kunkel, as well as funding from various institutions: Duale Hochschule Baden W\u00fcrttemberg Hochschule Bremen Helmut-Schmidt-Universit\u00e4t Hamburg Fachhochschule Aachen Hochschule Karlsruhe Fachhochschule M\u00fcnster Universit\u00e4t Freiburg Universit\u00e4t Erlangen-N\u00fcrnberg Universit\u00e4t zu K\u00f6ln","title":"Other implementations and projects"},{"location":"en/About/Logo/","text":"The mathematics of the STACK logo The STACK logo is based on the following problem. If you stack identical blocks one on top of the other, how far can it lean before it falls over? You have a potentially unlimited supply of blocks. The answer is that there is no limit to how far it can lean! A physical model is shown below. Model made by Dr John Bryant. The mathematics of this problem To see why the STACK of blocks doesn't fall over assume that the width of each domino is 2 \"units\". Our strategy is this: at each stage we consider an existing balancing stack of n dominoes which has its centre of mass a distance c_n from its left-hand edge. Obviously c_n\\leq 2 for all n as the centre of mass is to be above the bottom domino! We then place this stack on top of a new domino a distance \\delta_n from the left of the domino. There will clearly be no toppling if \\delta_n+c_n\\leq 2. That is to say we maintain balance if we don't displace the top stack so far that the displacement plus the distance of the centre of mass from the left pushes the centre of mass over the edge of the bottom domino - which has width 2 . The new centre of mass of the whole stack of n+1 dominoes will be c_{n+1} from the left of the bottom domino where c_{n+1} = \\frac{(\\delta_n+c_n)n+1}{n+1} \\mbox{ with } c_1=1. Using the first inequality the maximum displacement without toppling is \\delta_n=s-c_n . Combining this with the formula for c_{n+1} and solving for \\delta_n gives \\delta_{n+1} = 2-c_{n+1} = 2-\\frac{(\\delta_n+c_n)n+1}{n+1} = 2-\\frac{(\\delta_n+2-\\delta_n)n+1}{n+1} = \\frac{1}{n+1} \\mbox{ with } \\delta_1=1. So that for all n , \\delta_n = \\frac{1}{n} . How big does the displacement become? The question becomes, what is the value of 1 +\\frac{1}{2} +\\frac{1}{3} +\\frac{1}{4} + \\cdots +\\frac{1}{N}= \\sum_{n=1}^N \\frac{1}{n} for large N? If N\\rightarrow \\infty , this is a particularly famous infinite series - the harmonic series . Actually, this diverges. That is to say it is possible to make the sum as large as one would wish. To see this, we group the terms as follows, \\sum_{n=1}^N \\frac{1}{n} = \\left(1+\\cdots+\\frac{1}{9}\\right) + \\left(\\frac{1}{10}+\\cdots+\\frac{1}{99}\\right) + \\left(\\frac{1}{100}+\\cdots+\\frac{1}{999}\\right) + \\cdots \\geq 9\\frac{1}{10} + 90\\frac{1}{100} + 900\\frac{1}{1000} + \\cdots = \\frac{9}{10}+\\frac{9}{10}+\\frac{9}{10}+\\cdots which shows that the series keeps getting larger as we continue to add terms. That is to say it does not converge. In terms of the domino problem: we can choose displacements \\delta_n so that (i) the stack does not topple over, and (ii) we can produce an arbitrarily large horizontal displacement. Bizarre indeed!","title":"The mathematics of the STACK logo"},{"location":"en/About/Logo/#the-mathematics-of-the-stack-logo","text":"The STACK logo is based on the following problem. If you stack identical blocks one on top of the other, how far can it lean before it falls over? You have a potentially unlimited supply of blocks. The answer is that there is no limit to how far it can lean! A physical model is shown below. Model made by Dr John Bryant.","title":"The mathematics of the STACK logo"},{"location":"en/About/Logo/#the-mathematics-of-this-problem","text":"To see why the STACK of blocks doesn't fall over assume that the width of each domino is 2 \"units\". Our strategy is this: at each stage we consider an existing balancing stack of n dominoes which has its centre of mass a distance c_n from its left-hand edge. Obviously c_n\\leq 2 for all n as the centre of mass is to be above the bottom domino! We then place this stack on top of a new domino a distance \\delta_n from the left of the domino. There will clearly be no toppling if \\delta_n+c_n\\leq 2. That is to say we maintain balance if we don't displace the top stack so far that the displacement plus the distance of the centre of mass from the left pushes the centre of mass over the edge of the bottom domino - which has width 2 . The new centre of mass of the whole stack of n+1 dominoes will be c_{n+1} from the left of the bottom domino where c_{n+1} = \\frac{(\\delta_n+c_n)n+1}{n+1} \\mbox{ with } c_1=1. Using the first inequality the maximum displacement without toppling is \\delta_n=s-c_n . Combining this with the formula for c_{n+1} and solving for \\delta_n gives \\delta_{n+1} = 2-c_{n+1} = 2-\\frac{(\\delta_n+c_n)n+1}{n+1} = 2-\\frac{(\\delta_n+2-\\delta_n)n+1}{n+1} = \\frac{1}{n+1} \\mbox{ with } \\delta_1=1. So that for all n , \\delta_n = \\frac{1}{n} .","title":"The mathematics of this problem"},{"location":"en/About/Logo/#how-big-does-the-displacement-become","text":"The question becomes, what is the value of 1 +\\frac{1}{2} +\\frac{1}{3} +\\frac{1}{4} + \\cdots +\\frac{1}{N}= \\sum_{n=1}^N \\frac{1}{n} for large N? If N\\rightarrow \\infty , this is a particularly famous infinite series - the harmonic series . Actually, this diverges. That is to say it is possible to make the sum as large as one would wish. To see this, we group the terms as follows, \\sum_{n=1}^N \\frac{1}{n} = \\left(1+\\cdots+\\frac{1}{9}\\right) + \\left(\\frac{1}{10}+\\cdots+\\frac{1}{99}\\right) + \\left(\\frac{1}{100}+\\cdots+\\frac{1}{999}\\right) + \\cdots \\geq 9\\frac{1}{10} + 90\\frac{1}{100} + 900\\frac{1}{1000} + \\cdots = \\frac{9}{10}+\\frac{9}{10}+\\frac{9}{10}+\\cdots which shows that the series keeps getting larger as we continue to add terms. That is to say it does not converge. In terms of the domino problem: we can choose displacements \\delta_n so that (i) the stack does not topple over, and (ii) we can produce an arbitrarily large horizontal displacement. Bizarre indeed!","title":"How big does the displacement become?"},{"location":"en/About/Publications/","text":"Publications STACK is a very popular online assessment system, used by many groups in a variety of languages. STACK has been the subject of research, and has itself enabled research projects to take place. This page contains a selection of publications. Publicity materials. We have a booklet of case studies , and a PDF flyer about the STACK project . We have a \"Getting started with STACK\" guide ( Spanish ). Computer aided assessment of mathematics Computer Aided Assessment of Mathematics , Chris Sangwin, Oxford University Press, 2013. This book provides an Introduction to Computer Aided Assessment using STACK as the main working example. Nakamura (2010) Y. Nakamura, The STACK e-Learning and Assessment System for mathematics, science and engineering education through Moodle , Tokyo Denki University Press, 2010, (In Japanese) ISBN 978-4-501-54820-9. Papers about STACK Proceedings of the 1st International STACK Conference can be found can be found on the open access publication server Zenodo here: https://zenodo.org/communities/stack A comprehensive bibliography is available here: STACK bibliography , with the entries in BiBTeX format . These two recent papers about STACK are a good place to start: C. J. Sangwin and N. Kocher. Automation of mathematics examinations . Computers and Education, 94:215-227, 2016. C. J. Sangwin and I. Jones. Asymmetry in student achievement on multiple choice and constructed response items in reversible mathematics processes . Educational Studies in Mathematics, 94:205-222, 2017.","title":"Publications"},{"location":"en/About/Publications/#publications","text":"STACK is a very popular online assessment system, used by many groups in a variety of languages. STACK has been the subject of research, and has itself enabled research projects to take place. This page contains a selection of publications.","title":"Publications"},{"location":"en/About/Publications/#publicity-materials","text":"We have a booklet of case studies , and a PDF flyer about the STACK project . We have a \"Getting started with STACK\" guide ( Spanish ).","title":"Publicity materials."},{"location":"en/About/Publications/#computer-aided-assessment-of-mathematics","text":"Computer Aided Assessment of Mathematics , Chris Sangwin, Oxford University Press, 2013. This book provides an Introduction to Computer Aided Assessment using STACK as the main working example.","title":"Computer aided assessment of mathematics"},{"location":"en/About/Publications/#nakamura-2010","text":"Y. Nakamura, The STACK e-Learning and Assessment System for mathematics, science and engineering education through Moodle , Tokyo Denki University Press, 2010, (In Japanese) ISBN 978-4-501-54820-9.","title":"Nakamura (2010)"},{"location":"en/About/Publications/#papers-about-stack","text":"Proceedings of the 1st International STACK Conference can be found can be found on the open access publication server Zenodo here: https://zenodo.org/communities/stack A comprehensive bibliography is available here: STACK bibliography , with the entries in BiBTeX format . These two recent papers about STACK are a good place to start: C. J. Sangwin and N. Kocher. Automation of mathematics examinations . Computers and Education, 94:215-227, 2016. C. J. Sangwin and I. Jones. Asymmetry in student achievement on multiple choice and constructed response items in reversible mathematics processes . Educational Studies in Mathematics, 94:205-222, 2017.","title":"Papers about STACK"},{"location":"en/About/The_philosophy_of_STACK/","text":"Philosophy of STACK This page will describe the main design philosophy of STACK. Motivation Computer Aided Assessment (CAA) has many advantages over traditional hand-marking. One of the key advantages is that, when done correctly, it can effectively assess and give feedback to a large number of students. This frees up marking time and resources that would normally have to be spent by several tutors. Additionally, it can be frustrating for students when their tutors are not consistent in how they mark. The traditional form of CAA is teacher-provided answer questions . In these questions, a student makes a selection from, or interacts with, potential answers which the teacher has selected. Examples include multiple choice questions and multiple response questions. These types of questions have a number of limitations, including: Only finite answers are possible. The teacher can put in \"dummy responses\" for common mistakes and give feedback based on those mistakes, but it is impossible to give feedback on student errors outside the given examples. You can only assess lower-order skills. \"Give an example of...\" type questions are impossible. It encourages strategic learning, i.e. instead of solving the problem, students will think about how to \"trick the system\" and find the right answer. Question distortion is especially problematic in mathematics. You may ask students to integrate a complicated function, and then give a list of potential answers. Differentiating the answers to get the original expression is a much easier process, and sensible students are likely to take the easier route, which is not what we wanted the student to practice. The alternative is to focus on student-provided answer questions . In these questions, the student's answer contains the content. For example, a student could be asked to input an algebraic expression, like a polynomial. This system is harder to implement, but responds to all the shortcomings of teacher-provided answer questions listed above. STACK was designed to be such a system. Design choices STACK is not the first CAA system to focus on student-provided answer questions. However, STACK has a number of key design choices that make it stand out. Teachers should be able to write their own questions, with minimal coding skill Teachers should take responsibility for their assessments. When assessing students' answers, STACK asks teachers to focus on the properties of students' answers, such as \"algebraically equivalent to the teacher's answer\", \"factorised\", etc. Focusing on mathematical properties, such as equivalence, is a unique design feature of STACK. Teachers can then pick suitable answer tests in a potential response tree and give marks and feedback accordingly. STACK does not require teachers to learn a coding language and assess students' answers by writing code such as : If simplify(student_answer - teacher_answer) = 0 then mark = 1, else mark = 0. Students should not be penalised for poor computer skills Online assessment should assess mathematics skills, not how well students know the specific syntax. For example, penalising a student for answering sinx instead of sin(x) is not fair. Separating validity from assessment is a key design feature pioneered by STACK. To ensure that students are marked for mathematical skills instead of computer skills , STACK separates \"validity\" and \"correctness\". When a student types an answer, it is interpreted by the CAS and a \"validation box\" is shown displaying how the student's answer is interpreted. This gives the student a chance to fix any syntax errors before their answer is marked. Multipart questions should be possible Multipart questions can be very helpful for students, for example to help guide a student through a new topic. STACK completely separates input and assessment with a unique and flexible design. A question can have unlimited input boxes, and unlimited potential response trees to handle the assessment. Each tree is not limited to a particular input, but instead has access to all the student's inputs. Hence, a tree assessing the correctness of part (b) of a question can use the student's answer to part (a) in its algorithm. This allows for follow-through marking, where a student be penalised for a wrong expression in part (a) but given credit for correctly substituting in values in part (b). STACK should be rich in features STACK should be designed to cover the needs of a large variety of users across mathematics and science. Questions can be randomised to ensure different students see different variants of a question. There are many different kinds of inputs . These are, for example, where the student enters a mathematical expression, or makes a true/false selection. Partial credit is possible when an expression only satisfies some of the required properties. Plots can be dynamically generated and included within any part of the question, including feedback in the form of a plot of the student's expression. Students can work line by line reasoning by equivalence until they have a final answer in the correct form. STACK supports working with significant figures and scientific units . STACK should be open source The problems faced by teachers, particularly in University, are the same the world over. The developers of STACK wanted to make sure students do not have to pay for access codes and that institutions are not locked into an expensive system. At the same time, they wanted a system that encourages other developers to collaborate on improving STACK. STACK is the leading open souce online assessment system for mathematics and STEM. The business model for STACK relies on institutions collaborating on the infrustricture, remaining free to use the resulting system as the please, including in commercially as needed. Many design decisions for STACK are a direct result of choosing the GPL license, for example the choice of Maxima as its Computer Algebra System (CAS), Moodle and ILIAS to take care of identity management, LaTeX/MathJax to filter and display mathematics.","title":"Philosophy of STACK"},{"location":"en/About/The_philosophy_of_STACK/#philosophy-of-stack","text":"This page will describe the main design philosophy of STACK.","title":"Philosophy of STACK"},{"location":"en/About/The_philosophy_of_STACK/#motivation","text":"Computer Aided Assessment (CAA) has many advantages over traditional hand-marking. One of the key advantages is that, when done correctly, it can effectively assess and give feedback to a large number of students. This frees up marking time and resources that would normally have to be spent by several tutors. Additionally, it can be frustrating for students when their tutors are not consistent in how they mark. The traditional form of CAA is teacher-provided answer questions . In these questions, a student makes a selection from, or interacts with, potential answers which the teacher has selected. Examples include multiple choice questions and multiple response questions. These types of questions have a number of limitations, including: Only finite answers are possible. The teacher can put in \"dummy responses\" for common mistakes and give feedback based on those mistakes, but it is impossible to give feedback on student errors outside the given examples. You can only assess lower-order skills. \"Give an example of...\" type questions are impossible. It encourages strategic learning, i.e. instead of solving the problem, students will think about how to \"trick the system\" and find the right answer. Question distortion is especially problematic in mathematics. You may ask students to integrate a complicated function, and then give a list of potential answers. Differentiating the answers to get the original expression is a much easier process, and sensible students are likely to take the easier route, which is not what we wanted the student to practice. The alternative is to focus on student-provided answer questions . In these questions, the student's answer contains the content. For example, a student could be asked to input an algebraic expression, like a polynomial. This system is harder to implement, but responds to all the shortcomings of teacher-provided answer questions listed above. STACK was designed to be such a system.","title":"Motivation"},{"location":"en/About/The_philosophy_of_STACK/#design-choices","text":"STACK is not the first CAA system to focus on student-provided answer questions. However, STACK has a number of key design choices that make it stand out.","title":"Design choices"},{"location":"en/About/The_philosophy_of_STACK/#teachers-should-be-able-to-write-their-own-questions-with-minimal-coding-skill","text":"Teachers should take responsibility for their assessments. When assessing students' answers, STACK asks teachers to focus on the properties of students' answers, such as \"algebraically equivalent to the teacher's answer\", \"factorised\", etc. Focusing on mathematical properties, such as equivalence, is a unique design feature of STACK. Teachers can then pick suitable answer tests in a potential response tree and give marks and feedback accordingly. STACK does not require teachers to learn a coding language and assess students' answers by writing code such as : If simplify(student_answer - teacher_answer) = 0 then mark = 1, else mark = 0.","title":"Teachers should be able to write their own questions, with minimal coding skill"},{"location":"en/About/The_philosophy_of_STACK/#students-should-not-be-penalised-for-poor-computer-skills","text":"Online assessment should assess mathematics skills, not how well students know the specific syntax. For example, penalising a student for answering sinx instead of sin(x) is not fair. Separating validity from assessment is a key design feature pioneered by STACK. To ensure that students are marked for mathematical skills instead of computer skills , STACK separates \"validity\" and \"correctness\". When a student types an answer, it is interpreted by the CAS and a \"validation box\" is shown displaying how the student's answer is interpreted. This gives the student a chance to fix any syntax errors before their answer is marked.","title":"Students should not be penalised for poor computer skills"},{"location":"en/About/The_philosophy_of_STACK/#multipart-questions-should-be-possible","text":"Multipart questions can be very helpful for students, for example to help guide a student through a new topic. STACK completely separates input and assessment with a unique and flexible design. A question can have unlimited input boxes, and unlimited potential response trees to handle the assessment. Each tree is not limited to a particular input, but instead has access to all the student's inputs. Hence, a tree assessing the correctness of part (b) of a question can use the student's answer to part (a) in its algorithm. This allows for follow-through marking, where a student be penalised for a wrong expression in part (a) but given credit for correctly substituting in values in part (b).","title":"Multipart questions should be possible"},{"location":"en/About/The_philosophy_of_STACK/#stack-should-be-rich-in-features","text":"STACK should be designed to cover the needs of a large variety of users across mathematics and science. Questions can be randomised to ensure different students see different variants of a question. There are many different kinds of inputs . These are, for example, where the student enters a mathematical expression, or makes a true/false selection. Partial credit is possible when an expression only satisfies some of the required properties. Plots can be dynamically generated and included within any part of the question, including feedback in the form of a plot of the student's expression. Students can work line by line reasoning by equivalence until they have a final answer in the correct form. STACK supports working with significant figures and scientific units .","title":"STACK should be rich in features"},{"location":"en/About/The_philosophy_of_STACK/#stack-should-be-open-source","text":"The problems faced by teachers, particularly in University, are the same the world over. The developers of STACK wanted to make sure students do not have to pay for access codes and that institutions are not locked into an expensive system. At the same time, they wanted a system that encourages other developers to collaborate on improving STACK. STACK is the leading open souce online assessment system for mathematics and STEM. The business model for STACK relies on institutions collaborating on the infrustricture, remaining free to use the resulting system as the please, including in commercially as needed. Many design decisions for STACK are a direct result of choosing the GPL license, for example the choice of Maxima as its Computer Algebra System (CAS), Moodle and ILIAS to take care of identity management, LaTeX/MathJax to filter and display mathematics.","title":"STACK should be open source"},{"location":"en/Authoring/","text":"Authoring The authoring documentation provides information on common authoring topics. Authoring quick start Those new to STACK would probably prefer the authoring quick start guide . These guides cover the most important topics of question authoring, and include embedded screencast videos to guide you. Authoring quick start 1 : A basic question. Authoring quick start 2 : Question variables. Authoring quick start 3 : Improving feedback. Authoring quick start 4 : Randomisation. Authoring quick start 5 : Question Testing. Authoring quick start 6 : Multi-part mathematical questions. Authoring quick start 7 : Turning simplification off. Authoring quick start 8 : Importing and Quizzes. STACK question structure A stackQuestion is the basic object in the system. The following table shows the fields which make up a question, with links to the documentation for each one. Name Details Question name Names a question Question variables These are potentially random variables which can be used to generate a question. Question text This is the question the student actually sees General feedback The worked solution is only available after an item is closed. Question note Two randomly generated question variants are different, if and only if the question note is different. Use this field to store useful information which distinguishes variants. Inputs The inputs are the things, such as form boxes, with which the student actually interacts. Potential response trees These are the algorithms which establish the mathematical properties of the students' answers and generate feedback. Options Many behaviours can be changed with the options. Other authoring topics The authoring documentation also covers topics on: CASText Fact Sheets , Question blocks , Actuarial notation, Using JSXGraph . Input types Numerical input , Units in input , Equivalence reasoning , Multiple choice questions , Curve sketching . Giving feedback with potential response trees Information on the types of feedback in STACK , Using Answer tests and numerical answer tests , Answer tests for units . Testing and reporting Creating question tests , Deploying variants , Reporting , Ensuring questions work in the future . Using Moodle Finding the question bank , Creating a quiz , Importing and exporting . Other Creating multilingual questions . Where to find sample questions . Frequently asked questions . See also If you cannot find documentation on the topic you are looking for, it may be located in the CAS section of the documentation. This includes documentation on working with Maxima in a question, and so covers topics like Inequalities , Randomisation , Plotting graphs , Simplification .","title":"Authoring"},{"location":"en/Authoring/#authoring","text":"The authoring documentation provides information on common authoring topics.","title":"Authoring"},{"location":"en/Authoring/#authoring-quick-start","text":"Those new to STACK would probably prefer the authoring quick start guide . These guides cover the most important topics of question authoring, and include embedded screencast videos to guide you. Authoring quick start 1 : A basic question. Authoring quick start 2 : Question variables. Authoring quick start 3 : Improving feedback. Authoring quick start 4 : Randomisation. Authoring quick start 5 : Question Testing. Authoring quick start 6 : Multi-part mathematical questions. Authoring quick start 7 : Turning simplification off. Authoring quick start 8 : Importing and Quizzes.","title":"Authoring quick start"},{"location":"en/Authoring/#stack-question-structure","text":"A stackQuestion is the basic object in the system. The following table shows the fields which make up a question, with links to the documentation for each one. Name Details Question name Names a question Question variables These are potentially random variables which can be used to generate a question. Question text This is the question the student actually sees General feedback The worked solution is only available after an item is closed. Question note Two randomly generated question variants are different, if and only if the question note is different. Use this field to store useful information which distinguishes variants. Inputs The inputs are the things, such as form boxes, with which the student actually interacts. Potential response trees These are the algorithms which establish the mathematical properties of the students' answers and generate feedback. Options Many behaviours can be changed with the options.","title":"STACK question structure"},{"location":"en/Authoring/#other-authoring-topics","text":"The authoring documentation also covers topics on:","title":"Other authoring topics"},{"location":"en/Authoring/#castext","text":"Fact Sheets , Question blocks , Actuarial notation, Using JSXGraph .","title":"CASText"},{"location":"en/Authoring/#input-types","text":"Numerical input , Units in input , Equivalence reasoning , Multiple choice questions , Curve sketching .","title":"Input types"},{"location":"en/Authoring/#giving-feedback-with-potential-response-trees","text":"Information on the types of feedback in STACK , Using Answer tests and numerical answer tests , Answer tests for units .","title":"Giving feedback with potential response trees"},{"location":"en/Authoring/#testing-and-reporting","text":"Creating question tests , Deploying variants , Reporting , Ensuring questions work in the future .","title":"Testing and reporting"},{"location":"en/Authoring/#using-moodle","text":"Finding the question bank , Creating a quiz , Importing and exporting .","title":"Using Moodle"},{"location":"en/Authoring/#other","text":"Creating multilingual questions . Where to find sample questions . Frequently asked questions .","title":"Other"},{"location":"en/Authoring/#see-also","text":"If you cannot find documentation on the topic you are looking for, it may be located in the CAS section of the documentation. This includes documentation on working with Maxima in a question, and so covers topics like Inequalities , Randomisation , Plotting graphs , Simplification .","title":"See also"},{"location":"en/Authoring/Actuarial/","text":"Notation used in actuarial work There are a number of special notations particular to actuarial work. For example, \\require{enclose} EPV = a _{[25]+5:\\enclose{actuarial}{30}} ^ {\\space 1}, which is typeset using \\[\\require{enclose} EPV = a _{[25]+5:\\enclose{actuarial}{30}} ^ {\\space 1}\\] . Further examples are given below. Life Contingencies' Symbols Inline Code (without LaTeX delimiters) a a \\require{enclose} a_{\\enclose{actuarial}{K}} \\require{enclose} a_{\\enclose{actuarial}{K}} \\require{enclose} \\bar{a}_{\\enclose{actuarial}{T}} \\require{enclose} \\bar{a}_{\\enclose{actuarial}{T}} \\require{enclose} \\ddot{a}_x \\require{enclose} \\ddot{a}_x \\require{enclose} \\bar{a}_{h}^{r} \\require{enclose} \\bar{a}_{h}^{r} \\require{enclose} \\ddot{a}_{x}^{\\{m\\}} \\require{enclose} \\ddot{a}_{x}^{\\{m\\}} \\require{enclose} a_{x:\\enclose{actuarial}{n}} \\require{enclose} a_{x:\\enclose{actuarial}{n}} \\require{enclose} \\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\mathring{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\mathring{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{\\{m\\}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{\\{m\\}} \\require{enclose} \\bar{a}_{\\overline{x:\\enclose{actuarial}{n}}} \\require{enclose} \\bar{a}_{\\overline{x:\\enclose{actuarial}{n}}} \\require{enclose} {}^{2}\\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} {}^{2}\\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} {}^{2}\\ddot{a}_{xy:\\enclose{actuarial}{n}} \\require{enclose} {}^{2}\\ddot{a}_{xy:\\enclose{actuarial}{n}} STACK provides some support for statistical functions via optional Maxima packages. See specific pages on statistics .","title":"Notation used in actuarial work"},{"location":"en/Authoring/Actuarial/#notation-used-in-actuarial-work","text":"There are a number of special notations particular to actuarial work. For example, \\require{enclose} EPV = a _{[25]+5:\\enclose{actuarial}{30}} ^ {\\space 1}, which is typeset using \\[\\require{enclose} EPV = a _{[25]+5:\\enclose{actuarial}{30}} ^ {\\space 1}\\] . Further examples are given below.","title":"Notation used in actuarial work"},{"location":"en/Authoring/Actuarial/#life-contingencies-symbols","text":"Inline Code (without LaTeX delimiters) a a \\require{enclose} a_{\\enclose{actuarial}{K}} \\require{enclose} a_{\\enclose{actuarial}{K}} \\require{enclose} \\bar{a}_{\\enclose{actuarial}{T}} \\require{enclose} \\bar{a}_{\\enclose{actuarial}{T}} \\require{enclose} \\ddot{a}_x \\require{enclose} \\ddot{a}_x \\require{enclose} \\bar{a}_{h}^{r} \\require{enclose} \\bar{a}_{h}^{r} \\require{enclose} \\ddot{a}_{x}^{\\{m\\}} \\require{enclose} \\ddot{a}_{x}^{\\{m\\}} \\require{enclose} a_{x:\\enclose{actuarial}{n}} \\require{enclose} a_{x:\\enclose{actuarial}{n}} \\require{enclose} \\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\mathring{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\mathring{a}_{x:\\enclose{actuarial}{n}}^{(m)} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{\\{m\\}} \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{\\{m\\}} \\require{enclose} \\bar{a}_{\\overline{x:\\enclose{actuarial}{n}}} \\require{enclose} \\bar{a}_{\\overline{x:\\enclose{actuarial}{n}}} \\require{enclose} {}^{2}\\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} {}^{2}\\bar{a}_{x:\\enclose{actuarial}{n}} \\require{enclose} {}^{2}\\ddot{a}_{xy:\\enclose{actuarial}{n}} \\require{enclose} {}^{2}\\ddot{a}_{xy:\\enclose{actuarial}{n}} STACK provides some support for statistical functions via optional Maxima packages. See specific pages on statistics .","title":"Life Contingencies' Symbols"},{"location":"en/Authoring/Answer_tests/","text":"Answer tests An answer test is used to compare two expressions to establish whether they satisfy some mathematical criteria. The prototype test is to establish if they are the same . That is to say, algebraically equivalent . We expose the exact behaviour of each answer test by giving registered users access to STACK's test suite for STACK Answer tests. This can be found on a live server at https://stack-demo.maths.ed.ac.uk/demo/question/type/stack/answertests.php This compares pairs of expressions and displays the outcomes from each test. Mainly used to ensure STACK is working, it is invaluable for understanding what each test really does. In particular it enables authors to see examples of which expressions are the same and different together with examples of the automatically generated feedback. This feedback can be suppressed using the quiet tick-box in the potential response tree node. You can apply functions before applying the tests. For example, to ignore case sensitivity you can apply the Maxima commands defined by STACK exdowncase(ex) to the arguments, before you apply one of the other answer tests. Introduction Informally, the answer tests have the following syntax [Errors, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt) Where, Variable Description StudentAnswer A CAS expression, assumed to be the student's answer. TeacherAnswer A CAS expression, assumed to be the model answer. Opt Any options which the specific answer test provides. For example, a variable, the accuracy of the numerical comparison, number of significant figures. Note that since the tests can provide feedback, tests which appear to be symmetrical, e.g. Algebraic Equivalence, really need to assume which expression belongs to the student and which to the teacher. Variable Description Errors Hopefully this will be empty! Result is either true , false , or fail (which indicates a failure of the test). This determines which branch of the tree is traversed. FeedBack This is a text string which is displayed to the student. It is CASText which may depend on properties of the student's answer. Note This is a text string which is used for Reporting . Each answer note is concatenated with the previous notes and any contributions from the branch. The feedback is only shown to a student if the quiet option is set to 'no'. If feedback is shown, then examples are given in the answer-test test suite. Login as the admin user then navigate to Home > Site administration > Plugins > Question types > Stack Equality A crucial component in the assessment process the ability to decide if two expressions are equal. Let us assume a teacher has asked a student to expand out (x+1)^2 and the response they have from one student is x^2+x+x+1 . This is \"correct\" in the sense that it is algebraically equivalent to (x+1)^2 and is in expanded form (actually two separate mathematical properties) but \"incorrect\" in the sense that the student has not gathered like terms by performing an addition x+x . What about a response 2x+x^2+1 ? This is, arguably, better in the sense that the terms are gathered, but the student here did not order the terms to write their expression in canonical form. Hence, we need quite a number of different answer tests to establish equality in various senses of the word. Test Description (see below for more details) CasEqual Are the parse trees of the two expressions equal? EqualComAss Are they equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division? AlgEquiv Are they algebraically equivalent ? AlgEquivNouns Are they algebraically equivalent , preserving noun forms of operators, e.g. diff ? SubstEquiv Can we find a substitution of the variables of ex_2 into ex_1 which renders ex_1 algebraically equivalent to ex_2 ? SameType Are the two expressions of the same types_of_object ? Note that this test works recursively over the entire expression. SysEquiv Do two systems of polynomial equations have the same solutions? PropLogic An answer test designed to deal with propositional logic . SubstEquiv accepts an optional argument, which must be a list of variables. These variables will be excluded from the list of possible comparisons, and so must be \"fixed\" in the comparison. Useful if you want to establish that a student has used arbitrary constants in A\\sin(x)+B\\cos(x) but make sure x really stays as x . AlgEquiv This is the most commonly used test. The pseudo code If simplify(ex1-ex2) = 0 then true else false. This test will work with a variety of types of object of mathematical objects, including lists, sets, equations, inequalities and matrices. This test disregards whether simplification is switched on, it always fully simplifies all its arguments. Use AlgEquiv(predicate(ex),true) with predicate functions . Note: exactly what it does depends on what objects are given to it. In particular the pseudo code above only applies to expressions. We cannot subtract one list or set from another, so we have to use other tests. For sets, the CAS tries to write the expression in a canonical form. It then compares the string representations these forms to remove duplicate elements and compare sets. This is subtly different from trying to simplify the difference of two expressions to zero. For example, imagine we have \\{(x-a)^{6000}\\} and \\{(a-x)^{6000}\\} . One canonical form is to expand out both sides. While this work in principal, in practice this is much too slow for assessment. Currently we do check multiplicity of roots, so that (x-2)^2=0 and x=2 are not considered to be equivalent. Similarly a^3b^3=0 is not a=0 \\mbox{ or } b=0 . This is a long-standing issue and we would need a separate test to ignore multiplicity of roots. Currently, \\{-\\frac{\\sqrt{2}}{\\sqrt{3}}\\} and \\{-\\frac{2}{\\sqrt{6}}\\} are considered to be different. If you want these to be considered the same, you need to write them in a canonical form. Instead of passing in just the sets, use the answer test to compare the following. ev(radcan({-sqrt(2)/sqrt(3)}),simp); ev(radcan({-2/sqrt(6)}),simp); Why doesn't the test automatically apply radcan ? If we always did this, then \\{(x-a)^{6000}\\} and \\{(a-x)^{6000}\\} would be expanded out, which would break the system. Since, in a given situation, we know a lot about what a student is likely to answer we can apply an appropriate form. There isn't one rule which will work here, unfortunately. There are also some cases which Maxima can't establish as being equivalent. For example \\sqrt[3]{\\sqrt{108}+10}-\\sqrt[3]{\\sqrt{108}-10} = 2. As Maxima code (sqrt(108)+10)^(1/3)-(sqrt(108)-10)^(1/3) This is Cardano's example from Ars Magna, but currently the AlgEquiv test cannot establish these are equivalent. There are some other examples in the test suite which fail for mathematical reasons. In cases like this, where you know you have a number, you may need to supplement the AlgEquiv test with another numerical test. AlgEquivNouns Algebraic equivalence evaluates as much as possible, to try to establish equivalence. This means, e.g. that diff(y,x) is always evaluated to 0 . If you use AlgEquivNouns then noun forms of operators are not evaluated, so diff(y,x) will be evaluated but 'diff(y,x) and noundiff(y,x) will not. Note, however that logic nouns such as nounand are still evaluated by this test! Sorry, but logical noun functions are dealt with internally in a very different way than Maxima noun functions such as 'diff(y,x) and the parallel noundiff . Use a different test, such as EqualComAss . EqualComAss: Equality up to Associativity and Commutativity Are they equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division? For example a+b=b+a\\mbox{,} but x+x\\neq 2x\\mbox{.} This is very useful in elementary algebra, where we want the form of the answer exactly. Simplification is automatically switched off when this test is applied, otherwise it makes no sense. This test seeks to establish whether two expressions are the same when the basic operations of arithmetic addition/multiplication and Boolean and/or are assumed to be nouns but are commutative and associative. Hence, 2x+y=y+2x but x+x+y\\neq 2x+y . The unary minus commutes with multiplication in a way natural to establishing the required form of equivalence. This is a particularly useful test for checking that an answer is written in a particular form, e.g. \"simplified\". Notes This test does not include laws of indices, so x\\times x \\neq x^2 . Since we are dealing only with nouns -\\times - does not simplify to 1 . E.g. -x\\times -x \\neq x\\times x \\neq x^2 . This also means that \\sqrt{x} is not considered to be equivalent to x^{\\frac{1}{2}} under this test. In many situations this notation is taken mean the same thing, but internally in Maxima they are represented by different functions and not converted to a canonical form by the test. Extra re-write rules could be added to achieve this, which would change the equivalence classes. By design, addition commutes with subtraction, so -1+2\\equiv 2-1 and multiplication commutes with division, so (ab)/c\\equiv a(b/c) . By design -1/4x \\neq -x/4 since we do not have the rule 1\\times x \\rightarrow x . To establish this equivalence we would need a different answer test. This test can also be used to establish \\{4,4\\} \\neq \\{4\\} , but \\{1,2\\} = \\{2,1\\} since the arguments of the set constructor function are commutative. Sets are not associative, so \\{1,2\\} \\neq \\{\\{1\\},2\\} . (See Maxima's flatten command.) CasEqual The CAS returns the result of the simple Maxima command if StudentAnswer=TeacherAnswer then true else false. There is no explicit simplification here (unlike AlgEquiv). This test always assumes simplification is off, i.e. simp:false , regardless of any question settings. If this is too strict, use ev(ex,simp) in the arguments to simplify them explicitly first. When simplification is off this test effectively tests whether the parse trees are identical. Please note, the behaviour of this test relies on the internal representation of expressions by Maxima, rather than an explicit mathematical property such as \"equivalence\". Explicit properties should be tested in preference to using this test! SubstEquiv Can we find a substitution of the variables of ex_2 into ex_1 which renders ex_1 algebraically equivalent to ex_2 ? Because we have to test every possibility, the algorithm is factorial in the number of variables. For this reason, the test only works for 4 or fewer variables. This test makes a substitution then uses AlgEquiv. SysEquiv The SysEquiv (system equivalence) test takes in two lists of polynomial equations in any number of variables and determines whether the two systems have the same set of solutions. This is done using the theory of Grobner bases to determine whether the ideals generated by the two systems are equal. As the test allows for polynomials in several variables, it can cope with the intersections of the conic sections, as well as a large number of geometrically interesting curves. This test does not check if the student actually \"fully solved\" the equations! E.g. [x^2=1] \\equiv [(x-1)\\cdot (x+1)=0] under this test. This test disregards whether simplification is switched on, it only simplifies its arguments where required. This allows the test to list equations in feedback that the student has erroneously included in their system. You can allow the student to include \"redundant assignments\". For example, if you have [90=v*t,90=(v+5)*(t-1/4)] but the student has [d=90,d=v*t,d=(v+5)*(t-1/4)]) then the systems are not equivalent, becuase the student has an extra variable. Use stack_eval_assignments to eliminate explicit assignments of the form var=num and evaluate the other expression in this context. Sets This test deals with equality of sets. The algebraic equivalence functions give very minimal feedback. This test is designed to give much more detailed feedback on what is and is not included in the student's answer. Hence, this essentially tells the student what is missing. This is kind of feedback is tedious to generate without this test. The test simplifies both sets, and does a comparison based on the simplified versions. The comparison relies on ev(..., simp, nouns) to undertake the simplification. If you need stronger simplification (e.g. trig) then you will need to add this to the arguments of the function first. Equiv and EquivFirstLast These answer tests are used with equivalence reasoning . See the separate documentation. SRegExp This test uses Maxima's regex_match function. Both arguments to the test must be Maxima strings. If you have a general expression, turn it into a string in the feedback variables with Maxima's string function. The first argument should be the string, and the second argument should be the pattern to match. Don't forget to escape within the pattern strings as needed. Note that there is a function string_to_regex() that will handle escaping of characters that would otherwise have meaning in the pattern. Also remember that you need to escape the backslashes like normal in Maxima-strings. One can read more about the patterns posible from here . Case-insensitivity may be something worth noting there. STACK also provides a helper function regex_match_exactp(regex, str) to check if the string equals the pattern matched by the regular expression. Regex String Result (aaa)*(b|d)c aaaaaabc true (aaa)*(b|d)c dc true (aaa)*(b|d)c aaaaaaabc false (aaa)*(b|d)c cca false Currently this is not provided as a separate answer test so you will need to use this predicate in the question variables and check the result against the expected value, or supply the predicate as an argument to an answer test. Form Often, we wish to establish if the student's expression has the correct form . For example, consider the following various written forms of x^2-4x+4 . (x-2)(x-2),\\quad (x-2)^2,\\quad (2-x)^2,\\quad 4\\left(1-\\frac{x}{2}\\right)^2. Each of these might be considered to be factored. Establishing ex is factored is not the same as comparing it with factor(ex) Related tests establish that an expression is expanded or in partial fraction form. Expression Description LowestTerms This test checks that all numbers written in the first expression are in lowest terms and that the denominator is clear of surds and complex numbers. Notes * if you want to check whether a rational polynomial is written in lowest terms, this is not the test to use. Instead, apply the predicate functions lowesttermsp to the expression. * the second argument to this function is ignored, i.e. this test does not confirm algebraic equivalence. You might as well use 0 here. SingleFrac This test checks that SAns written as a \"single fraction\". See below. Expanded Confirms SAns is equal to expand(SAns) . Note, the second argument to this answer test is not used (but must be non-empty). Note with this test that an expression such as x^2-(a+b)x+ab is not considered to be expanded, and this test will return false. FacForm This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is \"factored\" over the rational numbers. See below for more details. The answer test expects the option to be the variable, which is needed to generate feedback. If the answer is incorrect, quite detailed feedback is provided. PartFrac This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is in \"partial fraction form\". The option must be the variable. CompletedSquare This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is in \"completed square form\". The option must be the variable. Single fractions This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is written as a single fraction. Notes This test works at the top level, making sure the expression as a whole is a single fraction. if you also want this expression written in lowest terms, then this is quite a separate test. You need to first confirm you have a single fraction then add a new potential response. One way is to use the ../CAS/Predicate functions lowesttermsp(ex) and compare the result with true with the AlgEquiv test. The algebraic equivalence check is for convenience. If you only want to check an expression is a single fraction make SAns=TAns , i.e. ATSingleFrac(ex,ex) will do. Factorisation of polynomials An expression is said to be factored if it is written as a product of powers of distinct irreducible factors. Strictly speaking, in establishing that an expression is in factored form, we might not even care whether the terms in the product are fully simplified, as long as they are irreducible. Irreducibility on the other hand means we can't find further factors, but here we need some care. Consider x^8+16x^4+48 . Any non-trivial factorization, e.g. (x^4+4)(x^4+12) . A factorization into irreducible factors over the integers/rational numbers, i.e. (x^2+2x+x)(x^2-2x+2)(x^4+12) . A factorization into terms irreducible over the reals, i.e. (x^2+2x+x)(x^2-2x+2)(x^2+2\\sqrt[4]{3}x+2\\sqrt[4]{3})(x^2-2\\sqrt[4]{3}x+2\\sqrt[4]{3}) . A factorization into irreducible polynomials over the Gaussian integers, with i allowed, i.e. (x+1+i)(x+1-i)(x-1+i)(x-1-i)(x^4+12) . A factorization over the complex numbers, where the factor (x^4+12) would also be split into the four terms x\\pm\\sqrt[4]{3}(1\\pm i) . In elementary teaching, meaning 4. is unlikely to occur. Indeed, we might take this example to represent factoring over any extension field of the rational numbers. We normally seek to establish that the factors are irreducible over the integers (which is equivalent to irreducibility over the rational numbers) or the reals. But, unlike a canonical form, we are not particularly interested in the order of the terms in this product, or the order of summands inside these terms. The FacForm test establishes that the expression is factored over the rational numbers. If the coefficients of the polynomial are all real, at worst you will have quadratic irreducible terms. There are some delicate cases such as: (2-x)(3-x) vs (x-2)(x-3) and (1-x)^2 vs (x-1)^2 , which this test will cope with. Factorisation of integers If you would like to ask a student to factor a polynomial, then do not use the FacForm answer test. The FacForm answer test is designed to use with polynomials. Instead, switch off simplification and define ta:factor(12); and use EqualComAss as the answer test. Note however that EqualComAss does not think that 2^2*3 and 2*2*3 are the same! Numerical Precision These tests deal with the precision of numbers. See dedicated page on numerical answer tests . Calculus Diff This test is a general differentiation test: it is passed if the arguments are algebraically equivalent, but gives feedback if it looks like the student has integrated instead of differentiated. The first argument is the student's answer. The second argument is the model answer. The answer test option must be the variable with respect to which differentiation is assumed to take place. Int This test is designed for a general indefinite integration question: it is passed if both the arguments are indefinite integrals of the same expression. The first argument is the student's answer. The second argument is the model answer. The answer test option needs to be the variable with respect to which integration is assumed to take place, or a list (see below). Getting this test to work in a general setting is a very difficult challenge. In particular, the test assumes that the constant of integration is expressed in a form similar to +c, although which variable used is not important. The issue of \\int \\frac{1}{x} dx = \\log(x)+c vs \\int \\frac{1}{x} dx = \\log(|x|)+c is a particular challenge. The test is currently defined in such a way that if the teacher uses \\log(|x|)+c in their answer, then they would expect the student to do so. If they don't use the absolute value function, then they don't expect students to but will accept this in an answer. It is, after all, not \"wrong\". However, in the case of partial fractions where there are more than one term of the form \\log(x-a) then we insist the student is at least consistent. If the teacher has any \\log(|x-a|) then the student must use |...| in all of them. If the teacher has no \\log(|x-a|) (i.e. just things like \\log(x-a) ) then the student must have all or none. The Int test has various additional options. The question author must supply these options in the form of a list [var, opt1, ...] . The first argument of this list must be the variable with respect to which integration is taking place. If one of the opt? is exactly the token NOCONST then the test will condone a lack of constant of integration. That is, if a student has missed off a constant of integration, or the answers differ by a numerical constant, then full marks will be awarded. Weird constants (e.g. +c^2 ) will still be flagged up. The answer test architecture only passes in the answer to the test. The question is not available at that point; however, the answer test has to infer exactly which expression, including the algebraic form, the teacher has set in the question. This includes stripping off constants of integration and constants of integration may occur in a number of ways, e.g. in logarithms. In many cases simply differentiating the teacher's answer is fine, in which case the question author need not worry. Where this does not work, the question author will need to supply the expression from the question in the right form as an option to the answer test. This is done simply by adding it to the list of options. [x, x*exp(5*x+7)] The test cannot cope with some situations. Please contact the developers when you find some of these. This test is already rather overloaded, so please don't expect every request to be accommodated! Other The following tests do not use Maxima, but instead rely on PHP. Expression Description String This is a string match, ignoring leading and trailing white space which are stripped from all answers, using PHP's trim() function. StringSloppy This function first converts both inputs to lower case, then removes all white space from the string and finally performs a strict string comparison. (RegExp) NOTE: this test was removed in STACK version 4.3. Scientific units A dedicated answer test for scientific units is described on the units page. Developer Adding answer tests is possible, but is a developer task. See also Maxima","title":"Answer tests"},{"location":"en/Authoring/Answer_tests/#answer-tests","text":"An answer test is used to compare two expressions to establish whether they satisfy some mathematical criteria. The prototype test is to establish if they are the same . That is to say, algebraically equivalent . We expose the exact behaviour of each answer test by giving registered users access to STACK's test suite for STACK Answer tests. This can be found on a live server at https://stack-demo.maths.ed.ac.uk/demo/question/type/stack/answertests.php This compares pairs of expressions and displays the outcomes from each test. Mainly used to ensure STACK is working, it is invaluable for understanding what each test really does. In particular it enables authors to see examples of which expressions are the same and different together with examples of the automatically generated feedback. This feedback can be suppressed using the quiet tick-box in the potential response tree node. You can apply functions before applying the tests. For example, to ignore case sensitivity you can apply the Maxima commands defined by STACK exdowncase(ex) to the arguments, before you apply one of the other answer tests.","title":"Answer tests"},{"location":"en/Authoring/Answer_tests/#introduction","text":"Informally, the answer tests have the following syntax [Errors, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt) Where, Variable Description StudentAnswer A CAS expression, assumed to be the student's answer. TeacherAnswer A CAS expression, assumed to be the model answer. Opt Any options which the specific answer test provides. For example, a variable, the accuracy of the numerical comparison, number of significant figures. Note that since the tests can provide feedback, tests which appear to be symmetrical, e.g. Algebraic Equivalence, really need to assume which expression belongs to the student and which to the teacher. Variable Description Errors Hopefully this will be empty! Result is either true , false , or fail (which indicates a failure of the test). This determines which branch of the tree is traversed. FeedBack This is a text string which is displayed to the student. It is CASText which may depend on properties of the student's answer. Note This is a text string which is used for Reporting . Each answer note is concatenated with the previous notes and any contributions from the branch. The feedback is only shown to a student if the quiet option is set to 'no'. If feedback is shown, then examples are given in the answer-test test suite. Login as the admin user then navigate to Home > Site administration > Plugins > Question types > Stack","title":"Introduction"},{"location":"en/Authoring/Answer_tests/#equality","text":"A crucial component in the assessment process the ability to decide if two expressions are equal. Let us assume a teacher has asked a student to expand out (x+1)^2 and the response they have from one student is x^2+x+x+1 . This is \"correct\" in the sense that it is algebraically equivalent to (x+1)^2 and is in expanded form (actually two separate mathematical properties) but \"incorrect\" in the sense that the student has not gathered like terms by performing an addition x+x . What about a response 2x+x^2+1 ? This is, arguably, better in the sense that the terms are gathered, but the student here did not order the terms to write their expression in canonical form. Hence, we need quite a number of different answer tests to establish equality in various senses of the word. Test Description (see below for more details) CasEqual Are the parse trees of the two expressions equal? EqualComAss Are they equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division? AlgEquiv Are they algebraically equivalent ? AlgEquivNouns Are they algebraically equivalent , preserving noun forms of operators, e.g. diff ? SubstEquiv Can we find a substitution of the variables of ex_2 into ex_1 which renders ex_1 algebraically equivalent to ex_2 ? SameType Are the two expressions of the same types_of_object ? Note that this test works recursively over the entire expression. SysEquiv Do two systems of polynomial equations have the same solutions? PropLogic An answer test designed to deal with propositional logic . SubstEquiv accepts an optional argument, which must be a list of variables. These variables will be excluded from the list of possible comparisons, and so must be \"fixed\" in the comparison. Useful if you want to establish that a student has used arbitrary constants in A\\sin(x)+B\\cos(x) but make sure x really stays as x .","title":"Equality"},{"location":"en/Authoring/Answer_tests/#AlgEquiv","text":"This is the most commonly used test. The pseudo code If simplify(ex1-ex2) = 0 then true else false. This test will work with a variety of types of object of mathematical objects, including lists, sets, equations, inequalities and matrices. This test disregards whether simplification is switched on, it always fully simplifies all its arguments. Use AlgEquiv(predicate(ex),true) with predicate functions . Note: exactly what it does depends on what objects are given to it. In particular the pseudo code above only applies to expressions. We cannot subtract one list or set from another, so we have to use other tests. For sets, the CAS tries to write the expression in a canonical form. It then compares the string representations these forms to remove duplicate elements and compare sets. This is subtly different from trying to simplify the difference of two expressions to zero. For example, imagine we have \\{(x-a)^{6000}\\} and \\{(a-x)^{6000}\\} . One canonical form is to expand out both sides. While this work in principal, in practice this is much too slow for assessment. Currently we do check multiplicity of roots, so that (x-2)^2=0 and x=2 are not considered to be equivalent. Similarly a^3b^3=0 is not a=0 \\mbox{ or } b=0 . This is a long-standing issue and we would need a separate test to ignore multiplicity of roots. Currently, \\{-\\frac{\\sqrt{2}}{\\sqrt{3}}\\} and \\{-\\frac{2}{\\sqrt{6}}\\} are considered to be different. If you want these to be considered the same, you need to write them in a canonical form. Instead of passing in just the sets, use the answer test to compare the following. ev(radcan({-sqrt(2)/sqrt(3)}),simp); ev(radcan({-2/sqrt(6)}),simp); Why doesn't the test automatically apply radcan ? If we always did this, then \\{(x-a)^{6000}\\} and \\{(a-x)^{6000}\\} would be expanded out, which would break the system. Since, in a given situation, we know a lot about what a student is likely to answer we can apply an appropriate form. There isn't one rule which will work here, unfortunately. There are also some cases which Maxima can't establish as being equivalent. For example \\sqrt[3]{\\sqrt{108}+10}-\\sqrt[3]{\\sqrt{108}-10} = 2. As Maxima code (sqrt(108)+10)^(1/3)-(sqrt(108)-10)^(1/3) This is Cardano's example from Ars Magna, but currently the AlgEquiv test cannot establish these are equivalent. There are some other examples in the test suite which fail for mathematical reasons. In cases like this, where you know you have a number, you may need to supplement the AlgEquiv test with another numerical test.","title":"AlgEquiv"},{"location":"en/Authoring/Answer_tests/#algequivnouns","text":"Algebraic equivalence evaluates as much as possible, to try to establish equivalence. This means, e.g. that diff(y,x) is always evaluated to 0 . If you use AlgEquivNouns then noun forms of operators are not evaluated, so diff(y,x) will be evaluated but 'diff(y,x) and noundiff(y,x) will not. Note, however that logic nouns such as nounand are still evaluated by this test! Sorry, but logical noun functions are dealt with internally in a very different way than Maxima noun functions such as 'diff(y,x) and the parallel noundiff . Use a different test, such as EqualComAss .","title":"AlgEquivNouns"},{"location":"en/Authoring/Answer_tests/#EqualComAss","text":"Are they equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division? For example a+b=b+a\\mbox{,} but x+x\\neq 2x\\mbox{.} This is very useful in elementary algebra, where we want the form of the answer exactly. Simplification is automatically switched off when this test is applied, otherwise it makes no sense. This test seeks to establish whether two expressions are the same when the basic operations of arithmetic addition/multiplication and Boolean and/or are assumed to be nouns but are commutative and associative. Hence, 2x+y=y+2x but x+x+y\\neq 2x+y . The unary minus commutes with multiplication in a way natural to establishing the required form of equivalence. This is a particularly useful test for checking that an answer is written in a particular form, e.g. \"simplified\". Notes This test does not include laws of indices, so x\\times x \\neq x^2 . Since we are dealing only with nouns -\\times - does not simplify to 1 . E.g. -x\\times -x \\neq x\\times x \\neq x^2 . This also means that \\sqrt{x} is not considered to be equivalent to x^{\\frac{1}{2}} under this test. In many situations this notation is taken mean the same thing, but internally in Maxima they are represented by different functions and not converted to a canonical form by the test. Extra re-write rules could be added to achieve this, which would change the equivalence classes. By design, addition commutes with subtraction, so -1+2\\equiv 2-1 and multiplication commutes with division, so (ab)/c\\equiv a(b/c) . By design -1/4x \\neq -x/4 since we do not have the rule 1\\times x \\rightarrow x . To establish this equivalence we would need a different answer test. This test can also be used to establish \\{4,4\\} \\neq \\{4\\} , but \\{1,2\\} = \\{2,1\\} since the arguments of the set constructor function are commutative. Sets are not associative, so \\{1,2\\} \\neq \\{\\{1\\},2\\} . (See Maxima's flatten command.)","title":"EqualComAss: Equality up to Associativity and Commutativity"},{"location":"en/Authoring/Answer_tests/#casequal","text":"The CAS returns the result of the simple Maxima command if StudentAnswer=TeacherAnswer then true else false. There is no explicit simplification here (unlike AlgEquiv). This test always assumes simplification is off, i.e. simp:false , regardless of any question settings. If this is too strict, use ev(ex,simp) in the arguments to simplify them explicitly first. When simplification is off this test effectively tests whether the parse trees are identical. Please note, the behaviour of this test relies on the internal representation of expressions by Maxima, rather than an explicit mathematical property such as \"equivalence\". Explicit properties should be tested in preference to using this test!","title":"CasEqual"},{"location":"en/Authoring/Answer_tests/#substequiv","text":"Can we find a substitution of the variables of ex_2 into ex_1 which renders ex_1 algebraically equivalent to ex_2 ? Because we have to test every possibility, the algorithm is factorial in the number of variables. For this reason, the test only works for 4 or fewer variables. This test makes a substitution then uses AlgEquiv.","title":"SubstEquiv"},{"location":"en/Authoring/Answer_tests/#sysequiv","text":"The SysEquiv (system equivalence) test takes in two lists of polynomial equations in any number of variables and determines whether the two systems have the same set of solutions. This is done using the theory of Grobner bases to determine whether the ideals generated by the two systems are equal. As the test allows for polynomials in several variables, it can cope with the intersections of the conic sections, as well as a large number of geometrically interesting curves. This test does not check if the student actually \"fully solved\" the equations! E.g. [x^2=1] \\equiv [(x-1)\\cdot (x+1)=0] under this test. This test disregards whether simplification is switched on, it only simplifies its arguments where required. This allows the test to list equations in feedback that the student has erroneously included in their system. You can allow the student to include \"redundant assignments\". For example, if you have [90=v*t,90=(v+5)*(t-1/4)] but the student has [d=90,d=v*t,d=(v+5)*(t-1/4)]) then the systems are not equivalent, becuase the student has an extra variable. Use stack_eval_assignments to eliminate explicit assignments of the form var=num and evaluate the other expression in this context.","title":"SysEquiv"},{"location":"en/Authoring/Answer_tests/#sets","text":"This test deals with equality of sets. The algebraic equivalence functions give very minimal feedback. This test is designed to give much more detailed feedback on what is and is not included in the student's answer. Hence, this essentially tells the student what is missing. This is kind of feedback is tedious to generate without this test. The test simplifies both sets, and does a comparison based on the simplified versions. The comparison relies on ev(..., simp, nouns) to undertake the simplification. If you need stronger simplification (e.g. trig) then you will need to add this to the arguments of the function first.","title":"Sets"},{"location":"en/Authoring/Answer_tests/#equiv-and-equivfirstlast","text":"These answer tests are used with equivalence reasoning . See the separate documentation.","title":"Equiv and EquivFirstLast"},{"location":"en/Authoring/Answer_tests/#sregexp","text":"This test uses Maxima's regex_match function. Both arguments to the test must be Maxima strings. If you have a general expression, turn it into a string in the feedback variables with Maxima's string function. The first argument should be the string, and the second argument should be the pattern to match. Don't forget to escape within the pattern strings as needed. Note that there is a function string_to_regex() that will handle escaping of characters that would otherwise have meaning in the pattern. Also remember that you need to escape the backslashes like normal in Maxima-strings. One can read more about the patterns posible from here . Case-insensitivity may be something worth noting there. STACK also provides a helper function regex_match_exactp(regex, str) to check if the string equals the pattern matched by the regular expression. Regex String Result (aaa)*(b|d)c aaaaaabc true (aaa)*(b|d)c dc true (aaa)*(b|d)c aaaaaaabc false (aaa)*(b|d)c cca false Currently this is not provided as a separate answer test so you will need to use this predicate in the question variables and check the result against the expected value, or supply the predicate as an argument to an answer test.","title":"SRegExp"},{"location":"en/Authoring/Answer_tests/#Form","text":"Often, we wish to establish if the student's expression has the correct form . For example, consider the following various written forms of x^2-4x+4 . (x-2)(x-2),\\quad (x-2)^2,\\quad (2-x)^2,\\quad 4\\left(1-\\frac{x}{2}\\right)^2. Each of these might be considered to be factored. Establishing ex is factored is not the same as comparing it with factor(ex) Related tests establish that an expression is expanded or in partial fraction form. Expression Description LowestTerms This test checks that all numbers written in the first expression are in lowest terms and that the denominator is clear of surds and complex numbers. Notes * if you want to check whether a rational polynomial is written in lowest terms, this is not the test to use. Instead, apply the predicate functions lowesttermsp to the expression. * the second argument to this function is ignored, i.e. this test does not confirm algebraic equivalence. You might as well use 0 here. SingleFrac This test checks that SAns written as a \"single fraction\". See below. Expanded Confirms SAns is equal to expand(SAns) . Note, the second argument to this answer test is not used (but must be non-empty). Note with this test that an expression such as x^2-(a+b)x+ab is not considered to be expanded, and this test will return false. FacForm This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is \"factored\" over the rational numbers. See below for more details. The answer test expects the option to be the variable, which is needed to generate feedback. If the answer is incorrect, quite detailed feedback is provided. PartFrac This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is in \"partial fraction form\". The option must be the variable. CompletedSquare This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is in \"completed square form\". The option must be the variable.","title":"Form"},{"location":"en/Authoring/Answer_tests/#SingleFrac","text":"This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is written as a single fraction. Notes This test works at the top level, making sure the expression as a whole is a single fraction. if you also want this expression written in lowest terms, then this is quite a separate test. You need to first confirm you have a single fraction then add a new potential response. One way is to use the ../CAS/Predicate functions lowesttermsp(ex) and compare the result with true with the AlgEquiv test. The algebraic equivalence check is for convenience. If you only want to check an expression is a single fraction make SAns=TAns , i.e. ATSingleFrac(ex,ex) will do.","title":"Single fractions"},{"location":"en/Authoring/Answer_tests/#FacPoly","text":"An expression is said to be factored if it is written as a product of powers of distinct irreducible factors. Strictly speaking, in establishing that an expression is in factored form, we might not even care whether the terms in the product are fully simplified, as long as they are irreducible. Irreducibility on the other hand means we can't find further factors, but here we need some care. Consider x^8+16x^4+48 . Any non-trivial factorization, e.g. (x^4+4)(x^4+12) . A factorization into irreducible factors over the integers/rational numbers, i.e. (x^2+2x+x)(x^2-2x+2)(x^4+12) . A factorization into terms irreducible over the reals, i.e. (x^2+2x+x)(x^2-2x+2)(x^2+2\\sqrt[4]{3}x+2\\sqrt[4]{3})(x^2-2\\sqrt[4]{3}x+2\\sqrt[4]{3}) . A factorization into irreducible polynomials over the Gaussian integers, with i allowed, i.e. (x+1+i)(x+1-i)(x-1+i)(x-1-i)(x^4+12) . A factorization over the complex numbers, where the factor (x^4+12) would also be split into the four terms x\\pm\\sqrt[4]{3}(1\\pm i) . In elementary teaching, meaning 4. is unlikely to occur. Indeed, we might take this example to represent factoring over any extension field of the rational numbers. We normally seek to establish that the factors are irreducible over the integers (which is equivalent to irreducibility over the rational numbers) or the reals. But, unlike a canonical form, we are not particularly interested in the order of the terms in this product, or the order of summands inside these terms. The FacForm test establishes that the expression is factored over the rational numbers. If the coefficients of the polynomial are all real, at worst you will have quadratic irreducible terms. There are some delicate cases such as: (2-x)(3-x) vs (x-2)(x-3) and (1-x)^2 vs (x-1)^2 , which this test will cope with.","title":"Factorisation of polynomials"},{"location":"en/Authoring/Answer_tests/#factorisation-of-integers","text":"If you would like to ask a student to factor a polynomial, then do not use the FacForm answer test. The FacForm answer test is designed to use with polynomials. Instead, switch off simplification and define ta:factor(12); and use EqualComAss as the answer test. Note however that EqualComAss does not think that 2^2*3 and 2*2*3 are the same!","title":"Factorisation of integers"},{"location":"en/Authoring/Answer_tests/#Precision","text":"These tests deal with the precision of numbers. See dedicated page on numerical answer tests .","title":"Numerical Precision"},{"location":"en/Authoring/Answer_tests/#calculus","text":"","title":"Calculus"},{"location":"en/Authoring/Answer_tests/#diff","text":"This test is a general differentiation test: it is passed if the arguments are algebraically equivalent, but gives feedback if it looks like the student has integrated instead of differentiated. The first argument is the student's answer. The second argument is the model answer. The answer test option must be the variable with respect to which differentiation is assumed to take place.","title":"Diff"},{"location":"en/Authoring/Answer_tests/#Int","text":"This test is designed for a general indefinite integration question: it is passed if both the arguments are indefinite integrals of the same expression. The first argument is the student's answer. The second argument is the model answer. The answer test option needs to be the variable with respect to which integration is assumed to take place, or a list (see below). Getting this test to work in a general setting is a very difficult challenge. In particular, the test assumes that the constant of integration is expressed in a form similar to +c, although which variable used is not important. The issue of \\int \\frac{1}{x} dx = \\log(x)+c vs \\int \\frac{1}{x} dx = \\log(|x|)+c is a particular challenge. The test is currently defined in such a way that if the teacher uses \\log(|x|)+c in their answer, then they would expect the student to do so. If they don't use the absolute value function, then they don't expect students to but will accept this in an answer. It is, after all, not \"wrong\". However, in the case of partial fractions where there are more than one term of the form \\log(x-a) then we insist the student is at least consistent. If the teacher has any \\log(|x-a|) then the student must use |...| in all of them. If the teacher has no \\log(|x-a|) (i.e. just things like \\log(x-a) ) then the student must have all or none. The Int test has various additional options. The question author must supply these options in the form of a list [var, opt1, ...] . The first argument of this list must be the variable with respect to which integration is taking place. If one of the opt? is exactly the token NOCONST then the test will condone a lack of constant of integration. That is, if a student has missed off a constant of integration, or the answers differ by a numerical constant, then full marks will be awarded. Weird constants (e.g. +c^2 ) will still be flagged up. The answer test architecture only passes in the answer to the test. The question is not available at that point; however, the answer test has to infer exactly which expression, including the algebraic form, the teacher has set in the question. This includes stripping off constants of integration and constants of integration may occur in a number of ways, e.g. in logarithms. In many cases simply differentiating the teacher's answer is fine, in which case the question author need not worry. Where this does not work, the question author will need to supply the expression from the question in the right form as an option to the answer test. This is done simply by adding it to the list of options. [x, x*exp(5*x+7)] The test cannot cope with some situations. Please contact the developers when you find some of these. This test is already rather overloaded, so please don't expect every request to be accommodated!","title":"Int"},{"location":"en/Authoring/Answer_tests/#other","text":"The following tests do not use Maxima, but instead rely on PHP. Expression Description String This is a string match, ignoring leading and trailing white space which are stripped from all answers, using PHP's trim() function. StringSloppy This function first converts both inputs to lower case, then removes all white space from the string and finally performs a strict string comparison. (RegExp) NOTE: this test was removed in STACK version 4.3.","title":"Other"},{"location":"en/Authoring/Answer_tests/#scientific-units","text":"A dedicated answer test for scientific units is described on the units page.","title":"Scientific units"},{"location":"en/Authoring/Answer_tests/#developer","text":"Adding answer tests is possible, but is a developer task.","title":"Developer"},{"location":"en/Authoring/Answer_tests/#see-also","text":"Maxima","title":"See also"},{"location":"en/Authoring/Answer_tests_numerical/","text":"Numerical answer tests An answer test is used to compare two expressions to establish whether they satisfy some mathematical criteria. This page is dedicated to answer tests which establish numerical precision. Other tests are documented in a page on answer tests . Please also see the separate notes on numbers and scientific units . With other answer tests a question author can manipulate the student's answer with the CAS before applying an answer test. With these tests it is essential that the SAns field is exactly the name of the input. For example, if your input is ans1 then the SAns field of the answer test must only be ans1 . The reason for this is that Maxima changes the display of floating-point numbers to remove or add trailing zeros. These answer tests must take the value typed at the input, not the value passed through the CAS, otherwise digits will be changed. Further information and examples are given in the page on numbers . This problem does not apply to the teacher's answer because we do not test whether the teacher has supplied the correct number of trailing zeros. We only test if the student's answer is sufficiently close in numerical precision. So, it is safe to calculate the teacher's answer field of the answer test from question variables using the CAS. Care will be needed to display the correct number of significant figures with trailing zeros elsewhere in the question though. Introduction to numerical testing There are two issues of which a question author should be aware. Limits on numerical accuracy. Dealing with trailing zeros. All software have limitations on the extent to which they can robustly deal with numerical quantities. Maxima, PHP (and hence STACK) are no exceptions. Integers are essentially unproblematic, and CAS will support (almost) arbitrary precision integers. Floating-point representations of real numbers are more difficult, and a classic discussion of how to represent continuous quantities in finite state machine is given by D. Goldberg. What every computer scientist should know about floating-point arithmetic. Computing Surveys, 23(1):5-48, March 1991. Answer tests in STACK NumRelative & NumAbsolute The option to these tests is a tolerance. The default tolerance is 0.05. Relative: Tests whether abs(sa-ta) <= opt * abs(ta) Absolute: Tests whether abs(sa-ta) < opt NumRelative and NumAbsolute can also accept lists and sets. Elements are automatically converted to floats and simplified (i.e. ev(float(ex),simp) ) and are compared to the teacher's answer using the appropriate numerical test and accuracy. A uniform accuracy must be used. With lists the order is important, but with sets it is not. Checking whether two sets are approximately equal is an interesting mathematical problem.... GT & GTE \"Greater than\" or \"Greater than or equal to\". Both arguments are assumed to be numbers. The Answer test fully simplifies the SAns and converts this to a float if possible. This is needed to cope with expressions involving sums of surds, \\pi etc. Therefore, do expect some numerical rounding which may cause the test to fail in very sharp comparisons. Significant figure testing The significant figures of a number are digits that carry meaning. This includes all digits except leading zeros; trailing zeros when they are only placeholders to indicate the scale of the number. To establish the number of significant figures which arise from a calculation it is necessary to know the number of significant figures involved in the floating-point numbers used in the calculation. This causes a problem in assessment when we have a numerical expression, such as 100 , and seek to infer the number of significant figures. Does this have one significant figure or three? The following cases illustrate the difficulties in inferring the number of significant digits from only the written form of a number. 0.0010 has exactly 2 significant digits. 100 has at least 1 and maybe even 3 significant digits. 1.00e3 has exactly 3 significant digits. 10.0 has exactly 3 significant digits. 0 has 1 significant digit. 0.00 has at least 1 and maybe even 3 significant digits. 0.01 has exactly 1 significant digit. Therefore, with trailing zeros there are a number of cases in which it is not possible to tell from the written form of an expression precisely how many significant digits are present in a student's answer. This creates a problem for automatic assessment. To avoid this ambiguity some scientists adopt a convention where 100 has exactly one significant digit . To express one hundred to three significant digits it is necessary to use 1.00e2 . This conforms to the specifications in international standards and it certainly avoids ambiguity but in many assessment situations teachers do not want to enforce such strict rules. STACK seeks to provide tools for both situations: very strict enforcement of the significant figures rules (needed when teaching significant figures of course!) and a more liberal situation in which STACK will accept an input of 100 when the teacher wanted 1, 2 or 3 significant figures. In addition to the number of significant figures used to express the number, a teacher will also want to establish that the student actually has the right number! In more liberal situations a teacher will condone an error in the last place. E.g. they will accept an answer written to four significant figures, but where only three are actually correct. StrictSigFigs This test enforces the strict rules of significant figures. It does not check for numerical precision. This test is implemented in PHP (not using computer algebra) and looks only at surface features of the number representation. The option is the required number of significant figures. This must be an integer only. NumSigFigs This is a more liberal test. Primarily it checks numerical accuracy, but it also checks the number of significant figures in a liberal way. That is to say, it makes sure that the number of significant figures specified by the teacher lies within the range inferred from the student's answer. For example, this test will accept 100 as being correctly written to 1, 2 or 3 significant figures. If you want to enforce the precise rules use the StrictSigFigs test. Tests whether the student's answer contains opt significant figures, and whether the answer is accurate to opt significant figures. If the option is a list [n,m] then we check the answer has been written to n significant figures, with an accuracy of up to m places. If the answer is too far out then rounding feedback will not be given. A common test would be to ask for [n,n-1] to permit the student to enter the last digit incorrectly. If the options are of the form [n,0] then only the number of significant figures in sa will be checked. This ignores any numerical accuracy and completely ignores the second argument to the function. Note, that this test is liberal in establishing the number of significant figures. For strict enforcement of the rules, use StrictSigFigs instead. If the options are of the form [n,-1] then the test checks the student has at least n significant figures in the answer, and that numerical accuracy is correct. This test only supports numbers where |sa|<10^{22} . Please see the notes about numerical rounding for the differences between rounding. In NumSigFigs the teacher's answer will be rounded to the specified number of significant figures before a comparison is made. NumDecPlaces Tests (i) whether the student's answer is equivalent to the teacher's and (ii) is written to opt decimal places. The option, which must be a positive integer, dictates the number of digits following the decimal separator . . Note that trailing zeros are ''required'', i.e. to two decimal places you must write 12.30 not just 12.3 . The test rounds the numbers to the specified number of decimal places before trying to establish equivalence. NumDecPlacesWrong Tests if the student appears to have the decimal point in the wrong place. For example, 3.141 and 31.41 will be considered the same under this test. opt is the number of places to consider, from the most significant. This test condones any lack of trailing zeros. Use other tests to establish if a student has sufficient places. Other issues A teacher may wish to see if a student's answer is incorrect only by orders of magnitude. E.g. a student answers 110 instead of 1100 . To do this, a teacher can check whether \\log_{10} of the ratio of two expressions is an integer, e.g. integerp(rat(float(log(sa/ta)/log(10)))) There is currently no functionality within the numerical answer tests to automatically check this, and there is no dedicated answer test to establish this property. A separate PRT node is needed. See also Answer tests CAS and numbers Scientific units Maxima","title":"Numerical answer tests"},{"location":"en/Authoring/Answer_tests_numerical/#numerical-answer-tests","text":"An answer test is used to compare two expressions to establish whether they satisfy some mathematical criteria. This page is dedicated to answer tests which establish numerical precision. Other tests are documented in a page on answer tests . Please also see the separate notes on numbers and scientific units . With other answer tests a question author can manipulate the student's answer with the CAS before applying an answer test. With these tests it is essential that the SAns field is exactly the name of the input. For example, if your input is ans1 then the SAns field of the answer test must only be ans1 . The reason for this is that Maxima changes the display of floating-point numbers to remove or add trailing zeros. These answer tests must take the value typed at the input, not the value passed through the CAS, otherwise digits will be changed. Further information and examples are given in the page on numbers . This problem does not apply to the teacher's answer because we do not test whether the teacher has supplied the correct number of trailing zeros. We only test if the student's answer is sufficiently close in numerical precision. So, it is safe to calculate the teacher's answer field of the answer test from question variables using the CAS. Care will be needed to display the correct number of significant figures with trailing zeros elsewhere in the question though.","title":"Numerical answer tests"},{"location":"en/Authoring/Answer_tests_numerical/#introduction-to-numerical-testing","text":"There are two issues of which a question author should be aware. Limits on numerical accuracy. Dealing with trailing zeros. All software have limitations on the extent to which they can robustly deal with numerical quantities. Maxima, PHP (and hence STACK) are no exceptions. Integers are essentially unproblematic, and CAS will support (almost) arbitrary precision integers. Floating-point representations of real numbers are more difficult, and a classic discussion of how to represent continuous quantities in finite state machine is given by D. Goldberg. What every computer scientist should know about floating-point arithmetic. Computing Surveys, 23(1):5-48, March 1991.","title":"Introduction to numerical testing"},{"location":"en/Authoring/Answer_tests_numerical/#answer-tests-in-stack","text":"","title":"Answer tests in STACK"},{"location":"en/Authoring/Answer_tests_numerical/#numrelative-numabsolute","text":"The option to these tests is a tolerance. The default tolerance is 0.05. Relative: Tests whether abs(sa-ta) <= opt * abs(ta) Absolute: Tests whether abs(sa-ta) < opt NumRelative and NumAbsolute can also accept lists and sets. Elements are automatically converted to floats and simplified (i.e. ev(float(ex),simp) ) and are compared to the teacher's answer using the appropriate numerical test and accuracy. A uniform accuracy must be used. With lists the order is important, but with sets it is not. Checking whether two sets are approximately equal is an interesting mathematical problem....","title":"NumRelative &amp; NumAbsolute"},{"location":"en/Authoring/Answer_tests_numerical/#gt-gte","text":"\"Greater than\" or \"Greater than or equal to\". Both arguments are assumed to be numbers. The Answer test fully simplifies the SAns and converts this to a float if possible. This is needed to cope with expressions involving sums of surds, \\pi etc. Therefore, do expect some numerical rounding which may cause the test to fail in very sharp comparisons.","title":"GT &amp; GTE"},{"location":"en/Authoring/Answer_tests_numerical/#significant-figure-testing","text":"The significant figures of a number are digits that carry meaning. This includes all digits except leading zeros; trailing zeros when they are only placeholders to indicate the scale of the number. To establish the number of significant figures which arise from a calculation it is necessary to know the number of significant figures involved in the floating-point numbers used in the calculation. This causes a problem in assessment when we have a numerical expression, such as 100 , and seek to infer the number of significant figures. Does this have one significant figure or three? The following cases illustrate the difficulties in inferring the number of significant digits from only the written form of a number. 0.0010 has exactly 2 significant digits. 100 has at least 1 and maybe even 3 significant digits. 1.00e3 has exactly 3 significant digits. 10.0 has exactly 3 significant digits. 0 has 1 significant digit. 0.00 has at least 1 and maybe even 3 significant digits. 0.01 has exactly 1 significant digit. Therefore, with trailing zeros there are a number of cases in which it is not possible to tell from the written form of an expression precisely how many significant digits are present in a student's answer. This creates a problem for automatic assessment. To avoid this ambiguity some scientists adopt a convention where 100 has exactly one significant digit . To express one hundred to three significant digits it is necessary to use 1.00e2 . This conforms to the specifications in international standards and it certainly avoids ambiguity but in many assessment situations teachers do not want to enforce such strict rules. STACK seeks to provide tools for both situations: very strict enforcement of the significant figures rules (needed when teaching significant figures of course!) and a more liberal situation in which STACK will accept an input of 100 when the teacher wanted 1, 2 or 3 significant figures. In addition to the number of significant figures used to express the number, a teacher will also want to establish that the student actually has the right number! In more liberal situations a teacher will condone an error in the last place. E.g. they will accept an answer written to four significant figures, but where only three are actually correct.","title":"Significant figure testing"},{"location":"en/Authoring/Answer_tests_numerical/#strictsigfigs","text":"This test enforces the strict rules of significant figures. It does not check for numerical precision. This test is implemented in PHP (not using computer algebra) and looks only at surface features of the number representation. The option is the required number of significant figures. This must be an integer only.","title":"StrictSigFigs"},{"location":"en/Authoring/Answer_tests_numerical/#numsigfigs","text":"This is a more liberal test. Primarily it checks numerical accuracy, but it also checks the number of significant figures in a liberal way. That is to say, it makes sure that the number of significant figures specified by the teacher lies within the range inferred from the student's answer. For example, this test will accept 100 as being correctly written to 1, 2 or 3 significant figures. If you want to enforce the precise rules use the StrictSigFigs test. Tests whether the student's answer contains opt significant figures, and whether the answer is accurate to opt significant figures. If the option is a list [n,m] then we check the answer has been written to n significant figures, with an accuracy of up to m places. If the answer is too far out then rounding feedback will not be given. A common test would be to ask for [n,n-1] to permit the student to enter the last digit incorrectly. If the options are of the form [n,0] then only the number of significant figures in sa will be checked. This ignores any numerical accuracy and completely ignores the second argument to the function. Note, that this test is liberal in establishing the number of significant figures. For strict enforcement of the rules, use StrictSigFigs instead. If the options are of the form [n,-1] then the test checks the student has at least n significant figures in the answer, and that numerical accuracy is correct. This test only supports numbers where |sa|<10^{22} . Please see the notes about numerical rounding for the differences between rounding. In NumSigFigs the teacher's answer will be rounded to the specified number of significant figures before a comparison is made.","title":"NumSigFigs"},{"location":"en/Authoring/Answer_tests_numerical/#numdecplaces","text":"Tests (i) whether the student's answer is equivalent to the teacher's and (ii) is written to opt decimal places. The option, which must be a positive integer, dictates the number of digits following the decimal separator . . Note that trailing zeros are ''required'', i.e. to two decimal places you must write 12.30 not just 12.3 . The test rounds the numbers to the specified number of decimal places before trying to establish equivalence.","title":"NumDecPlaces"},{"location":"en/Authoring/Answer_tests_numerical/#numdecplaceswrong","text":"Tests if the student appears to have the decimal point in the wrong place. For example, 3.141 and 31.41 will be considered the same under this test. opt is the number of places to consider, from the most significant. This test condones any lack of trailing zeros. Use other tests to establish if a student has sufficient places.","title":"NumDecPlacesWrong"},{"location":"en/Authoring/Answer_tests_numerical/#other-issues","text":"A teacher may wish to see if a student's answer is incorrect only by orders of magnitude. E.g. a student answers 110 instead of 1100 . To do this, a teacher can check whether \\log_{10} of the ratio of two expressions is an integer, e.g. integerp(rat(float(log(sa/ta)/log(10)))) There is currently no functionality within the numerical answer tests to automatically check this, and there is no dedicated answer test to establish this property. A separate PRT node is needed.","title":"Other issues"},{"location":"en/Authoring/Answer_tests_numerical/#see-also","text":"Answer tests CAS and numbers Scientific units Maxima","title":"See also"},{"location":"en/Authoring/Author_FAQ/","text":"Author FAQ How can I improve the documentation? Please either edit the docs on github, or send us a pull request. Your contributions are very welcome. How can I report a bug or make a suggestion? Please read this page first! Contributions are very welcome. Please see the community page for more specific details. Can I write questions in multiple languages? Yes, see support for multiple languages . What is LaTeX? Where can I get help learning LaTeX? LaTeX is a document preparation system. For STACK questions we only need some simple LaTeX, so please do not be put off. In particular STACK only really makes use of LaTeX for mathematical markup, and does not use the document structure tags. An introduction for those totally new to LaTeX is found here . The mathematics environment is described here . Details about LaTeX are available from http://www.latex-project.org/guides/ . Note that some of the more complex examples will not work on STACK. Just keep things simple. Can I add HTML to CAS-enabled text? Yes. You can use HTML tags as usual. For example, you can use these tags to insert references to images etc. It's even possible to embed question values within image tags to allow calls to third-party dynamic graph generators. The Simple Venn sample question demonstrates using the Google charts API: Why does a Maxima function not work in STACK? Not all Maxima functions are enabled by STACK, for obvious security reasons. It may be that your function belongs to a library which STACK does not load by default. Do you need to use Maxima's load command to use it? If so, you will need to ask your system administrator or the developers to add a load command so that this library becomes available. Some libraries are optional and may not be included by your local installation. You should also be aware that there are also a number of functions defined by STACK which are not standard Maxima functions. The command you need may well not be enabled since you should use one STACK provides instead. How can I change which Maxima functions STACK allows? This is a job for a developer. Please contact us. How can I use subscripts in STACK Note that normally a maxima atom theta2 is displayed by Maxima as {\\it theta_2} . This is problematic as the Greek letter is not rendered as LaTeX \\theta , and the subscript is in italic which is wrong. Maxima \"atoms\" with a subscript will be displayed using subscripts. For example theta_2 will be displayed as \\theta_2 . Both teachers and students can use this mechanism. However, this relies on the expression being a Maxima atom. (See the maxima manual). Teachers can create an inert function which displays using subscripts. texsub(a,b) is typeset as {a}_{b} i.e. {a}_{b} in LaTeX. This enables subscripts to be displayed with non-atomic things like texsub(F,1-2) with simplification off will be displayed as {F}_{1-2} . The complex expression in the subscript cannot form an atomic Maxima expression. Note however there is a subtle (and perhaps confusing) difference in the display between the Maxima atoms a1 and a_1 in STACK. The atom a1 will follow the Maxima default and generate the LaTeX {\\it a_1} and so the numeral 1 will be in italic, which some people consider incorrect. The atom a_1 will use the texsub function as an intermediate and generate the LaTeX {a}_{1} and so the normal LaTeX rules will render the numeral 1 in Roman, which is correct. Note that the process of converting theta_07 into the intermediate texsub form internally results in the texsub(theta,7) which removes the leading zero. This is a known issue, for which a workaround is to directly use texsub(theta,\"07\") . This does not produce optimal LaTeX. How can I test out STACK specific functions in a Maxima session? Details of how to load STACK functions into a command line Maxima session are given in the STACK-Maxima sandbox . How can I confirm my student's answer is fully simplified? The philosophy of STACK is to establish properties of the student's answer. \"Simplify\" is an ambiguous notion. For example, 1 is simpler than 2^0 but 2^{2^{10}} is probably simpler than writing the integer it represents in decimals. Everyone would agree that x+2 is simpler than \\frac{x^2-4}{x-2} , but we might argue that the first expression below is simpler. \\frac{x^{12}-1}{x-1} = x^{11}+x^{10}+x^9+x^8+x^7+x^6+x^5+x^4+x^3+x^2+x+1. Simplify is often taken implicitly to mean \"the shortest equivalent expression\", but this issue is often not discussed. To avoid these problems, STACK expects teachers to specify the properties they want. For example, if you want the factored form you should test for this, not describe it as \"simplified\". In STACK a very useful test is equivalence up to associativity and commutativity of the basic arithmetic operations of addition and multiplication. This is often what teachers need in this case. Why doesn't Maxima give int(1/x,x)=log(abs(x)) ? Because \\int \\frac{1}{x}dx = \\log(|x|) is OK on either the negative or positive real axis, but it is not OK in the complex plane. There is a switch that controls this, however. (%i199) integrate(1/x,x); (%o199) log(x) (%i200) integrate(1/x,x), logabs : true; (%o200) log(abs(x)) Why don't I get anything back from the CAS? Debugging questions can be difficult. We have not written a full parser, so we cannot trap all the errors. If all else fails, you may need to examine exactly the expression which is being sent to Maxima. To do this go to Site administration -> Plugins -> Question types -> STACK Ensure that CAS debugging is checked. Then, you should get error reporting. As an example navigate to Site administration -> Plugins -> Question types -> STACK -> Healthcheck There you can see an example of an expression sent to Maxima. Namely: cab:block([ RANDOM_SEED, OPT_NoFloats, sqrtdispflag, simp, assume_pos, caschat0, caschat1], stack_randseed(0), make_multsgn(dot), make_complexJ(i), OPT_NoFloats:true, sqrtdispflag:true, simp:true, assume_pos:false, print(\"[STACKSTART Locals= [ \") , print(\"0=[ error= [\"), cte(\"caschat0\",errcatch(caschat0:plot([x^4/(1+x^4),diff(x^4/(1+x^4),x)],[x,-3,3]))) , print(\"1=[ error= [\"), cte(\"caschat1\",errcatch(caschat1:plot([sin(x),x,x^2,x^3],[x,-3,3],[y,-3,3]))) , print(\"] ]\") , return(true) ); Expressions such as this can be copied into the STACK-Maxima sandbox and evaluated. The errors returned here might help track down the problem. The issue is normally that you have tried to create a syntactically invalid maxima command. For example [a,,b] will crash Maxima. Since we have not created a full parser, all syntax errors like this are not yet trapped.","title":"Author FAQ"},{"location":"en/Authoring/Author_FAQ/#author-faq","text":"","title":"Author FAQ"},{"location":"en/Authoring/Author_FAQ/#how-can-i-improve-the-documentation","text":"Please either edit the docs on github, or send us a pull request. Your contributions are very welcome.","title":"How can I improve the documentation?"},{"location":"en/Authoring/Author_FAQ/#how-can-i-report-a-bug-or-make-a-suggestion","text":"Please read this page first! Contributions are very welcome. Please see the community page for more specific details.","title":"How can I report a bug or make a suggestion?"},{"location":"en/Authoring/Author_FAQ/#can-i-write-questions-in-multiple-languages","text":"Yes, see support for multiple languages .","title":"Can I write questions in multiple languages?"},{"location":"en/Authoring/Author_FAQ/#what-is-latex-where-can-i-get-help-learning-latex","text":"LaTeX is a document preparation system. For STACK questions we only need some simple LaTeX, so please do not be put off. In particular STACK only really makes use of LaTeX for mathematical markup, and does not use the document structure tags. An introduction for those totally new to LaTeX is found here . The mathematics environment is described here . Details about LaTeX are available from http://www.latex-project.org/guides/ . Note that some of the more complex examples will not work on STACK. Just keep things simple.","title":"What is LaTeX? Where can I get help learning LaTeX?"},{"location":"en/Authoring/Author_FAQ/#can-i-add-html-to-cas-enabled-text","text":"Yes. You can use HTML tags as usual. For example, you can use these tags to insert references to images etc. It's even possible to embed question values within image tags to allow calls to third-party dynamic graph generators. The Simple Venn sample question demonstrates using the Google charts API:","title":"Can I add HTML to CAS-enabled text?"},{"location":"en/Authoring/Author_FAQ/#why-does-a-maxima-function-not-work-in-stack","text":"Not all Maxima functions are enabled by STACK, for obvious security reasons. It may be that your function belongs to a library which STACK does not load by default. Do you need to use Maxima's load command to use it? If so, you will need to ask your system administrator or the developers to add a load command so that this library becomes available. Some libraries are optional and may not be included by your local installation. You should also be aware that there are also a number of functions defined by STACK which are not standard Maxima functions. The command you need may well not be enabled since you should use one STACK provides instead.","title":"Why does a Maxima function not work in STACK?"},{"location":"en/Authoring/Author_FAQ/#how-can-i-change-which-maxima-functions-stack-allows","text":"This is a job for a developer. Please contact us.","title":"How can I change which Maxima functions STACK allows?"},{"location":"en/Authoring/Author_FAQ/#how-can-i-use-subscripts-in-stack","text":"Note that normally a maxima atom theta2 is displayed by Maxima as {\\it theta_2} . This is problematic as the Greek letter is not rendered as LaTeX \\theta , and the subscript is in italic which is wrong. Maxima \"atoms\" with a subscript will be displayed using subscripts. For example theta_2 will be displayed as \\theta_2 . Both teachers and students can use this mechanism. However, this relies on the expression being a Maxima atom. (See the maxima manual). Teachers can create an inert function which displays using subscripts. texsub(a,b) is typeset as {a}_{b} i.e. {a}_{b} in LaTeX. This enables subscripts to be displayed with non-atomic things like texsub(F,1-2) with simplification off will be displayed as {F}_{1-2} . The complex expression in the subscript cannot form an atomic Maxima expression. Note however there is a subtle (and perhaps confusing) difference in the display between the Maxima atoms a1 and a_1 in STACK. The atom a1 will follow the Maxima default and generate the LaTeX {\\it a_1} and so the numeral 1 will be in italic, which some people consider incorrect. The atom a_1 will use the texsub function as an intermediate and generate the LaTeX {a}_{1} and so the normal LaTeX rules will render the numeral 1 in Roman, which is correct. Note that the process of converting theta_07 into the intermediate texsub form internally results in the texsub(theta,7) which removes the leading zero. This is a known issue, for which a workaround is to directly use texsub(theta,\"07\") . This does not produce optimal LaTeX.","title":"How can I use subscripts in STACK"},{"location":"en/Authoring/Author_FAQ/#how-can-i-test-out-stack-specific-functions-in-a-maxima-session","text":"Details of how to load STACK functions into a command line Maxima session are given in the STACK-Maxima sandbox .","title":"How can I test out STACK specific functions in a Maxima session?"},{"location":"en/Authoring/Author_FAQ/#how-can-i-confirm-my-students-answer-is-fully-simplified","text":"The philosophy of STACK is to establish properties of the student's answer. \"Simplify\" is an ambiguous notion. For example, 1 is simpler than 2^0 but 2^{2^{10}} is probably simpler than writing the integer it represents in decimals. Everyone would agree that x+2 is simpler than \\frac{x^2-4}{x-2} , but we might argue that the first expression below is simpler. \\frac{x^{12}-1}{x-1} = x^{11}+x^{10}+x^9+x^8+x^7+x^6+x^5+x^4+x^3+x^2+x+1. Simplify is often taken implicitly to mean \"the shortest equivalent expression\", but this issue is often not discussed. To avoid these problems, STACK expects teachers to specify the properties they want. For example, if you want the factored form you should test for this, not describe it as \"simplified\". In STACK a very useful test is equivalence up to associativity and commutativity of the basic arithmetic operations of addition and multiplication. This is often what teachers need in this case.","title":"How can I confirm my student's answer is fully simplified?"},{"location":"en/Authoring/Author_FAQ/#why-doesnt-maxima-give-int1xxlogabsx","text":"Because \\int \\frac{1}{x}dx = \\log(|x|) is OK on either the negative or positive real axis, but it is not OK in the complex plane. There is a switch that controls this, however. (%i199) integrate(1/x,x); (%o199) log(x) (%i200) integrate(1/x,x), logabs : true; (%o200) log(abs(x))","title":"Why doesn't Maxima give int(1/x,x)=log(abs(x))?"},{"location":"en/Authoring/Author_FAQ/#why-dont-i-get-anything-back-from-the-cas","text":"Debugging questions can be difficult. We have not written a full parser, so we cannot trap all the errors. If all else fails, you may need to examine exactly the expression which is being sent to Maxima. To do this go to Site administration -> Plugins -> Question types -> STACK Ensure that CAS debugging is checked. Then, you should get error reporting. As an example navigate to Site administration -> Plugins -> Question types -> STACK -> Healthcheck There you can see an example of an expression sent to Maxima. Namely: cab:block([ RANDOM_SEED, OPT_NoFloats, sqrtdispflag, simp, assume_pos, caschat0, caschat1], stack_randseed(0), make_multsgn(dot), make_complexJ(i), OPT_NoFloats:true, sqrtdispflag:true, simp:true, assume_pos:false, print(\"[STACKSTART Locals= [ \") , print(\"0=[ error= [\"), cte(\"caschat0\",errcatch(caschat0:plot([x^4/(1+x^4),diff(x^4/(1+x^4),x)],[x,-3,3]))) , print(\"1=[ error= [\"), cte(\"caschat1\",errcatch(caschat1:plot([sin(x),x,x^2,x^3],[x,-3,3],[y,-3,3]))) , print(\"] ]\") , return(true) ); Expressions such as this can be copied into the STACK-Maxima sandbox and evaluated. The errors returned here might help track down the problem. The issue is normally that you have tried to create a syntactically invalid maxima command. For example [a,,b] will crash Maxima. Since we have not created a full parser, all syntax errors like this are not yet trapped.","title":"Why don't I get anything back from the CAS?"},{"location":"en/Authoring/Authoring_quick_start/","text":"Authoring quick start 1: a minimal working question 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes The authoring quick start guide shows you how to write STACK questions. Part 1 gets a minimal question working. The following video explains the process: Before you begin We assume the following: You have access to a course with STACK installed. You are familiar with simple \\LaTeX formatting for mathematics. Some basic examples are provided in the CASText#Useful_LaTeX documentation. Creating a minimal STACK question Go to your Course, navigate to the question bank and create a new question with the \"STACK\" question type. There are lots of fields, but only a few are compulsory: The \"question name\", The \"question text\", which is shown to the student, The teacher's \"model answer\" (inside \"Input: ans1\" on a default question), A test of \"correctness\". By default a new question automatically has one input , and one algorithm to test correctness of the answer. Question name You must give the question a name, for example question1 . Question text Let's focus on the problem of differentiating (x-1)^3 with respect to x . We need to write the question text itself. Copy the following into the Question text box: Differentiate \\((x-1)^3\\) with respect to x. [[input:ans1]] [[validation:ans1]] Notes: Moodle has a wide choice for text editors, so the screenshots in this quick start guide might look slightly different to your variant of Moodle. Also, the cut and paste may or may not include some of the formatting. The text contains LaTeX mathematics environments. Do not use mathematics environments $..$ and $$..$$ . Instead you must use \\(..\\) and \\[..\\] for inline and displayed mathematics respectively. (There is an automatic bulk converter if you have a lot of legacy materials.) Internally the student's answer will be assigned to a variable ans1 . The tag [[input:ans1]] denotes the position of the box into which the student puts their answer. The tag [[validation:ans1]] will be replaced by any feedback related to the validity of the input ans1 , e.g. syntax errors caused by missing brackets. These tags could be positioned anywhere in the question text. Input: ans1 Scroll down: there will be an inputs section of the editing form. Click on the header Input: ans1 to reveal the relevant settings. For a minimal question, we must specify the model answer . Let this be 3*(x-1)^2 Notes The student's response is stored in the answer variable ans1 . The model answer must be a syntactically valid expression in CAS (Maxima) syntax, not LaTeX. This means multiplication must be explicitly specified, using * . Inputs can have a variety of types selected by the Input type drop-down menu. The Algebraic input is the default, and what we need here. A question can have many inputs for multiple parts. These are discussed later in a later part. Assessing correctness of a response - the Potential Response Tree (PRT) Next we have to decide if the student's answer is correct. To grade the student's response, we need to determine its mathematical properties using an algorithm known as a potential response tree . By default, a new question contains one potential response tree called prt1 . Feedback generated by the tree replaces the tag [[feedback:prt1]] at the appropriate time. Configuring a potential response node A potential response tree is a non-empty acyclic directed graph of potential response nodes . By default, we have one potential response node. At each node SAns is compared to TAns with the answer test, possibly with an option, If true , then we execute the true branch, If false , then we execute the false branch. Each branch can then Assign/update the score, Assign formative feedback to the student, Leave an answer note for statistical reporting purposes, Continue to the next potential response node, or end the process with [stop] . Let us configure the first node to determine if the student has differentiated correctly. Specify the variable ans1 in the SAns setting. Specify the correct answer in the TAns setting: 3*(x-1)^2 . Confirm we have AlgEquiv in the Answer test drop-down menu (this is the default). Saving the question Now scroll to the bottom of the page and press [Save changes and continue editing] . If the question fails to save, check carefully for any errors, correct them and save again. We now have a minimal question. To recap, we have The \"question name\", The \"question text\", The teacher's \"model answer\", A test of \"correctness\". Next we should try out our question by pressing the Preview link at the bottom of the page. Previewing the question To speed up the testing process, scroll down on the preview window and under Attempt options make sure you have \"How questions behave\" set to \"Adaptive Mode\". If necessary, \"Start again with these options\". This will allow you to check your answers without having to Submit and Start again repeatedly. With the preview open, try typing 3*(x-1)^2 in the answer box. The system first establishes the syntactical validity of this answer. Press the [Check] button. The system executes the potential response tree and establishes whether your answer is equivalent to the model answer 3*(x-1)^2 . Student validation Notice that there is a two-step process for the student to enter their answer. First is \"validation\", and normally servers have \"instant validation\" enabled. If the expression is valid, STACK shows the student \"Your last answer was interpreted as follows:\" and displays their expression. An invalid response creates an error message. The second stage executes when a valid expression is entered, and this evaluates the potential response tree to assess the student's answer. This two-stage process is a unique and essential feature of STACK. There are lots of options for validation to help the student. For example, in the above, all example expressions have strict syntax. Here we used expressions like 3*(x-1)^2 , with * symbols to denote multiplication. You could choose to let students type in expressions like 3(x-1)^2 and accept implied multiplication. Note, however, that teacher input will always have to be strict to avoid ambiguity. Documentation on these options is given in the inputs section. Next step You should now be able to write a simple question in STACK. The next part of the authoring quick start guide looks at using question variables .","title":"Authoring quick start 1: a minimal working question"},{"location":"en/Authoring/Authoring_quick_start/#authoring-quick-start-1-a-minimal-working-question","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes The authoring quick start guide shows you how to write STACK questions. Part 1 gets a minimal question working. The following video explains the process:","title":"Authoring quick start 1: a minimal working question"},{"location":"en/Authoring/Authoring_quick_start/#before-you-begin","text":"We assume the following: You have access to a course with STACK installed. You are familiar with simple \\LaTeX formatting for mathematics. Some basic examples are provided in the CASText#Useful_LaTeX documentation.","title":"Before you begin"},{"location":"en/Authoring/Authoring_quick_start/#creating-a-minimal-stack-question","text":"Go to your Course, navigate to the question bank and create a new question with the \"STACK\" question type. There are lots of fields, but only a few are compulsory: The \"question name\", The \"question text\", which is shown to the student, The teacher's \"model answer\" (inside \"Input: ans1\" on a default question), A test of \"correctness\". By default a new question automatically has one input , and one algorithm to test correctness of the answer.","title":"Creating a minimal STACK question"},{"location":"en/Authoring/Authoring_quick_start/#question-name","text":"You must give the question a name, for example question1 .","title":"Question name"},{"location":"en/Authoring/Authoring_quick_start/#question-text","text":"Let's focus on the problem of differentiating (x-1)^3 with respect to x . We need to write the question text itself. Copy the following into the Question text box: Differentiate \\((x-1)^3\\) with respect to x. [[input:ans1]] [[validation:ans1]] Notes: Moodle has a wide choice for text editors, so the screenshots in this quick start guide might look slightly different to your variant of Moodle. Also, the cut and paste may or may not include some of the formatting. The text contains LaTeX mathematics environments. Do not use mathematics environments $..$ and $$..$$ . Instead you must use \\(..\\) and \\[..\\] for inline and displayed mathematics respectively. (There is an automatic bulk converter if you have a lot of legacy materials.) Internally the student's answer will be assigned to a variable ans1 . The tag [[input:ans1]] denotes the position of the box into which the student puts their answer. The tag [[validation:ans1]] will be replaced by any feedback related to the validity of the input ans1 , e.g. syntax errors caused by missing brackets. These tags could be positioned anywhere in the question text.","title":"Question text"},{"location":"en/Authoring/Authoring_quick_start/#input-ans1","text":"Scroll down: there will be an inputs section of the editing form. Click on the header Input: ans1 to reveal the relevant settings. For a minimal question, we must specify the model answer . Let this be 3*(x-1)^2 Notes The student's response is stored in the answer variable ans1 . The model answer must be a syntactically valid expression in CAS (Maxima) syntax, not LaTeX. This means multiplication must be explicitly specified, using * . Inputs can have a variety of types selected by the Input type drop-down menu. The Algebraic input is the default, and what we need here. A question can have many inputs for multiple parts. These are discussed later in a later part.","title":"Input: ans1"},{"location":"en/Authoring/Authoring_quick_start/#assessing-correctness-of-a-response-the-potential-response-tree-prt","text":"Next we have to decide if the student's answer is correct. To grade the student's response, we need to determine its mathematical properties using an algorithm known as a potential response tree . By default, a new question contains one potential response tree called prt1 . Feedback generated by the tree replaces the tag [[feedback:prt1]] at the appropriate time.","title":"Assessing correctness of a response - the Potential Response Tree (PRT)"},{"location":"en/Authoring/Authoring_quick_start/#configuring-a-potential-response-node","text":"A potential response tree is a non-empty acyclic directed graph of potential response nodes . By default, we have one potential response node. At each node SAns is compared to TAns with the answer test, possibly with an option, If true , then we execute the true branch, If false , then we execute the false branch. Each branch can then Assign/update the score, Assign formative feedback to the student, Leave an answer note for statistical reporting purposes, Continue to the next potential response node, or end the process with [stop] . Let us configure the first node to determine if the student has differentiated correctly. Specify the variable ans1 in the SAns setting. Specify the correct answer in the TAns setting: 3*(x-1)^2 . Confirm we have AlgEquiv in the Answer test drop-down menu (this is the default).","title":"Configuring a potential response node"},{"location":"en/Authoring/Authoring_quick_start/#saving-the-question","text":"Now scroll to the bottom of the page and press [Save changes and continue editing] . If the question fails to save, check carefully for any errors, correct them and save again. We now have a minimal question. To recap, we have The \"question name\", The \"question text\", The teacher's \"model answer\", A test of \"correctness\". Next we should try out our question by pressing the Preview link at the bottom of the page.","title":"Saving the question"},{"location":"en/Authoring/Authoring_quick_start/#previewing-the-question","text":"To speed up the testing process, scroll down on the preview window and under Attempt options make sure you have \"How questions behave\" set to \"Adaptive Mode\". If necessary, \"Start again with these options\". This will allow you to check your answers without having to Submit and Start again repeatedly. With the preview open, try typing 3*(x-1)^2 in the answer box. The system first establishes the syntactical validity of this answer. Press the [Check] button. The system executes the potential response tree and establishes whether your answer is equivalent to the model answer 3*(x-1)^2 .","title":"Previewing the question"},{"location":"en/Authoring/Authoring_quick_start/#student-validation","text":"Notice that there is a two-step process for the student to enter their answer. First is \"validation\", and normally servers have \"instant validation\" enabled. If the expression is valid, STACK shows the student \"Your last answer was interpreted as follows:\" and displays their expression. An invalid response creates an error message. The second stage executes when a valid expression is entered, and this evaluates the potential response tree to assess the student's answer. This two-stage process is a unique and essential feature of STACK. There are lots of options for validation to help the student. For example, in the above, all example expressions have strict syntax. Here we used expressions like 3*(x-1)^2 , with * symbols to denote multiplication. You could choose to let students type in expressions like 3(x-1)^2 and accept implied multiplication. Note, however, that teacher input will always have to be strict to avoid ambiguity. Documentation on these options is given in the inputs section.","title":"Student validation"},{"location":"en/Authoring/Authoring_quick_start/#next-step","text":"You should now be able to write a simple question in STACK.","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start/#the-next-part-of-the-authoring-quick-start-guide-looks-at-using-question-variables","text":"","title":"The next part of the authoring quick start guide looks at using question variables."},{"location":"en/Authoring/Authoring_quick_start_2/","text":"Authoring quick start 2: question variables 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with using question variables. The following video explains the process: Example question For this example, we will be working with a simple integration problem. Below is a typical set of practice exercises. (Reproduced with permission from Advanced Mathematics for AS and A level 2 (A-level mathematics), Haese Mathematics (2018) 978-1-925489-32-3 ) Let us focus on the problem of finding \\int 3(x-1)^{-4} \\mathrm{d}x . Create a new STACK question. As before, we will give our question a Question name , say \"Integration Example\". Using question variables The next steps would be to add question text, and then to add the teacher's answer -1*(x-1)^(-3)+c to the model answer field and the potential response tree . However, the expression and model answer will normally be referred to more than once, so it is usually easiest to assign them to \"question variables\" using the optional question variables field. Add the following to the question variables exp: 3*(x-1)^(-4); ta: int(exp,x)+c; The coding in question variables is based on Maxima, which has an unusual syntax for assignment. In particular, the colon : is used to assign a value to a variable. So to assign the value of 5 to a1 , we use the syntax a1:5 . In general, it is good practice to give variables multi-character names, as single-character names are meant for student input. This is because multi-character variables the author defined cannot by default be input by students. Additionally, adding semicolons to the end of each line is optional, but good practice. Notice we are using the CAS to determine the model answer by calling the int() function to find the anti-derivative. When the CAS determines an anti-derivative, it does not include a constant of integration, so we have to add it ourselves. Now it will be a lot faster to fill out the rest of the question. Add the following to the question text: Find \\(\\int{@exp@} \\mathrm{d}x\\) [[input:ans1]] [[validation:ans1]] Notice that we have defined a local variable exp , and used the value of this in the Question text. There is a difference between mathematics enclosed between \\(..\\) symbols and {@..@} symbols. All the text-based fields in the question, including feedback, are CAS text . This is HTML into which mathematics can be inserted. LaTeX is placed between \\(..\\) s, and CAS expressions (including your variables) between matching {@..@} symbols. The CAS expressions are evaluated in the context of the question variables and displayed as LaTeX. Since we have used {@exp@} here, the user will not see a exp on the screen when the question is instantiated, but the displayed value of exp : \\frac{3}{(x-1)^{-4}} In the input ans1 , specify the model answer as the variable ta . In the potential response tree, set the Answer test to AlgEquiv , set SAns to ans1 and set TAns to ta . It is good practice to use question variables often, as they save time and let you change properties of the question easily in the future. Next step You should now be able to use question variables in STACK. The next part of the authoring quick start guide looks at improving feedback .","title":"Authoring quick start 2: question variables"},{"location":"en/Authoring/Authoring_quick_start_2/#authoring-quick-start-2-question-variables","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with using question variables. The following video explains the process:","title":"Authoring quick start 2: question variables"},{"location":"en/Authoring/Authoring_quick_start_2/#example-question","text":"For this example, we will be working with a simple integration problem. Below is a typical set of practice exercises. (Reproduced with permission from Advanced Mathematics for AS and A level 2 (A-level mathematics), Haese Mathematics (2018) 978-1-925489-32-3 ) Let us focus on the problem of finding \\int 3(x-1)^{-4} \\mathrm{d}x . Create a new STACK question. As before, we will give our question a Question name , say \"Integration Example\".","title":"Example question"},{"location":"en/Authoring/Authoring_quick_start_2/#using-question-variables","text":"The next steps would be to add question text, and then to add the teacher's answer -1*(x-1)^(-3)+c to the model answer field and the potential response tree . However, the expression and model answer will normally be referred to more than once, so it is usually easiest to assign them to \"question variables\" using the optional question variables field. Add the following to the question variables exp: 3*(x-1)^(-4); ta: int(exp,x)+c; The coding in question variables is based on Maxima, which has an unusual syntax for assignment. In particular, the colon : is used to assign a value to a variable. So to assign the value of 5 to a1 , we use the syntax a1:5 . In general, it is good practice to give variables multi-character names, as single-character names are meant for student input. This is because multi-character variables the author defined cannot by default be input by students. Additionally, adding semicolons to the end of each line is optional, but good practice. Notice we are using the CAS to determine the model answer by calling the int() function to find the anti-derivative. When the CAS determines an anti-derivative, it does not include a constant of integration, so we have to add it ourselves. Now it will be a lot faster to fill out the rest of the question. Add the following to the question text: Find \\(\\int{@exp@} \\mathrm{d}x\\) [[input:ans1]] [[validation:ans1]] Notice that we have defined a local variable exp , and used the value of this in the Question text. There is a difference between mathematics enclosed between \\(..\\) symbols and {@..@} symbols. All the text-based fields in the question, including feedback, are CAS text . This is HTML into which mathematics can be inserted. LaTeX is placed between \\(..\\) s, and CAS expressions (including your variables) between matching {@..@} symbols. The CAS expressions are evaluated in the context of the question variables and displayed as LaTeX. Since we have used {@exp@} here, the user will not see a exp on the screen when the question is instantiated, but the displayed value of exp : \\frac{3}{(x-1)^{-4}} In the input ans1 , specify the model answer as the variable ta . In the potential response tree, set the Answer test to AlgEquiv , set SAns to ans1 and set TAns to ta . It is good practice to use question variables often, as they save time and let you change properties of the question easily in the future.","title":"Using question variables"},{"location":"en/Authoring/Authoring_quick_start_2/#next-step","text":"You should now be able to use question variables in STACK.","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start_2/#the-next-part-of-the-authoring-quick-start-guide-looks-at-improving-feedback","text":"","title":"The next part of the authoring quick start guide looks at improving feedback."},{"location":"en/Authoring/Authoring_quick_start_3/","text":"Authoring quick start 3: improving feedback 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the Authoring Quick Start Guide deals with improving feedback. The following video explains the process: Introduction In the last part we started working with question variables. Specifically, we defined the variable exp for the expression to be integrated, and ta for the teacher's answer. Then we asked the student to find \\int 3(x-1)^{-4}dx . Try previewing this question and typing in -1*(x-1)^(-3)+c . The system should accept this as correct. Next type in -1*(x-1)^(-3)+C . This will be compared to the teacher's answer -1*(x-1)^(-3)+c by algebraic equivalence (recall we specified AlgEquiv in the potential response tree), and will not be accepted as equivalent. The reason is that c and C are different. A reasonable teacher will probably not care which letter is used for the constant of integration. Let us fix this problem. Answer test: Int We will need to edit the potential response tree to use a better answer test . Return to the page \"Editing a STACK question\". Find your potential response tree settings, click on the drop-down menu where we selected AlgEquiv and select Int from the list. Type x (the variable) into the Test options setting. Now press the [Save changes and continue editing] button and once more click the preview button. We have just selected a special answer test for dealing with integration questions. The Int answer test will accept any variable name for the constant of integration. For example, try typing in -(x-1)^(-3)+k . The system should accept this as correct. It will also give standard feedback if the student forgets a constant of integration or accidentally differentiates instead. To try this, type -12*(x-1)^(-5) . If you don't want students to see the automatic feedback, select the Quiet option in the potential response node. An outcome's Answer Note is a name given for that specific outcome. STACK will automatically generate these with information on the potential response tree, the node number and the outcome of the node. Considerations When checking a student's answer with STACK, a teacher needs to ask themselves \"What are the mathematical properties that make a student's answer correct/incorrect?\" In our case, these questions include: Is the student's answer a symbolic anti-derivative of the integrand? Does the student have a constant of integration in an appropriate form? The built-in int answer test answers these questions, so a teacher does not have to write code to do so for every integration question. Next, a teacher needs to ask \"What might a student do incorrectly, and what will this give them as an answer?\" This second question is more difficult. The answer might come through experience or from asking upfront diagnostic questions. It is often sensible to review students' responses to STACK questions after a year and build in better feedback in light of experiences. Enhancing the feedback further For each mistake we think students might make, we can create an answer test. For example, we might expect students to leave their answer in expanded form. This would of course still be a correct answer, but we want to guide students away from unnecessarily expanding their answer. Let us create another node that tests if the student left their final answer in a factored form. We do this by adding another potential response node. Go to the potential response tree and click [Add another node] . Then under Node 1's True branch change Next to Node 2 . If we enter Node 2, we know the student has the correct answer and just need to establish if it is factored or not. To establish this we need to use the FacForm answer test . This tests both that SAns and TAns are equivalent, and that SAns is factored. In this case we already know that the student's answer is equivalent to the teacher's answer (using Int 's better tailored algorithm). Hence we can just test the student's answer against itself. Update the form so that Node 2 has Answer test = FacForm SAns = strip_int_const(ans1,x) TAns = strip_int_const(ans1,x) Test options = x STACK provides a function strip_int_const to remove any constant of integration which a student may have used. We again have to specify the variable in Test options . Make sure that the outcomes for both True and False do not change the score. By default they will be set to +0 and -0 , respectively. By not changing the score, we ensure that students are not penalised for giving their answer in expanded form. FacForm gives automatic feedback, but if you want to write your own you can set Quiet to Yes and type something like the following into Node 2 false feedback : Your answer is not factored. Well done for getting the correct answer, but remember that there is no need to expand out the brackets. You can continue to expand your potential response tree, checking for as many common mistakes as you would like to. See the documentation for information on more answer tests. Adding general feedback General Feedback is shown to every student, regardless of whether they got the question right or wrong. This is a good place to add a full worked solution. Next step You should now be able to create specific feedback in STACK. The next part of the authoring quick start guide looks at randomisation .","title":"Authoring quick start 3: improving feedback"},{"location":"en/Authoring/Authoring_quick_start_3/#authoring-quick-start-3-improving-feedback","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the Authoring Quick Start Guide deals with improving feedback. The following video explains the process:","title":"Authoring quick start 3: improving feedback"},{"location":"en/Authoring/Authoring_quick_start_3/#introduction","text":"In the last part we started working with question variables. Specifically, we defined the variable exp for the expression to be integrated, and ta for the teacher's answer. Then we asked the student to find \\int 3(x-1)^{-4}dx . Try previewing this question and typing in -1*(x-1)^(-3)+c . The system should accept this as correct. Next type in -1*(x-1)^(-3)+C . This will be compared to the teacher's answer -1*(x-1)^(-3)+c by algebraic equivalence (recall we specified AlgEquiv in the potential response tree), and will not be accepted as equivalent. The reason is that c and C are different. A reasonable teacher will probably not care which letter is used for the constant of integration. Let us fix this problem.","title":"Introduction"},{"location":"en/Authoring/Authoring_quick_start_3/#answer-test-int","text":"We will need to edit the potential response tree to use a better answer test . Return to the page \"Editing a STACK question\". Find your potential response tree settings, click on the drop-down menu where we selected AlgEquiv and select Int from the list. Type x (the variable) into the Test options setting. Now press the [Save changes and continue editing] button and once more click the preview button. We have just selected a special answer test for dealing with integration questions. The Int answer test will accept any variable name for the constant of integration. For example, try typing in -(x-1)^(-3)+k . The system should accept this as correct. It will also give standard feedback if the student forgets a constant of integration or accidentally differentiates instead. To try this, type -12*(x-1)^(-5) . If you don't want students to see the automatic feedback, select the Quiet option in the potential response node. An outcome's Answer Note is a name given for that specific outcome. STACK will automatically generate these with information on the potential response tree, the node number and the outcome of the node.","title":"Answer test: Int"},{"location":"en/Authoring/Authoring_quick_start_3/#considerations","text":"When checking a student's answer with STACK, a teacher needs to ask themselves \"What are the mathematical properties that make a student's answer correct/incorrect?\" In our case, these questions include: Is the student's answer a symbolic anti-derivative of the integrand? Does the student have a constant of integration in an appropriate form? The built-in int answer test answers these questions, so a teacher does not have to write code to do so for every integration question. Next, a teacher needs to ask \"What might a student do incorrectly, and what will this give them as an answer?\" This second question is more difficult. The answer might come through experience or from asking upfront diagnostic questions. It is often sensible to review students' responses to STACK questions after a year and build in better feedback in light of experiences.","title":"Considerations"},{"location":"en/Authoring/Authoring_quick_start_3/#enhancing-the-feedback-further","text":"For each mistake we think students might make, we can create an answer test. For example, we might expect students to leave their answer in expanded form. This would of course still be a correct answer, but we want to guide students away from unnecessarily expanding their answer. Let us create another node that tests if the student left their final answer in a factored form. We do this by adding another potential response node. Go to the potential response tree and click [Add another node] . Then under Node 1's True branch change Next to Node 2 . If we enter Node 2, we know the student has the correct answer and just need to establish if it is factored or not. To establish this we need to use the FacForm answer test . This tests both that SAns and TAns are equivalent, and that SAns is factored. In this case we already know that the student's answer is equivalent to the teacher's answer (using Int 's better tailored algorithm). Hence we can just test the student's answer against itself. Update the form so that Node 2 has Answer test = FacForm SAns = strip_int_const(ans1,x) TAns = strip_int_const(ans1,x) Test options = x STACK provides a function strip_int_const to remove any constant of integration which a student may have used. We again have to specify the variable in Test options . Make sure that the outcomes for both True and False do not change the score. By default they will be set to +0 and -0 , respectively. By not changing the score, we ensure that students are not penalised for giving their answer in expanded form. FacForm gives automatic feedback, but if you want to write your own you can set Quiet to Yes and type something like the following into Node 2 false feedback : Your answer is not factored. Well done for getting the correct answer, but remember that there is no need to expand out the brackets. You can continue to expand your potential response tree, checking for as many common mistakes as you would like to. See the documentation for information on more answer tests.","title":"Enhancing the feedback further"},{"location":"en/Authoring/Authoring_quick_start_3/#adding-general-feedback","text":"General Feedback is shown to every student, regardless of whether they got the question right or wrong. This is a good place to add a full worked solution.","title":"Adding general feedback"},{"location":"en/Authoring/Authoring_quick_start_3/#next-step","text":"You should now be able to create specific feedback in STACK.","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start_3/#the-next-part-of-the-authoring-quick-start-guide-looks-at-randomisation","text":"","title":"The next part of the authoring quick start guide looks at randomisation."},{"location":"en/Authoring/Authoring_quick_start_4/","text":"Authoring quick start 4: randomisation 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with randomisation. The following video explains the process: Introduction In the last part, we worked with a problem about integrating 3(x-1)^{-4} with respect to x. However, we do not want every student to get the exact same question, as that would allow them to share answers! To solve this problem, we need to randomise the question. Random questions Let's take a look again at the question variables we declared: exp: 3*(x-1)^(-4); ta: int(exp,x)+c; We defined two local variables exp and ta , and used these values in other places such as the question text, input and potential response tree. We are now in a position to generate a random question. To do this, modify the question variables to be a1 : 1+rand(6); a2 : 1+rand(6); nn : 1+rand(4); exp : a1*(x-a2)^(-nn); ta: int(exp, x)+c; In this new question we are asking the student to find the anti-derivative of a question with a definite form a_1(x-a_2)^-nn . a1 , a2 and nn are all variables which are assigned random positive integers. These are then used to define the variable exp , used in the question itself. We also have the CAS integrate the expression exp and store the result in the variable ta . It is good practice to use variables names with more than one character as single-character variables, like x , are meant for student input. Remember that when generating random questions in STACK we talk about random numbers when we really mean pseudo-random numbers . To keep track of which random numbers are generated for each user, there is a special rand command in STACK, which you should use instead of Maxima 's random command. The rand command is a general \"random thing\" generator, see the page on random generation for full details. rand can be used to generate random numbers and also to make selections from a list. rand(n) will select a random integer from 0 up to, and not including , n . So rand(3) will select a random number from the list [0,1,2] . Question note Now that as our question contains random numbers, we need to record the actual question variant seen by a particular student. As soon as we use the rand function, STACK forces us to add a Question note . Fill the question note in as \\[ \\int {@exp@} \\mathrm{d}x = {@ta@}.\\] Two question variants are considered to be the same if and only if the question note is the same. It is the teacher's responsibility to create sensible notes. Deploying random variants Before a student sees the questions, it is sensible to deploy random variants. This controls exactly which variants are shown to a student and lets you check that the randomisation is sensible. Scroll to the top of your question and click on Question tests & deployed variants . To ask STACK to generate a number of question variants, you need Attempt to automatically deploy the following number of variants: . Select, for example, 10 and press Go . You should then be able to see 10 random variants of the question. Now students will only be shown one of these. You also have the option to remove any variants that you don't like. For example, you might not like the variants where nn=1, as these have answers involving logarithms. Hence, you could cross out all these variants. Perhaps a better solution is to return to your Question variables and change nn to 2+rand(4) . When you save and go back to Question tests & deployed variants , you will see your variants changed. This illustrates a key use of deployed variants: checking for unintentional consequences of the randomisation. Preview options Try previewing your question. As previously mentioned, under Attempt options , you have the option to change the question behaviour. Adaptive mode is the most useful one for question testing, as it allows you to check questions repeatedly. We will discuss question behaviours in more detail later. However, notice also that you can choose which deployed Question variant you are answering. This is useful if you want to test a specific variant. Next step You should now be able to make and deploy random questions in STACK. The next part of the authoring quick start guide looks at question tests .","title":"Authoring quick start 4: randomisation"},{"location":"en/Authoring/Authoring_quick_start_4/#authoring-quick-start-4-randomisation","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with randomisation. The following video explains the process:","title":"Authoring quick start 4: randomisation"},{"location":"en/Authoring/Authoring_quick_start_4/#introduction","text":"In the last part, we worked with a problem about integrating 3(x-1)^{-4} with respect to x. However, we do not want every student to get the exact same question, as that would allow them to share answers! To solve this problem, we need to randomise the question.","title":"Introduction"},{"location":"en/Authoring/Authoring_quick_start_4/#random-questions","text":"Let's take a look again at the question variables we declared: exp: 3*(x-1)^(-4); ta: int(exp,x)+c; We defined two local variables exp and ta , and used these values in other places such as the question text, input and potential response tree. We are now in a position to generate a random question. To do this, modify the question variables to be a1 : 1+rand(6); a2 : 1+rand(6); nn : 1+rand(4); exp : a1*(x-a2)^(-nn); ta: int(exp, x)+c; In this new question we are asking the student to find the anti-derivative of a question with a definite form a_1(x-a_2)^-nn . a1 , a2 and nn are all variables which are assigned random positive integers. These are then used to define the variable exp , used in the question itself. We also have the CAS integrate the expression exp and store the result in the variable ta . It is good practice to use variables names with more than one character as single-character variables, like x , are meant for student input. Remember that when generating random questions in STACK we talk about random numbers when we really mean pseudo-random numbers . To keep track of which random numbers are generated for each user, there is a special rand command in STACK, which you should use instead of Maxima 's random command. The rand command is a general \"random thing\" generator, see the page on random generation for full details. rand can be used to generate random numbers and also to make selections from a list. rand(n) will select a random integer from 0 up to, and not including , n . So rand(3) will select a random number from the list [0,1,2] .","title":"Random questions"},{"location":"en/Authoring/Authoring_quick_start_4/#question-note","text":"Now that as our question contains random numbers, we need to record the actual question variant seen by a particular student. As soon as we use the rand function, STACK forces us to add a Question note . Fill the question note in as \\[ \\int {@exp@} \\mathrm{d}x = {@ta@}.\\] Two question variants are considered to be the same if and only if the question note is the same. It is the teacher's responsibility to create sensible notes.","title":"Question note"},{"location":"en/Authoring/Authoring_quick_start_4/#deploying-random-variants","text":"Before a student sees the questions, it is sensible to deploy random variants. This controls exactly which variants are shown to a student and lets you check that the randomisation is sensible. Scroll to the top of your question and click on Question tests & deployed variants . To ask STACK to generate a number of question variants, you need Attempt to automatically deploy the following number of variants: . Select, for example, 10 and press Go . You should then be able to see 10 random variants of the question. Now students will only be shown one of these. You also have the option to remove any variants that you don't like. For example, you might not like the variants where nn=1, as these have answers involving logarithms. Hence, you could cross out all these variants. Perhaps a better solution is to return to your Question variables and change nn to 2+rand(4) . When you save and go back to Question tests & deployed variants , you will see your variants changed. This illustrates a key use of deployed variants: checking for unintentional consequences of the randomisation.","title":"Deploying random variants"},{"location":"en/Authoring/Authoring_quick_start_4/#preview-options","text":"Try previewing your question. As previously mentioned, under Attempt options , you have the option to change the question behaviour. Adaptive mode is the most useful one for question testing, as it allows you to check questions repeatedly. We will discuss question behaviours in more detail later. However, notice also that you can choose which deployed Question variant you are answering. This is useful if you want to test a specific variant.","title":"Preview options"},{"location":"en/Authoring/Authoring_quick_start_4/#next-step","text":"You should now be able to make and deploy random questions in STACK.","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start_4/#the-next-part-of-the-authoring-quick-start-guide-looks-at-question-tests","text":"","title":"The next part of the authoring quick start guide looks at question tests."},{"location":"en/Authoring/Authoring_quick_start_5/","text":"Authoring quick start 5: question tests 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with using question tests. The following video explains the process: Introduction In the last couple of parts, we have been working with a simple integration question. Before you continue, confirm that your question variables are set up as follows: a1 : 1+rand(6); a2 : 1+rand(6); nn : 2+rand(4); exp : a1*(x-a2)^(-nn); ta: int(exp, x)+c; Testing questions is time consuming and tedious, but important to ensure questions work. To help with this process, STACK enables teachers to define \"question tests\". The principle is the same as \"unit testing\" in software engineering. Question testing Scroll to the top of your question and click on Question tests & deployed variants . In the last part we used this window to deploy random variants. Click Add a test case to add a test to your question. A test case takes a student input. You then specify what the expected outcome is for that input, namely the score, penalty and answer note you expect to land on. Recall from the last part that the Answer note is the name for a specific outcome on a potential response tree. The penalty is a number deducted from the total mark for each incorrect attempt the student has. By default, it is set to 0.1. You can change the penalty in the General section under Penalty . Note that this feature is only used in the question behaviours Interactive with multiple tries and Adaptive mode , as they are the only ones that allow multiple attempts. We will discuss question behaviours in a later part. Fill in the following information for your first test case: ans1 = ta score = 1 penalty = 0 answernote = prt1-2-T I.e., if the student puts in the model answer they should pass the first node (checks if they have integrated correctly) and pass the second node (tests that their answer is factored) and end up with a score of 1 and no penalty. Note that the input is evaluated before the test is conducted. Students are not allowed to enter the variable ta because it is a teacher-defined variable, however the evaluated form, fx. -1*(x-1)^(-3)+c , is an allowed input. For each test case, you can see the un-evaluated input under Test input , and the actual input tested under Value entered . You can run the test on all deployed versions by clicking on Run all tests on all deployed variants . You can add as many tests as you think is needed, and it is usually a sensible idea to add one for each case you anticipate. Add in another test case for ans1 = int(exp,x) score = 0 penalty = 0.1 answernote = prt1-1-F Here we create a test case without a constant of integration. In this case STACK should fail to give students any marks, indicating the test passes! You should also use question tests to check that solving every variant requires the competences that you desire. For example, in this question we want students to know (1) increase the power by 1 and (2) divide by the new power. They should not be able to get away with, for example, increasing the power and multiplying by the new power. Let's add a test case to check this. ans1 = (a1*(-nn+1))*(x-a2)^(-nn+1)+c score = 0 penalty = 0.1 answernote = prt1-F We are that if we multiply by -nn+1 instead of dividing, we should be given a score of 0. If students are required this knowledge for all variants, then all variants should pass this test. Click Run all tests on all deployed variants to check this. You will see that not all deployed versions pass all tests, and if you click on a variant that failed a test, you will see why! Essentially, when nn=2 , -nn+1=-1 multiplication and division are equivalent. Essentially, these random variants are \"easier\" than the others. This illustrates another key use of question tests - ensuring that all variants are the same difficulty and test the knowledge they are supposed to. In light of this, you may want to change nn again to 3+rand(4) . Now all variants should pass all question tests. Quality control is essential, and more information is given in the page on testing . Aside: forbidden words STACK allows students to use standard mathematical functions, such as sin , cos , etc. Perhaps surprisingly, it also allows students to use int . So in theory, students could input int(...)+c , and the system would mark it correct! To stop this, go to input:ans1 and under forbidden words, enter int . Forbidden words will render words that are normally allowed invalid. This example nicely illustrates the way validity can be used to help students. An answer int(p,x)+c is a correct response to the question, but it is invalid. In this example we want them to perform integration, not have the CAS do it! Next step You should now be able to use question tests in STACK. The next part of the authoring quick start guide looks at multipart questions .","title":"Authoring quick start 5: question tests"},{"location":"en/Authoring/Authoring_quick_start_5/#authoring-quick-start-5-question-tests","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with using question tests. The following video explains the process:","title":"Authoring quick start 5: question tests"},{"location":"en/Authoring/Authoring_quick_start_5/#introduction","text":"In the last couple of parts, we have been working with a simple integration question. Before you continue, confirm that your question variables are set up as follows: a1 : 1+rand(6); a2 : 1+rand(6); nn : 2+rand(4); exp : a1*(x-a2)^(-nn); ta: int(exp, x)+c; Testing questions is time consuming and tedious, but important to ensure questions work. To help with this process, STACK enables teachers to define \"question tests\". The principle is the same as \"unit testing\" in software engineering.","title":"Introduction"},{"location":"en/Authoring/Authoring_quick_start_5/#question-testing","text":"Scroll to the top of your question and click on Question tests & deployed variants . In the last part we used this window to deploy random variants. Click Add a test case to add a test to your question. A test case takes a student input. You then specify what the expected outcome is for that input, namely the score, penalty and answer note you expect to land on. Recall from the last part that the Answer note is the name for a specific outcome on a potential response tree. The penalty is a number deducted from the total mark for each incorrect attempt the student has. By default, it is set to 0.1. You can change the penalty in the General section under Penalty . Note that this feature is only used in the question behaviours Interactive with multiple tries and Adaptive mode , as they are the only ones that allow multiple attempts. We will discuss question behaviours in a later part. Fill in the following information for your first test case: ans1 = ta score = 1 penalty = 0 answernote = prt1-2-T I.e., if the student puts in the model answer they should pass the first node (checks if they have integrated correctly) and pass the second node (tests that their answer is factored) and end up with a score of 1 and no penalty. Note that the input is evaluated before the test is conducted. Students are not allowed to enter the variable ta because it is a teacher-defined variable, however the evaluated form, fx. -1*(x-1)^(-3)+c , is an allowed input. For each test case, you can see the un-evaluated input under Test input , and the actual input tested under Value entered . You can run the test on all deployed versions by clicking on Run all tests on all deployed variants . You can add as many tests as you think is needed, and it is usually a sensible idea to add one for each case you anticipate. Add in another test case for ans1 = int(exp,x) score = 0 penalty = 0.1 answernote = prt1-1-F Here we create a test case without a constant of integration. In this case STACK should fail to give students any marks, indicating the test passes! You should also use question tests to check that solving every variant requires the competences that you desire. For example, in this question we want students to know (1) increase the power by 1 and (2) divide by the new power. They should not be able to get away with, for example, increasing the power and multiplying by the new power. Let's add a test case to check this. ans1 = (a1*(-nn+1))*(x-a2)^(-nn+1)+c score = 0 penalty = 0.1 answernote = prt1-F We are that if we multiply by -nn+1 instead of dividing, we should be given a score of 0. If students are required this knowledge for all variants, then all variants should pass this test. Click Run all tests on all deployed variants to check this. You will see that not all deployed versions pass all tests, and if you click on a variant that failed a test, you will see why! Essentially, when nn=2 , -nn+1=-1 multiplication and division are equivalent. Essentially, these random variants are \"easier\" than the others. This illustrates another key use of question tests - ensuring that all variants are the same difficulty and test the knowledge they are supposed to. In light of this, you may want to change nn again to 3+rand(4) . Now all variants should pass all question tests. Quality control is essential, and more information is given in the page on testing .","title":"Question testing"},{"location":"en/Authoring/Authoring_quick_start_5/#aside-forbidden-words","text":"STACK allows students to use standard mathematical functions, such as sin , cos , etc. Perhaps surprisingly, it also allows students to use int . So in theory, students could input int(...)+c , and the system would mark it correct! To stop this, go to input:ans1 and under forbidden words, enter int . Forbidden words will render words that are normally allowed invalid. This example nicely illustrates the way validity can be used to help students. An answer int(p,x)+c is a correct response to the question, but it is invalid. In this example we want them to perform integration, not have the CAS do it!","title":"Aside: forbidden words"},{"location":"en/Authoring/Authoring_quick_start_5/#next-step","text":"You should now be able to use question tests in STACK.","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start_5/#the-next-part-of-the-authoring-quick-start-guide-looks-at-multipart-questions","text":"","title":"The next part of the authoring quick start guide looks at multipart questions."},{"location":"en/Authoring/Authoring_quick_start_6/","text":"Authoring quick start 6: multipart questions 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with authoring multipart questions. The following video explains the process: Consider the following examples: Example 1 Find the equation of the line tangent to x^3-2x^2+x at the point x=2 . Differentiate x^3-2x^2+x with respect to x . Evaluate your derivative at x=2 . Hence, find the equation of the tangent line. y=... Since all three parts refer to one polynomial, if randomly generated questions are being used, then each of these parts needs to reference a single randomly generated equation. Hence parts 1.-3. really form one item. Notice here that part 1. is independent of the others. Part 2. requires both the first and second inputs. Part 3. could easily be marked independently, or take into account parts 1 & 2. Notice also that the teacher may choose to award \"follow on\" marking. Example 2 Consider the following question, asked to relatively young school students. Expand (x+1)(x+2) . In the context it is to be used, it is appropriate to provide students with the opportunity to \"fill in the blanks\" in the following equation: (x+1)(x+2) = [?] x2 + [?] x + [?]. We argue this is really \"one question\" with \"three inputs\". Furthermore, it is likely that the teacher will want the student to complete all boxes before any feedback is assigned, even if separate feedback is generated for each input (i.e. coefficient). This feedback should all be grouped in one place on the screen. Furthermore, in order to identify the possible causes of algebraic mistakes, an automatic marking procedure will require all coefficients simultaneously. It is not satisfactory to have three totally independent marking procedures. These two examples illustrate two extreme positions. All inputs within a single multipart item can be assessed independently. All inputs within a single multipart item must be completed before the item can be scored. Devising multipart questions which satisfy these two extreme positions would be relatively straightforward. However, it is more common to have multipart questions which are between these extremes, as in the case of our first example. Authoring a multipart question Start a new STACK question, and give the question a name, e.g. \"Tangent lines\". This question will have three parts. Start by copying the question variables and question text as follows. Notice that we have not included any randomisation, but we have used variable names at the outset to facilitate this at a later stage. Question variables: exp:x^3-2*x^2+x; pt:2; ta1:diff(exp,x); ta2:subst(x=pt,ta1); ta3:remainder(exp,(x-pt)^2); Question text Copy the following text into the editor. Find the equation of the line tangent to {@exp@} at the point \\(x={@pt@}\\). 1. Differentiate {@exp@} with respect to \\(x\\). [[input:ans1]] [[validation:ans1]] [[feedback:prt1]] 2. Evaluate your derivative at \\(x={@pt@}\\). [[input:ans2]] [[validation:ans2]] [[feedback:prt2]] 3. Hence, find the equation of the tangent line. \\(y=\\)[[input:ans3]] [[validation:ans3]] [[feedback:prt3]] Fill in the answer for ans1 (which exists by default) and remove the feedback tag from the \"specific feedback\" section. We choose to embed feedback within parts of this question, so that relevant feedback is shown directly underneath the relevant part. Notice there is one potential response tree for each \"part\". Update the form by saving your changes, and then ensure the Model Answers are filled in as ta1 , ta2 and ta3 . STACK creates three potential response trees by detecting the feedback tags automatically. Next we need to edit potential response trees. These will establish the properties of the student's answers. Stage 1: a working potential response tree The first stage is to include the simplest potential response trees. These will simply ensure that answers are \"correct\". In each potential response tree, make sure to test that \\mbox{ans}_i is algebraically equivalent to \\mbox{ta}_i , for i=1,2,3 . At this stage we have a working question. Save it and preview the question. For reference, the correct answers are ta1 = 3*x^2-4*x+1 ta2 = 5 ta3 = 5*x-8 Stage 2: follow-through marking Next we will implement simple follow-through marking. Look carefully at part 2. This does not ask for the \"correct answer\", only that the student has evaluated the expression in part 1 correctly at the right point. So the first task is to establish this property by evaluating the answer given in the first part, and comparing it with the second part. Update node 1 of prt2 to the following: Answer test: AlgEquiv SAns: ans2 TAns: subst(x=pt,ans1) Next, add a single node (to prt2 ) with the following: Answer test: AlgEquiv SAns: ans1 TAns: ta1 We now link the true branch of node 1 to node 2 (of prt2 ). This gives us three outcomes. Node 1: did they evaluate their expression in part 1 correctly? If \"yes\", then go to node 2, else if \"no\", then exit with no marks. Node 2: did they get part 1 correct? if \"yes\" then this is the ideal situation, full marks. If \"no\" then choose marks as suit your taste in this situation, and add some feedback, such as the following: You have correctly evaluated your answer to part 1 at the given point, but your answer to part 1 is wrong. Please try both parts again. Next step You should now be able to make a multipart question in STACK. If you have been following this quick-start guide, you should already know some steps you can take to improve this question. For example, you could add more specific feedback , randomise your question and add question tests . The next part of the authoring quick start guide looks at turning simplification off .","title":"Authoring quick start 6: multipart questions"},{"location":"en/Authoring/Authoring_quick_start_6/#authoring-quick-start-6-multipart-questions","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with authoring multipart questions. The following video explains the process: Consider the following examples:","title":"Authoring quick start 6: multipart questions"},{"location":"en/Authoring/Authoring_quick_start_6/#example-1","text":"Find the equation of the line tangent to x^3-2x^2+x at the point x=2 . Differentiate x^3-2x^2+x with respect to x . Evaluate your derivative at x=2 . Hence, find the equation of the tangent line. y=... Since all three parts refer to one polynomial, if randomly generated questions are being used, then each of these parts needs to reference a single randomly generated equation. Hence parts 1.-3. really form one item. Notice here that part 1. is independent of the others. Part 2. requires both the first and second inputs. Part 3. could easily be marked independently, or take into account parts 1 & 2. Notice also that the teacher may choose to award \"follow on\" marking.","title":"Example 1"},{"location":"en/Authoring/Authoring_quick_start_6/#example-2","text":"Consider the following question, asked to relatively young school students. Expand (x+1)(x+2) . In the context it is to be used, it is appropriate to provide students with the opportunity to \"fill in the blanks\" in the following equation: (x+1)(x+2) = [?] x2 + [?] x + [?]. We argue this is really \"one question\" with \"three inputs\". Furthermore, it is likely that the teacher will want the student to complete all boxes before any feedback is assigned, even if separate feedback is generated for each input (i.e. coefficient). This feedback should all be grouped in one place on the screen. Furthermore, in order to identify the possible causes of algebraic mistakes, an automatic marking procedure will require all coefficients simultaneously. It is not satisfactory to have three totally independent marking procedures. These two examples illustrate two extreme positions. All inputs within a single multipart item can be assessed independently. All inputs within a single multipart item must be completed before the item can be scored. Devising multipart questions which satisfy these two extreme positions would be relatively straightforward. However, it is more common to have multipart questions which are between these extremes, as in the case of our first example.","title":"Example 2"},{"location":"en/Authoring/Authoring_quick_start_6/#authoring-a-multipart-question","text":"Start a new STACK question, and give the question a name, e.g. \"Tangent lines\". This question will have three parts. Start by copying the question variables and question text as follows. Notice that we have not included any randomisation, but we have used variable names at the outset to facilitate this at a later stage. Question variables: exp:x^3-2*x^2+x; pt:2; ta1:diff(exp,x); ta2:subst(x=pt,ta1); ta3:remainder(exp,(x-pt)^2); Question text Copy the following text into the editor. Find the equation of the line tangent to {@exp@} at the point \\(x={@pt@}\\). 1. Differentiate {@exp@} with respect to \\(x\\). [[input:ans1]] [[validation:ans1]] [[feedback:prt1]] 2. Evaluate your derivative at \\(x={@pt@}\\). [[input:ans2]] [[validation:ans2]] [[feedback:prt2]] 3. Hence, find the equation of the tangent line. \\(y=\\)[[input:ans3]] [[validation:ans3]] [[feedback:prt3]] Fill in the answer for ans1 (which exists by default) and remove the feedback tag from the \"specific feedback\" section. We choose to embed feedback within parts of this question, so that relevant feedback is shown directly underneath the relevant part. Notice there is one potential response tree for each \"part\". Update the form by saving your changes, and then ensure the Model Answers are filled in as ta1 , ta2 and ta3 . STACK creates three potential response trees by detecting the feedback tags automatically. Next we need to edit potential response trees. These will establish the properties of the student's answers.","title":"Authoring a multipart question"},{"location":"en/Authoring/Authoring_quick_start_6/#stage-1-a-working-potential-response-tree","text":"The first stage is to include the simplest potential response trees. These will simply ensure that answers are \"correct\". In each potential response tree, make sure to test that \\mbox{ans}_i is algebraically equivalent to \\mbox{ta}_i , for i=1,2,3 . At this stage we have a working question. Save it and preview the question. For reference, the correct answers are ta1 = 3*x^2-4*x+1 ta2 = 5 ta3 = 5*x-8","title":"Stage 1: a working potential response tree"},{"location":"en/Authoring/Authoring_quick_start_6/#stage-2-follow-through-marking","text":"Next we will implement simple follow-through marking. Look carefully at part 2. This does not ask for the \"correct answer\", only that the student has evaluated the expression in part 1 correctly at the right point. So the first task is to establish this property by evaluating the answer given in the first part, and comparing it with the second part. Update node 1 of prt2 to the following: Answer test: AlgEquiv SAns: ans2 TAns: subst(x=pt,ans1) Next, add a single node (to prt2 ) with the following: Answer test: AlgEquiv SAns: ans1 TAns: ta1 We now link the true branch of node 1 to node 2 (of prt2 ). This gives us three outcomes. Node 1: did they evaluate their expression in part 1 correctly? If \"yes\", then go to node 2, else if \"no\", then exit with no marks. Node 2: did they get part 1 correct? if \"yes\" then this is the ideal situation, full marks. If \"no\" then choose marks as suit your taste in this situation, and add some feedback, such as the following: You have correctly evaluated your answer to part 1 at the given point, but your answer to part 1 is wrong. Please try both parts again.","title":"Stage 2: follow-through marking"},{"location":"en/Authoring/Authoring_quick_start_6/#next-step","text":"You should now be able to make a multipart question in STACK. If you have been following this quick-start guide, you should already know some steps you can take to improve this question. For example, you could add more specific feedback , randomise your question and add question tests .","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start_6/#the-next-part-of-the-authoring-quick-start-guide-looks-at-turning-simplification-off","text":"","title":"The next part of the authoring quick start guide looks at turning simplification off."},{"location":"en/Authoring/Authoring_quick_start_7/","text":"Authoring quick start 7: turning simplification off 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with turning simplification off. The following video explains the process: Example question Given a complex number z=ae^{ib} , determine z^{n} . Where a , b and n are randomly generated numbers. Simplification off It is tempting when writing questions such as this to operate at the level of display. We could randomly generate a , b and n and insert them into the question text. For example: \\(({@aa@}e^{{@bb@} i})^{@nn@}\\) What we are doing here is treating every variable separately instead of creating a single CAS object for the complex number. This is ok, but causes problems and is difficult to read because it mixes CAS and LaTeX. Hence, we would much rather have everything in one CAS object that is not simplified. The following is a single Maxima expression: {@(aa*%e^(bb*%i))^nn@} (Notice that we are using variables names with more than one character. This is good practice, as single-character variables are meant for student input. Notice also that we precede standard mathematical variables with % when writing in Maxima. This is not mandatory, but is considered good practice.) Of course, we don't want Maxima to actually calculate the power just to represent it! To see the difference, copy the following a STACK question's question variables: simp:true; a1: (3*%e^(%i*%pi/2))^4; simp:false; a2: (3*%e^(%i*%pi/2))^4; Then type Simplified: {@a1@} Not simplified: {@a2@} somewhere in the question text. Preview to see the difference. Solving problems at the level of the CAS instead at the level of the display is often better. To tell STACK to set simp:false throughout the question, scroll towards the bottom of the form and under Options , set Question-level simplify to No . Now Maxima will not simplify expressions before displaying them, so {@2+5@} will display as 2+5 instead of 7 . This does have some drawbacks. Having switched off all simplification, we now need to turn it back on selectively! There are two ways to do this. Firstly, we can use commands of the following type: aa : ev(2+rand(10),simp); In particular, we can define the question variables as follows. aa : ev(2+rand(10),simp); bb : ev(2+rand(10),simp); nn : ev(2+rand(5),simp); qq : (aa*%e^(bb*%i))^nn; An alternative, when many consecutive expressions need to be simplified, is the following: simp : true; aa : 2+rand(10); bb : 2+rand(10); nn : 2+rand(5); simp : false; qq : (aa*%e^(bb*%i))^nn; Unary minus The particular circumstances will dictate if it is better to have lots of variables and use the display, or whether to turn simp:false and work with this. A common problem arises with the unary minus. Consider a question text such as Find {@aa@}+{@bb@} . If <code>bb</code>&lt;0 , the expression will be displayed as 3+-5 , for example. While simplification is \"off\", the display routines in Maxima will (often) cope with the unary minus in a sensible way. Next step You should now be able to determine when it is sensible to turn off simplification. If you have been following this quick-start guide, you should already know some steps you can take to improve this question. For example, you could add more specific feedback , randomise your question and add question tests . The next part of the authoring quick start guide looks at setting up a quiz .","title":"Authoring quick start 7: turning simplification off"},{"location":"en/Authoring/Authoring_quick_start_7/#authoring-quick-start-7-turning-simplification-off","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with turning simplification off. The following video explains the process:","title":"Authoring quick start 7: turning simplification off"},{"location":"en/Authoring/Authoring_quick_start_7/#example-question","text":"Given a complex number z=ae^{ib} , determine z^{n} . Where a , b and n are randomly generated numbers.","title":"Example question"},{"location":"en/Authoring/Authoring_quick_start_7/#simplification-off","text":"It is tempting when writing questions such as this to operate at the level of display. We could randomly generate a , b and n and insert them into the question text. For example: \\(({@aa@}e^{{@bb@} i})^{@nn@}\\) What we are doing here is treating every variable separately instead of creating a single CAS object for the complex number. This is ok, but causes problems and is difficult to read because it mixes CAS and LaTeX. Hence, we would much rather have everything in one CAS object that is not simplified. The following is a single Maxima expression: {@(aa*%e^(bb*%i))^nn@} (Notice that we are using variables names with more than one character. This is good practice, as single-character variables are meant for student input. Notice also that we precede standard mathematical variables with % when writing in Maxima. This is not mandatory, but is considered good practice.) Of course, we don't want Maxima to actually calculate the power just to represent it! To see the difference, copy the following a STACK question's question variables: simp:true; a1: (3*%e^(%i*%pi/2))^4; simp:false; a2: (3*%e^(%i*%pi/2))^4; Then type Simplified: {@a1@} Not simplified: {@a2@} somewhere in the question text. Preview to see the difference. Solving problems at the level of the CAS instead at the level of the display is often better. To tell STACK to set simp:false throughout the question, scroll towards the bottom of the form and under Options , set Question-level simplify to No . Now Maxima will not simplify expressions before displaying them, so {@2+5@} will display as 2+5 instead of 7 . This does have some drawbacks. Having switched off all simplification, we now need to turn it back on selectively! There are two ways to do this. Firstly, we can use commands of the following type: aa : ev(2+rand(10),simp); In particular, we can define the question variables as follows. aa : ev(2+rand(10),simp); bb : ev(2+rand(10),simp); nn : ev(2+rand(5),simp); qq : (aa*%e^(bb*%i))^nn; An alternative, when many consecutive expressions need to be simplified, is the following: simp : true; aa : 2+rand(10); bb : 2+rand(10); nn : 2+rand(5); simp : false; qq : (aa*%e^(bb*%i))^nn;","title":"Simplification off"},{"location":"en/Authoring/Authoring_quick_start_7/#unary-minus","text":"The particular circumstances will dictate if it is better to have lots of variables and use the display, or whether to turn simp:false and work with this. A common problem arises with the unary minus. Consider a question text such as Find {@aa@}+{@bb@} . If <code>bb</code>&lt;0 , the expression will be displayed as 3+-5 , for example. While simplification is \"off\", the display routines in Maxima will (often) cope with the unary minus in a sensible way.","title":"Unary minus"},{"location":"en/Authoring/Authoring_quick_start_7/#next-step","text":"You should now be able to determine when it is sensible to turn off simplification. If you have been following this quick-start guide, you should already know some steps you can take to improve this question. For example, you could add more specific feedback , randomise your question and add question tests .","title":"Next step"},{"location":"en/Authoring/Authoring_quick_start_7/#the-next-part-of-the-authoring-quick-start-guide-looks-at-setting-up-a-quiz","text":"","title":"The next part of the authoring quick start guide looks at setting up a quiz."},{"location":"en/Authoring/Authoring_quick_start_8/","text":"Authoring quick start 8: setting up a quiz 1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with setting up a Moodle quiz. The following video explains the process: Introduction Once you have authored questions, you will want to include these in a quiz. Alternatively, you might like to set up a quiz using the sample questions. The purpose of this document is to provide a guide, from a beginner's point of view, to some of the steps that need to be taken when setting up mathematics questions in a Moodle quiz, using the computer aided assessment package STACK. Note, this guide risks duplicating the Moodle quiz documentation, which should also be consulted. These have been edited from notes created by Dr Maureen McIver, Department of Mathematical Sciences, Loughborough University, UK, July 2016. Finding questions You need to start by identifying questions for the quiz and the easiest way to do this is to start with a question that is already written and modify it to meet your needs. If you have been following the quick start guide so far, you should also know how to write your own question from scratch. Importing questions from an existing server Let us look at how you import questions from an existing server into your server. First, you must export the existing questions: log into the module on the Moodle server from which you wish to export questions, and click on Question bank in the Administration block. Then click on Export , Click on Moodle XML format , then choose the category you want to export. Moodle only lets you export individual categories. Click on Export questions to file . This will download a file with the all the questions that category. To import these questions into your course: Log into your module on the Moodle server and click on Question bank in the Administration block, Click on Import , Click on Moodle XML format then drag and drop the ?.xml file from your Downloads folder on your desktop, and click Import and then Continue . A copy of the questions should then appear in the question bank for your module and you can modify them as you want. Constructing a Moodle quiz Once you have constructed a question bank (either by importing them or writing them yourselves) you can put them into a Moodle quiz. Included within the STACK sample materials is a \"Syntax quiz\", and it is recommended that you put a copy of this on your own page. This lets students can practice the syntax of how to enter answers into a STACK quiz before they try a specific quiz for your module, and also checks that they can read the mathematics on their machine. Question behaviours Question behaviours dictate how many attempts students are given and how penalties are distributed. There are a number of question behaviours available for a Moodle quiz. The most important are: Immediate feedback , which only lets students have one try at each question, but gives feedback either immediately after answering a question, or only when all questions are answered and submitted. This is useful for standard formative/summative quizzes. Deferred feedback , which only lets students have one try at each question, and does not give feedback until after some given date. This is useful for examinations and coursework quizzes where you don't want students to share worked solutions. Interactive with multiple tries , which lets students have a finite amount of tries to solve the question, with a hint being displayed after each. It deducts a penalty mark for each incorrect attempt. This is useful for formative quizzes where you want to give hints. Note that the amount of attempts is set as one more than the amount of Hints given in each question. Hints are found under the Options section when editing a question. Adaptive , which lets the student have as many tries as they want, but deducts a penalty from the total score of the question for each time the student got the answer wrong. This is useful for testing questions and for informal practice quizzes. Setting up the quiz Go to the Moodle page and click Turn editing on . Go to the block where you want to put the quiz or add an additional block and click Add an activity or resource , click Quiz and then Add . Give the quiz a name and put any description you want in the Description box. LaTeX can be used here if you want. Click on Timing and fix the opening and closing times. Click on Grade and fix the Attempts allowed . E.g. you could use Unlimited for a practice quiz and 1 for a coursework quiz. Click on Question behaviour and choose your desired question behaviour, as discussed above. Under Review options , you can choose what students are allowed to see during or after the quiz. This includes options such as whether their answer is correct, their mark and feedback. We recommend turning off Right answer for both practice and coursework quizzes, and allowing General feedback (worked solution) to be on for a practice quiz, but off for coursework quizzes. Finish by clicking Save and return to course . You can toggle whether students can see the quiz/topic by clicking Edit and Show . Note, the Moodle question bank will automatically create a category for the quiz. It is sometimes sensible to put all the questions used in the quiz into this category, but note that you will only see the category if you have previously navigated to the quiz. Adding questions Click on the quiz, and then Edit quiz . Click Add then click from question bank , select a category then one or more of the STACK questions you have created. Click Add selected questions to the quiz then click Save and return to the main module page. To preview the quiz, click on it, then click Preview quiz now . Extra time If you have students who need extra time you need to set up Groups with these students in. Here is an example for a group of students who need 25% extra time. Under Course Adminstration , click on Users , then Groups , then Create group . Give the group a name, e.g. \"25% extra time\". You can put more details of who the group is for in the Group description box. Click Save changes . Add/remove users , then click on the ID for a particular student for this group and click Add to put them in the group. Repeat for each student who needs to be in this group. Go back and click on the Moodle quiz. In the Quiz Adminstration , click on Group overrides , then click Add group override , choose the relevant group, set the appropriate Time limit for the quiz for that group and click Save . Viewing results To see the students' results in for a particular quiz, go the the quiz, then under Quiz adminstration click on Results , then Grades . This will let you see all attempts, with the overall grade and the grade for each question. You can choose to download the results in Excel here as well. Next steps You should now be able to work with quizzes in Moodle. This concludes the authoring quick start guide. The STACK documentation is comprehensive, and there are many things you might want to look at next. For example, you can learn about more input types , learn about more answer tests , add plots to your CASText fields, add support for multiple languages , learn about using equivalence reasoning , read about Curve sketching . look at more information on Maxima , particularly the Maxima documentation if you are not very familiar with Maxima's syntax and function names. A graphical Maxima interface like wxMaxima can also be very helpful for finding the appropriate Maxima commands easily.","title":"Authoring quick start 8: setting up a quiz"},{"location":"en/Authoring/Authoring_quick_start_8/#authoring-quick-start-8-setting-up-a-quiz","text":"1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - Multipart questions | 7 - Simplification | 8 - Quizzes This part of the authoring quick start guide deals with setting up a Moodle quiz. The following video explains the process:","title":"Authoring quick start 8: setting up a quiz"},{"location":"en/Authoring/Authoring_quick_start_8/#introduction","text":"Once you have authored questions, you will want to include these in a quiz. Alternatively, you might like to set up a quiz using the sample questions. The purpose of this document is to provide a guide, from a beginner's point of view, to some of the steps that need to be taken when setting up mathematics questions in a Moodle quiz, using the computer aided assessment package STACK. Note, this guide risks duplicating the Moodle quiz documentation, which should also be consulted. These have been edited from notes created by Dr Maureen McIver, Department of Mathematical Sciences, Loughborough University, UK, July 2016.","title":"Introduction"},{"location":"en/Authoring/Authoring_quick_start_8/#finding-questions","text":"You need to start by identifying questions for the quiz and the easiest way to do this is to start with a question that is already written and modify it to meet your needs. If you have been following the quick start guide so far, you should also know how to write your own question from scratch.","title":"Finding questions"},{"location":"en/Authoring/Authoring_quick_start_8/#importing-questions-from-an-existing-server","text":"Let us look at how you import questions from an existing server into your server. First, you must export the existing questions: log into the module on the Moodle server from which you wish to export questions, and click on Question bank in the Administration block. Then click on Export , Click on Moodle XML format , then choose the category you want to export. Moodle only lets you export individual categories. Click on Export questions to file . This will download a file with the all the questions that category. To import these questions into your course: Log into your module on the Moodle server and click on Question bank in the Administration block, Click on Import , Click on Moodle XML format then drag and drop the ?.xml file from your Downloads folder on your desktop, and click Import and then Continue . A copy of the questions should then appear in the question bank for your module and you can modify them as you want.","title":"Importing questions from an existing server"},{"location":"en/Authoring/Authoring_quick_start_8/#constructing-a-moodle-quiz","text":"Once you have constructed a question bank (either by importing them or writing them yourselves) you can put them into a Moodle quiz. Included within the STACK sample materials is a \"Syntax quiz\", and it is recommended that you put a copy of this on your own page. This lets students can practice the syntax of how to enter answers into a STACK quiz before they try a specific quiz for your module, and also checks that they can read the mathematics on their machine.","title":"Constructing a Moodle quiz"},{"location":"en/Authoring/Authoring_quick_start_8/#question-behaviours","text":"Question behaviours dictate how many attempts students are given and how penalties are distributed. There are a number of question behaviours available for a Moodle quiz. The most important are: Immediate feedback , which only lets students have one try at each question, but gives feedback either immediately after answering a question, or only when all questions are answered and submitted. This is useful for standard formative/summative quizzes. Deferred feedback , which only lets students have one try at each question, and does not give feedback until after some given date. This is useful for examinations and coursework quizzes where you don't want students to share worked solutions. Interactive with multiple tries , which lets students have a finite amount of tries to solve the question, with a hint being displayed after each. It deducts a penalty mark for each incorrect attempt. This is useful for formative quizzes where you want to give hints. Note that the amount of attempts is set as one more than the amount of Hints given in each question. Hints are found under the Options section when editing a question. Adaptive , which lets the student have as many tries as they want, but deducts a penalty from the total score of the question for each time the student got the answer wrong. This is useful for testing questions and for informal practice quizzes.","title":"Question behaviours"},{"location":"en/Authoring/Authoring_quick_start_8/#setting-up-the-quiz","text":"Go to the Moodle page and click Turn editing on . Go to the block where you want to put the quiz or add an additional block and click Add an activity or resource , click Quiz and then Add . Give the quiz a name and put any description you want in the Description box. LaTeX can be used here if you want. Click on Timing and fix the opening and closing times. Click on Grade and fix the Attempts allowed . E.g. you could use Unlimited for a practice quiz and 1 for a coursework quiz. Click on Question behaviour and choose your desired question behaviour, as discussed above. Under Review options , you can choose what students are allowed to see during or after the quiz. This includes options such as whether their answer is correct, their mark and feedback. We recommend turning off Right answer for both practice and coursework quizzes, and allowing General feedback (worked solution) to be on for a practice quiz, but off for coursework quizzes. Finish by clicking Save and return to course . You can toggle whether students can see the quiz/topic by clicking Edit and Show . Note, the Moodle question bank will automatically create a category for the quiz. It is sometimes sensible to put all the questions used in the quiz into this category, but note that you will only see the category if you have previously navigated to the quiz.","title":"Setting up the quiz"},{"location":"en/Authoring/Authoring_quick_start_8/#adding-questions","text":"Click on the quiz, and then Edit quiz . Click Add then click from question bank , select a category then one or more of the STACK questions you have created. Click Add selected questions to the quiz then click Save and return to the main module page. To preview the quiz, click on it, then click Preview quiz now .","title":"Adding questions"},{"location":"en/Authoring/Authoring_quick_start_8/#extra-time","text":"If you have students who need extra time you need to set up Groups with these students in. Here is an example for a group of students who need 25% extra time. Under Course Adminstration , click on Users , then Groups , then Create group . Give the group a name, e.g. \"25% extra time\". You can put more details of who the group is for in the Group description box. Click Save changes . Add/remove users , then click on the ID for a particular student for this group and click Add to put them in the group. Repeat for each student who needs to be in this group. Go back and click on the Moodle quiz. In the Quiz Adminstration , click on Group overrides , then click Add group override , choose the relevant group, set the appropriate Time limit for the quiz for that group and click Save .","title":"Extra time"},{"location":"en/Authoring/Authoring_quick_start_8/#viewing-results","text":"To see the students' results in for a particular quiz, go the the quiz, then under Quiz adminstration click on Results , then Grades . This will let you see all attempts, with the overall grade and the grade for each question. You can choose to download the results in Excel here as well.","title":"Viewing results"},{"location":"en/Authoring/Authoring_quick_start_8/#next-steps","text":"You should now be able to work with quizzes in Moodle. This concludes the authoring quick start guide. The STACK documentation is comprehensive, and there are many things you might want to look at next. For example, you can learn about more input types , learn about more answer tests , add plots to your CASText fields, add support for multiple languages , learn about using equivalence reasoning , read about Curve sketching . look at more information on Maxima , particularly the Maxima documentation if you are not very familiar with Maxima's syntax and function names. A graphical Maxima interface like wxMaxima can also be very helpful for finding the appropriate Maxima commands easily.","title":"Next steps"},{"location":"en/Authoring/CASText/","text":"CASText Introduction CASText is CAS-enabled text. CASText is simply HTML into which LaTeX mathematics and CAS commands can be embedded. These CAS commands are executed before the question is displayed to the user. Use only simple LaTeX mathematics structures . Only a small part of core LaTeX is supported. Many of the fields in a STACK question, such as the question text, are of this type. Information about Basic HTML is available elsewhere. Currently STACK does not process the LaTeX itself. It is displayed on the user's browser in a variety of ways, such as using MathJax . If you do not know how to use LaTeX, some simple examples are given in the author FAQ . Anything enclosed between \\( .... \\) symbols is treated as an inline equation , as is the case with normal LaTeX. Anything enclosed between matching \\[ and \\] is treated as a displayed equation , in the centre of a new line. We do not support the use of dollar symbols such as $...$ and $$...$$ for denoting LaTeX mathematics environments. See the notes on currency below and also the page on MathJax for more information. Don't use LaTeX text formatting features such as \\\\ , instead use the HTML versions. Anything enclosed between {@ and @} delimiters is evaluated by the CAS and replaced by the LaTeX representing the result. Some notes. By default this is displayed as an inline equation . This is analogous to using LaTeX symbols. Note however, that you don't need to use \\({@ stuff @}\\) , and that {@ stuff @} is sufficient. To get a displayed equation centred on a line of its own, you must use \\[{@ stuff @}\\] , as in LaTeX. The outer {} characters of {@ stuff @} will be left in the output to ensure that the output is considered as a single group by LaTeX. Anything enclosed between {# and #} delimiters is evaluated by the CAS and replaced by the Maxima representing the result. Basically, raw values usable in other tools or examples on how to input the value. If the Maxima variable x is a string then {@x@} produces the string contents without quote marks or LaTeX environment, while {#x#} produces the string contents enclosed by quote marks. If you want comma separated values without the list brackets then use {@stack_disp_comma_separate( list )@} . This function turns a list into a string representation of its arguments, without braces. Multiple CAS expressions may appear in a single LaTeX equation, as needed. For example \\[ \\frac{@p@}{@q@} \\] . Note that many problems are best solved at the level of the CAS, e.g. by defining a variable p/q in the CAS, not at the level of display. This is a design decision which needs experience to resolve efficiently in each case. For an example of this, see the example showing working . Here is an example The derivative of {@sin(1/(1+x^2))@} is \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x} \\sin \\left( \\frac{1}{x^2+1} \\right) = {@diff(sin(1/(1+x^2)),x)@} \\] You can input this as <code>{#diff(sin(1/(1+x^2)),x)#}</code> Variables CASText may depend on variables previously defined in the question variables field. Where the CASText appears in the fields of a potential response trees , the variables in the feedback variables may also be included. Question text The question text what the student actually sees. This was called \"question text\" in previous versions. It is a slightly modified form of CAS text. To allow a student to answer a question you must include an inputs in the question text. For example, students need a box into which their answer will be put. To place an input into the question enclose the name of the Maxima variable to which the student's answer is assigned between inside the following tag. If the student's answer is going to be assigned to the variable ans1 then use the tag [[input:ans1]] . You will also be required to place a corresponding tag to indicate the position of any validation feedback (whether or not this is shown to the student): [[validation:ans1]] . You can use any legitimate variable name. When the question is created this is replaced with the appropriate input . When the student answers, this variable name is available to each potential response trees . Inputs are created and deleted by adding appropriate tags to the question text. Therefore, beware if you delete the tags as this will also delete the input from the question. To place another potential response tree in the question just choose a sensible name and add in a tag [[feedback:prt1]] . These tags are replaced by appropriate feedback as necessary. Note, if you add the feedback to the question text this will always be shown by the STACK question, regardless of the quiz settings. You may prefer to place the tags in the \"specific feedback\" block of the editing form. Availability of the specific feedback is controlled by the Moodle quiz settings. There is some compromise here between the ability to position the feedback tags anywhere in the question text (e.g. next to a particular input) and control over when it is shown. This is most difficult in questions with many parts. For a single part question we recommend you use the specific feedback block. Tags can be moved anywhere within the question text. Do not place feedback tags within LaTeX equations! PRTs are created and deleted by adding appropriate tags to the question text. Therefore, beware if you delete the tags as this will also delete the PRT from the question, which may result in lost work. General feedback/Worked solution General feedback (called \"worked solution\" in previous versions) is shown to the student after they have attempted the question. Unlike feedback, which depends on the response the student gave, the same general feedback text is shown to all students. The general feedback may depend on any question variables, but may not depend on any of the inputs. While this design decision is restrictive, it is a deliberate separation of feedback which should be done via potential response trees, from a model solution to this problem which can be written before a question is deployed. CASText and currency It is common to want to use the dollar sign for currency. However, this conflicts with the use of the dollar sign for delimiters for mathematics. For this reason we discourage the use of dollars to delimit mathematics in STACK. If you are using dollars for currency then you must protect them with a backslash, i.e. \\$ , otherwise the CASText validation will fail. Facts STACK has an in-built formula sheet. This used to be called a \"hints\" system, but the word hint is used elsewhere in Moodle so this is now called \"facts\". Parts of this can be added to CASText using the fact sheet Most useful HTML HTML Paragraphs (don't forget the end tag!) <p>This is a paragraph</p> <p>This is another paragraph</p> HTML Line Breaks Use the <br /> tag if you want a line break (a new line) without starting a new paragraph: <p>This is<br />a para<br />graph with line breaks</p> Some formatting <em>This is emphasis</em> <b>This text is bold</b> <big>This text is big</big> <i>This text is italic</i> <code>This is computer output</code> This is <sub>subscript</sub> and <sup>superscript</sup> Useful LaTeX LaTeX notation can specify inline or display mode for maths by delimiting with \\( or \\[ respectively. Here are some simple examples: x^2 gives x^2 x_n gives x_n x^{2x} gives x^{2x} \\alpha\\beta gives \\alpha\\beta \\sin(3\\pi x) gives \\sin(3\\pi x) \\frac{1}{1-n^2} gives \\frac{1}{1-n^2} when inline. In display mode it gives: \\frac{1}{1-n^2} \\int_a^b x^2\\ dx gives \\int_a^b x^2\\ dx when inline. In display mode it gives: \\int_a^b x^2\\ dx There is a specific page for actuarial notation . Google Charts The Google charts API can be used to create a URL based on the random variables. Details are given in the section on plots .","title":"CASText"},{"location":"en/Authoring/CASText/#castext","text":"","title":"CASText"},{"location":"en/Authoring/CASText/#introduction","text":"CASText is CAS-enabled text. CASText is simply HTML into which LaTeX mathematics and CAS commands can be embedded. These CAS commands are executed before the question is displayed to the user. Use only simple LaTeX mathematics structures . Only a small part of core LaTeX is supported. Many of the fields in a STACK question, such as the question text, are of this type. Information about Basic HTML is available elsewhere. Currently STACK does not process the LaTeX itself. It is displayed on the user's browser in a variety of ways, such as using MathJax . If you do not know how to use LaTeX, some simple examples are given in the author FAQ . Anything enclosed between \\( .... \\) symbols is treated as an inline equation , as is the case with normal LaTeX. Anything enclosed between matching \\[ and \\] is treated as a displayed equation , in the centre of a new line. We do not support the use of dollar symbols such as $...$ and $$...$$ for denoting LaTeX mathematics environments. See the notes on currency below and also the page on MathJax for more information. Don't use LaTeX text formatting features such as \\\\ , instead use the HTML versions. Anything enclosed between {@ and @} delimiters is evaluated by the CAS and replaced by the LaTeX representing the result. Some notes. By default this is displayed as an inline equation . This is analogous to using LaTeX symbols. Note however, that you don't need to use \\({@ stuff @}\\) , and that {@ stuff @} is sufficient. To get a displayed equation centred on a line of its own, you must use \\[{@ stuff @}\\] , as in LaTeX. The outer {} characters of {@ stuff @} will be left in the output to ensure that the output is considered as a single group by LaTeX. Anything enclosed between {# and #} delimiters is evaluated by the CAS and replaced by the Maxima representing the result. Basically, raw values usable in other tools or examples on how to input the value. If the Maxima variable x is a string then {@x@} produces the string contents without quote marks or LaTeX environment, while {#x#} produces the string contents enclosed by quote marks. If you want comma separated values without the list brackets then use {@stack_disp_comma_separate( list )@} . This function turns a list into a string representation of its arguments, without braces. Multiple CAS expressions may appear in a single LaTeX equation, as needed. For example \\[ \\frac{@p@}{@q@} \\] . Note that many problems are best solved at the level of the CAS, e.g. by defining a variable p/q in the CAS, not at the level of display. This is a design decision which needs experience to resolve efficiently in each case. For an example of this, see the example showing working . Here is an example The derivative of {@sin(1/(1+x^2))@} is \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x} \\sin \\left( \\frac{1}{x^2+1} \\right) = {@diff(sin(1/(1+x^2)),x)@} \\] You can input this as <code>{#diff(sin(1/(1+x^2)),x)#}</code>","title":"Introduction"},{"location":"en/Authoring/CASText/#Variables","text":"CASText may depend on variables previously defined in the question variables field. Where the CASText appears in the fields of a potential response trees , the variables in the feedback variables may also be included.","title":"Variables"},{"location":"en/Authoring/CASText/#question_text","text":"The question text what the student actually sees. This was called \"question text\" in previous versions. It is a slightly modified form of CAS text. To allow a student to answer a question you must include an inputs in the question text. For example, students need a box into which their answer will be put. To place an input into the question enclose the name of the Maxima variable to which the student's answer is assigned between inside the following tag. If the student's answer is going to be assigned to the variable ans1 then use the tag [[input:ans1]] . You will also be required to place a corresponding tag to indicate the position of any validation feedback (whether or not this is shown to the student): [[validation:ans1]] . You can use any legitimate variable name. When the question is created this is replaced with the appropriate input . When the student answers, this variable name is available to each potential response trees . Inputs are created and deleted by adding appropriate tags to the question text. Therefore, beware if you delete the tags as this will also delete the input from the question. To place another potential response tree in the question just choose a sensible name and add in a tag [[feedback:prt1]] . These tags are replaced by appropriate feedback as necessary. Note, if you add the feedback to the question text this will always be shown by the STACK question, regardless of the quiz settings. You may prefer to place the tags in the \"specific feedback\" block of the editing form. Availability of the specific feedback is controlled by the Moodle quiz settings. There is some compromise here between the ability to position the feedback tags anywhere in the question text (e.g. next to a particular input) and control over when it is shown. This is most difficult in questions with many parts. For a single part question we recommend you use the specific feedback block. Tags can be moved anywhere within the question text. Do not place feedback tags within LaTeX equations! PRTs are created and deleted by adding appropriate tags to the question text. Therefore, beware if you delete the tags as this will also delete the PRT from the question, which may result in lost work.","title":"Question text"},{"location":"en/Authoring/CASText/#general_feedback","text":"General feedback (called \"worked solution\" in previous versions) is shown to the student after they have attempted the question. Unlike feedback, which depends on the response the student gave, the same general feedback text is shown to all students. The general feedback may depend on any question variables, but may not depend on any of the inputs. While this design decision is restrictive, it is a deliberate separation of feedback which should be done via potential response trees, from a model solution to this problem which can be written before a question is deployed.","title":"General feedback/Worked solution"},{"location":"en/Authoring/CASText/#currency","text":"It is common to want to use the dollar sign for currency. However, this conflicts with the use of the dollar sign for delimiters for mathematics. For this reason we discourage the use of dollars to delimit mathematics in STACK. If you are using dollars for currency then you must protect them with a backslash, i.e. \\$ , otherwise the CASText validation will fail.","title":"CASText and currency"},{"location":"en/Authoring/CASText/#facts","text":"STACK has an in-built formula sheet. This used to be called a \"hints\" system, but the word hint is used elsewhere in Moodle so this is now called \"facts\". Parts of this can be added to CASText using the fact sheet","title":"Facts"},{"location":"en/Authoring/CASText/#most-useful-html","text":"HTML Paragraphs (don't forget the end tag!) <p>This is a paragraph</p> <p>This is another paragraph</p> HTML Line Breaks Use the <br /> tag if you want a line break (a new line) without starting a new paragraph: <p>This is<br />a para<br />graph with line breaks</p> Some formatting <em>This is emphasis</em> <b>This text is bold</b> <big>This text is big</big> <i>This text is italic</i> <code>This is computer output</code> This is <sub>subscript</sub> and <sup>superscript</sup>","title":"Most useful HTML"},{"location":"en/Authoring/CASText/#useful-latex","text":"LaTeX notation can specify inline or display mode for maths by delimiting with \\( or \\[ respectively. Here are some simple examples: x^2 gives x^2 x_n gives x_n x^{2x} gives x^{2x} \\alpha\\beta gives \\alpha\\beta \\sin(3\\pi x) gives \\sin(3\\pi x) \\frac{1}{1-n^2} gives \\frac{1}{1-n^2} when inline. In display mode it gives: \\frac{1}{1-n^2} \\int_a^b x^2\\ dx gives \\int_a^b x^2\\ dx when inline. In display mode it gives: \\int_a^b x^2\\ dx There is a specific page for actuarial notation .","title":"Useful LaTeX"},{"location":"en/Authoring/CASText/#google-charts","text":"The Google charts API can be used to create a URL based on the random variables. Details are given in the section on plots .","title":"Google Charts"},{"location":"en/Authoring/Curve_sketching/","text":"Curve sketching At its core, STACK is built to take algebraic input from students. This makes assessing skills regarding curve sketching difficult to implement. This page will take a look at how people have assessed curve sketching in STACK, including some promising projects and alternatives. GeoGebra GeoGebra is a flexible tool for creating a large number of interactive math applets. Applets like this one (by pirsquared) show that GeoGebra is capable of creating applets that assess at least some competencies of curve sketching (in this case, finding axis intersects). GeoGebra has a strong user base and there is a large number of user-created resources that can be used in a course. These can then easily be embedded in a STACK question with an <iframe> environment. Please note that the GeoGebra's license does not match the STACK licence . JSXGraph STACK has native support for the mathematics visualisation system JSXGraph . Recently, there have been attempts to use JSXGraph to assess curve sketching in STACK. In particular, see the work done by Tobias Mai and Alexander Meyer in developing a JSXGraph applet that lets students sketch curves by a trace of points. The applet can determine how accurate the sketch is and provide specific feedback. Future developments include support for randomisation and interface improvements. More information, including contact information, can be found in their paper \"Sketching functions as a digital task with automated feedback\" . Alternatives to curve sketching What are the competencies that teachers are looking for when they want to test curve sketching? The answer is not clear. When teaching students about polynomials, let's say you want to give a student a function and ensure they can identify x and y-intercepts, stationary points and the general shapes of its curve. There are ways to assess these competencies without using curve sketching, for example by a multiple choice question like the one below, from \"Fundamentals of Algebra and Calculus\". However, note the limitations of MCQ's as discussed in Philosophy of STACK . Contributing We are eager to find a solid way of assessing this competency in STACK. We would appreciate any contributions that help solve this problem. Please contact the developers .","title":"Curve sketching"},{"location":"en/Authoring/Curve_sketching/#curve-sketching","text":"At its core, STACK is built to take algebraic input from students. This makes assessing skills regarding curve sketching difficult to implement. This page will take a look at how people have assessed curve sketching in STACK, including some promising projects and alternatives.","title":"Curve sketching"},{"location":"en/Authoring/Curve_sketching/#geogebra","text":"GeoGebra is a flexible tool for creating a large number of interactive math applets. Applets like this one (by pirsquared) show that GeoGebra is capable of creating applets that assess at least some competencies of curve sketching (in this case, finding axis intersects). GeoGebra has a strong user base and there is a large number of user-created resources that can be used in a course. These can then easily be embedded in a STACK question with an <iframe> environment. Please note that the GeoGebra's license does not match the STACK licence .","title":"GeoGebra"},{"location":"en/Authoring/Curve_sketching/#jsxgraph","text":"STACK has native support for the mathematics visualisation system JSXGraph . Recently, there have been attempts to use JSXGraph to assess curve sketching in STACK. In particular, see the work done by Tobias Mai and Alexander Meyer in developing a JSXGraph applet that lets students sketch curves by a trace of points. The applet can determine how accurate the sketch is and provide specific feedback. Future developments include support for randomisation and interface improvements. More information, including contact information, can be found in their paper \"Sketching functions as a digital task with automated feedback\" .","title":"JSXGraph"},{"location":"en/Authoring/Curve_sketching/#alternatives-to-curve-sketching","text":"What are the competencies that teachers are looking for when they want to test curve sketching? The answer is not clear. When teaching students about polynomials, let's say you want to give a student a function and ensure they can identify x and y-intercepts, stationary points and the general shapes of its curve. There are ways to assess these competencies without using curve sketching, for example by a multiple choice question like the one below, from \"Fundamentals of Algebra and Calculus\". However, note the limitations of MCQ's as discussed in Philosophy of STACK .","title":"Alternatives to curve sketching"},{"location":"en/Authoring/Curve_sketching/#contributing","text":"We are eager to find a solid way of assessing this competency in STACK. We would appreciate any contributions that help solve this problem. Please contact the developers .","title":"Contributing"},{"location":"en/Authoring/Deploying/","text":"Deploying Questions in STACK can contain randomly generated elements. A student will be given a random variant of a question generated by a pseudo-random seed. Questions are not randomly generated on the fly. Instead the teacher must pre-generate and \"deploy\" variants of a question. When a student attempts the question they will be given a random selection from the deployed variants. We have chosen to add the extra deploy step, instead of generating on the fly, for a number of reasons. STACK runs all the question tests on each deployed variant to establish each variant of the question is working. This aids quality control. By using question tests it is unlikely a student will be given a random variant which does not work correctly. The teacher can decide if each deployed variant appears to be of equal difficulty. The teacher can easily delete variants they do not like. Experience suggests there are unanticipated consequences of randomly generating questions. Really only statistics generated by real use can establish fairness amongst variants. The pre-generation combined with a cache helps minimise server load during the start of a large class which aids robustness of the whole experience. This helps STACK to optimize its use of the CAS for efficiency and reliability via a dynamic cache . Notes: If an author does not deploy any variants (not advised!) then the student gets any random variant. Questions that don't use randomization cannot be deployed explicitly. STACK automatically detects randomization. Variants are different if and only if the evaluated question note is different. Any number of instances can be requested and deployed but only one instance of each question note can be deployed. It is possible to deploy n variants in one go, but the system will give up if too many duplicate question notes are generated. The teacher is responsible to ensure question variants are different if and only if the question notes are different. The deployment management also allows specific variants to be dropped. You can also return to the question preview window and try a specific deployed variant. Deployment is not required for authors to test questions: an instance is generated on-the-fly. How to deploy question variants The deployment interface can be found by editing a question and clicking on question tests and deployed variants. This link can also be found in the top right corner when previewing a question. This page contains the list of currently deployed variants, and links to un-deploy a variant. Notes: You can click on the seed numbers to view a particular random variant. The testing page lists values of all the variables, displays the question and the worked solution. The testing page is a very efficient way to look at your random variants. When you deploy new variants STACK will run all the question tests. If a test fails, the generation process will stop with an error message, showing the failing test. Limitations There is currently no way to loop systematically over all variants and deploy them all.","title":"Deploying"},{"location":"en/Authoring/Deploying/#deploying","text":"Questions in STACK can contain randomly generated elements. A student will be given a random variant of a question generated by a pseudo-random seed. Questions are not randomly generated on the fly. Instead the teacher must pre-generate and \"deploy\" variants of a question. When a student attempts the question they will be given a random selection from the deployed variants. We have chosen to add the extra deploy step, instead of generating on the fly, for a number of reasons. STACK runs all the question tests on each deployed variant to establish each variant of the question is working. This aids quality control. By using question tests it is unlikely a student will be given a random variant which does not work correctly. The teacher can decide if each deployed variant appears to be of equal difficulty. The teacher can easily delete variants they do not like. Experience suggests there are unanticipated consequences of randomly generating questions. Really only statistics generated by real use can establish fairness amongst variants. The pre-generation combined with a cache helps minimise server load during the start of a large class which aids robustness of the whole experience. This helps STACK to optimize its use of the CAS for efficiency and reliability via a dynamic cache . Notes: If an author does not deploy any variants (not advised!) then the student gets any random variant. Questions that don't use randomization cannot be deployed explicitly. STACK automatically detects randomization. Variants are different if and only if the evaluated question note is different. Any number of instances can be requested and deployed but only one instance of each question note can be deployed. It is possible to deploy n variants in one go, but the system will give up if too many duplicate question notes are generated. The teacher is responsible to ensure question variants are different if and only if the question notes are different. The deployment management also allows specific variants to be dropped. You can also return to the question preview window and try a specific deployed variant. Deployment is not required for authors to test questions: an instance is generated on-the-fly.","title":"Deploying"},{"location":"en/Authoring/Deploying/#how-to-deploy-question-variants","text":"The deployment interface can be found by editing a question and clicking on question tests and deployed variants. This link can also be found in the top right corner when previewing a question. This page contains the list of currently deployed variants, and links to un-deploy a variant. Notes: You can click on the seed numbers to view a particular random variant. The testing page lists values of all the variables, displays the question and the worked solution. The testing page is a very efficient way to look at your random variants. When you deploy new variants STACK will run all the question tests. If a test fails, the generation process will stop with an error message, showing the failing test.","title":"How to deploy question variants"},{"location":"en/Authoring/Deploying/#limitations","text":"There is currently no way to loop systematically over all variants and deploy them all.","title":"Limitations"},{"location":"en/Authoring/Equivalence_reasoning/","text":"Getting started with equivalence reasoning This guide shows you how to write STACK questions using the line by line equivalence reasoning input type. As an example, we want the students to expand the cubic (x+2)^3 showing their working in a stepwise fashion, line by line. The student's response to this question will allow us to test their knowledge and competency in the following: Expanding brackets Simplifying by collecting like terms Therefore we need them to show their working. Minimal working question Create a new STACK question, give it a suitable name and then copy the following into the Question variables box: p:(x+2)^3; taf:ev(expand(p),simp); ta:[(x+2)^3,stackeq((x+2)*(x+2)^2),stackeq((x+2)*(x^2+4*x+4)),stackeq(x^3+4*x^2+4*x+2*x^2+8*x+8),stackeq(taf)]; The first variable, p , is the expression in the question. The variable taf is the final model answer. The variable ta is a list containing each step we are expecting our students to express as they work towards the final answer: (x+2)^{3} =(x+2)(x+2)^{2} =(x+2)(x^{2}+4x+4) =x^{3}+4x^{2}+4x+2x^{2}+8x+8 =x^{3}+6x^{2}+12x+8 Notes: We use the CAS functions expand() and ev(...,simp) to simply the output of expand() , to determine the model answer. The special function stackeq is replaced by unary equals. Maxima expects equality to be an infix a=b not unary prefix =b , so STACK needs this special operator. Students using the input area can just start a line with = , but teachers cannot! In this context the teacher's answer and the student's answer is a list. The whole answer is a single object, which we assess. Copy the following text into the Question text box: Expand {@p@}, remembering to show your working. [[input:ans1]] [[validation:ans1]] Setting the input options Under the Input:ans1 header specify Equivalence reasoning from the Input type drop-down and ta as the model answer. We want students to work through the expansion one line at a time, so let's include a hint. Copy the following into the Syntax hint box, within the Input:ans1 header:: [(x+2)^3,stackeq(?)] This is a list, and uses stackeq . For students in this context, it is probably sensible to \"insert stars\" and provide the most forgiving input syntax available, but that is optional. We need to tell STACK to compare the first line of the student's working to the first line of the question. This makes sure the student \"answers the right question\". Type firstline into the Extra options box within the Input:ans1 header. This ensures a student's response will be invalid if they don't have the correct first line. Setting the potential response tree As a minimal potential response tree have one node, with Answer test = EquivFirst SAns = ans1 TAns = ta Auto-simplify = no Note, the Auto-simplify field is not in the node of the PRT, but a PRT option. Setting the question options Under the options section, turn off simplification by setting Auto-simplify = no Save the question. This should be a minimal working question, so preview it and add in at least one question test. More specific feedback At this point the question only checks Has the student started from the right expression, specifically is the first line of their argument equivalent to the first line of ta using EqualComAss test (commutativity and associativity)? Are all the lines in the student's answer algebraically equivalent? Clearly, more is needed for a complete sensible question. At this point please read the equivalence reasoning input type documentation. Getting to the right place We probably want the student to end up at the expression x^{3}+6x^{2}+12x+8 . To check is the student has reached this point, add another node to the PRT. If node 1 is true (i.e. the student started in the correct place and didn't make a mistake) then connect to node 2. Node 2 should be set up as SAns = last(ans1) TAns = last(ta) answer test = EqualComAss Auto-simplify = no This node adds in feedback to check the student has reached the right place. Note, by using EqualComAss both x^{3}+6x^{2}+12x+8 and x^{3}+x^{2}6+8+12x will be accepted. If you really want the term order as well, as in, x^{3}+6x^{2}+12x+8 then you need to use CasEqual as the answer test instead. What is a legitimate step? At this point, any expressions which are equivalent are considered to be a legitimate step. Clearly this is not entirely satisfactory. At this point in the development there is no concept of \"a step\" and indeed this appears to be very hard to define. In the future we will develop better tools for checking \"step size\", and any contributions in this direction are welcome. Teachers can check the students answer is long enough or not too long by looking at length(ta) . Teachers can check if specific expressions appear somewhere inside the student's answer. To facilitate this search we provide the function stack_equiv_find_step(ex, exl) . This looks for expression ex in the list exl using ATEqualComAss . It returns the list of indices of the position. If you just want to know if the expression is missing use the predicate emptyp . As an alternative you can check that the factored form exists somewhere in the student's answers using the following code in the feedback variables . foundfac:sublist(ans1,lambda([ex], equationp(ex) and is(rhs(ex)=0))); foundfac:ev(any_listp(lambda([ex], second(ATFacForm(lhs(ex),lhs(ex),x))), foundfac), simp); At this stage there are few in-built features within STACK. A lot is possible, but as the above example illustrates, this requires question authors to write more Maxima code than with other question types. This feature will be developed by use over the next few years. If you have experience, and views, on how this should work please contact the developers.","title":"Getting started with equivalence reasoning"},{"location":"en/Authoring/Equivalence_reasoning/#getting-started-with-equivalence-reasoning","text":"This guide shows you how to write STACK questions using the line by line equivalence reasoning input type. As an example, we want the students to expand the cubic (x+2)^3 showing their working in a stepwise fashion, line by line. The student's response to this question will allow us to test their knowledge and competency in the following: Expanding brackets Simplifying by collecting like terms Therefore we need them to show their working.","title":"Getting started with equivalence reasoning"},{"location":"en/Authoring/Equivalence_reasoning/#minimal-working-question","text":"Create a new STACK question, give it a suitable name and then copy the following into the Question variables box: p:(x+2)^3; taf:ev(expand(p),simp); ta:[(x+2)^3,stackeq((x+2)*(x+2)^2),stackeq((x+2)*(x^2+4*x+4)),stackeq(x^3+4*x^2+4*x+2*x^2+8*x+8),stackeq(taf)]; The first variable, p , is the expression in the question. The variable taf is the final model answer. The variable ta is a list containing each step we are expecting our students to express as they work towards the final answer: (x+2)^{3} =(x+2)(x+2)^{2} =(x+2)(x^{2}+4x+4) =x^{3}+4x^{2}+4x+2x^{2}+8x+8 =x^{3}+6x^{2}+12x+8 Notes: We use the CAS functions expand() and ev(...,simp) to simply the output of expand() , to determine the model answer. The special function stackeq is replaced by unary equals. Maxima expects equality to be an infix a=b not unary prefix =b , so STACK needs this special operator. Students using the input area can just start a line with = , but teachers cannot! In this context the teacher's answer and the student's answer is a list. The whole answer is a single object, which we assess. Copy the following text into the Question text box: Expand {@p@}, remembering to show your working. [[input:ans1]] [[validation:ans1]]","title":"Minimal working question"},{"location":"en/Authoring/Equivalence_reasoning/#setting-the-input-options","text":"Under the Input:ans1 header specify Equivalence reasoning from the Input type drop-down and ta as the model answer. We want students to work through the expansion one line at a time, so let's include a hint. Copy the following into the Syntax hint box, within the Input:ans1 header:: [(x+2)^3,stackeq(?)] This is a list, and uses stackeq . For students in this context, it is probably sensible to \"insert stars\" and provide the most forgiving input syntax available, but that is optional. We need to tell STACK to compare the first line of the student's working to the first line of the question. This makes sure the student \"answers the right question\". Type firstline into the Extra options box within the Input:ans1 header. This ensures a student's response will be invalid if they don't have the correct first line.","title":"Setting the input options"},{"location":"en/Authoring/Equivalence_reasoning/#setting-the-potential-response-tree","text":"As a minimal potential response tree have one node, with Answer test = EquivFirst SAns = ans1 TAns = ta Auto-simplify = no Note, the Auto-simplify field is not in the node of the PRT, but a PRT option.","title":"Setting the potential response tree"},{"location":"en/Authoring/Equivalence_reasoning/#setting-the-question-options","text":"Under the options section, turn off simplification by setting Auto-simplify = no Save the question. This should be a minimal working question, so preview it and add in at least one question test.","title":"Setting the question options"},{"location":"en/Authoring/Equivalence_reasoning/#more-specific-feedback","text":"At this point the question only checks Has the student started from the right expression, specifically is the first line of their argument equivalent to the first line of ta using EqualComAss test (commutativity and associativity)? Are all the lines in the student's answer algebraically equivalent? Clearly, more is needed for a complete sensible question. At this point please read the equivalence reasoning input type documentation.","title":"More specific feedback"},{"location":"en/Authoring/Equivalence_reasoning/#getting-to-the-right-place","text":"We probably want the student to end up at the expression x^{3}+6x^{2}+12x+8 . To check is the student has reached this point, add another node to the PRT. If node 1 is true (i.e. the student started in the correct place and didn't make a mistake) then connect to node 2. Node 2 should be set up as SAns = last(ans1) TAns = last(ta) answer test = EqualComAss Auto-simplify = no This node adds in feedback to check the student has reached the right place. Note, by using EqualComAss both x^{3}+6x^{2}+12x+8 and x^{3}+x^{2}6+8+12x will be accepted. If you really want the term order as well, as in, x^{3}+6x^{2}+12x+8 then you need to use CasEqual as the answer test instead.","title":"Getting to the right place"},{"location":"en/Authoring/Equivalence_reasoning/#what-is-a-legitimate-step","text":"At this point, any expressions which are equivalent are considered to be a legitimate step. Clearly this is not entirely satisfactory. At this point in the development there is no concept of \"a step\" and indeed this appears to be very hard to define. In the future we will develop better tools for checking \"step size\", and any contributions in this direction are welcome. Teachers can check the students answer is long enough or not too long by looking at length(ta) . Teachers can check if specific expressions appear somewhere inside the student's answer. To facilitate this search we provide the function stack_equiv_find_step(ex, exl) . This looks for expression ex in the list exl using ATEqualComAss . It returns the list of indices of the position. If you just want to know if the expression is missing use the predicate emptyp . As an alternative you can check that the factored form exists somewhere in the student's answers using the following code in the feedback variables . foundfac:sublist(ans1,lambda([ex], equationp(ex) and is(rhs(ex)=0))); foundfac:ev(any_listp(lambda([ex], second(ATFacForm(lhs(ex),lhs(ex),x))), foundfac), simp); At this stage there are few in-built features within STACK. A lot is possible, but as the above example illustrates, this requires question authors to write more Maxima code than with other question types. This feature will be developed by use over the next few years. If you have experience, and views, on how this should work please contact the developers.","title":"What is a legitimate step?"},{"location":"en/Authoring/Fact_sheets/","text":"Hints STACK contains a \"formula sheet\" of useful fragments which a teacher may wish to include in a consistent way. This is achieved through the \"hints\" system. Hints can be included in any CASText . To include a hint, use the syntax [[facts:tag]] The \"tag\" is chosen from the list below. All supported fact sheets [[ALL_FACTS]]","title":"Hints"},{"location":"en/Authoring/Fact_sheets/#hints","text":"STACK contains a \"formula sheet\" of useful fragments which a teacher may wish to include in a consistent way. This is achieved through the \"hints\" system. Hints can be included in any CASText . To include a hint, use the syntax [[facts:tag]] The \"tag\" is chosen from the list below.","title":"Hints"},{"location":"en/Authoring/Fact_sheets/#all-supported-fact-sheets","text":"[[ALL_FACTS]]","title":"All supported fact sheets"},{"location":"en/Authoring/Feedback/","text":"Feedback The purpose of STACK is to assess students' answers to mathematical questions, and on the basis of the properties we establish to assign feedback . This document describes the ways STACK provides feedback to students. It will not go into much depth on creating the feedback, which is documented under potential response trees . Types of assessment Formative assessment is to support and inform students' learning. Feedback here could be qualitative , e.g. written comments tailored to the student's answer and designed to help them improve their performance on the task. Summative assessment is to establish the achievement of the student. In mathematics, summative feedback is most often quantitative , either a mark or a percentage. Evaluative assessment is to measure the effectiveness of the teaching or the assessment of students. Such assessments could have quality enhancement or quality audit functions. See reporting . The ability to automatically generate data about an individual student or across a cohort is one particular strength of CAA, potentially enabling regular, detailed evaluative assessment. In STACK multi-part questions there is a complete separation between two important components. a list of inputs a list of potential response trees Specific feedback is associated with each input and each potential response tree. Typically, it is placed in the Specific feedback section, as that gives Moodle more control over when it is shown. However, the feedback tags can be positioned anywhere within the question text . Validation Before an input is available to a potential response trees , it must be validated. In particular, at each attempt, each input is assigned a status. NULL, which indicates the field has not been previously given a value by the student, or the field is now empty since the student has deleted an answer. new, indicates an answer has not been validated or assessed, but has been changed from a previous attempt. invalid, which indicates that the field is not valid. valid, a response which is valid but not scored. score. In this case, the answer is available to any potential response tree requiring it. Normally a student will view a displayed form of their expression and submit it again. This default behaviour is inappropriate for multiple choice/selection interactions, and can be changed for each input using the option \"Student must verify\". Whether the student's answer is echoed back and shown is controlled by a separate option \"Show the validation\". Validation errors are always shown. Whether a string entered by the student is valid or invalid does not depend on the question. I.e. there should be a consistent mechanism for what constitutes a syntactically valid expression. However, in practice things are not quite so clean! Some input options do affect validity, such as forbid floats . Some symbols, e.g. i and j change meaning in different contexts, e.g. \\sqrt{-1} or vector components. See details about options . Potential response trees Each potential response tree returns three outcomes: a numerical score, text for the students, an answer note for use by the teacher during reporting . These correspond approximately to summative, formative and evaluative functions of assessment respectively. The general feedback (known as worked solution in previous versions) is fixed and may not depend on the student's answers. Hence it is not considered to be feedback to the student's work in the strict sense. However, it remains a very useful outcome for students. The amount of feedback available in each question is governed by the question behaviours. Numerical score Each potential response tree calculates a numerical score between 0 and 1. This is then multiplied by the question value for each potential response tree. The final score for the question is the sum over all potential response trees. The numerical scores are assembled by traversing each potential response tree. Each branch of each node can add, subtract or set an absolute, score. The outcome at the end should be between 0 and 1. If the score, s , lies outside this range it is taken to be \\min(\\max(s,0),1) to bring it within range, then it is scaled by multiplying by the question value for that potential response tree. A \"penalty\" may also set in the potential response tree for this attempt. Normally the penalty field in each branch of the potential response tree is empty, in which case the question level penalty value is used. However, these fields are useful to remove any penalty for this outcome, by setting it to zero explicitly. After the whole tree has been traversed, if the score is 1 then the penalty is always assigned to 0. STACK adjusts the score for each potential response tree, based on the number of valid, different attempts. The penalty scheme deducts from the score a small amount (default is 0.1=10\\% ) for each different and valid attempt which is not completely correct. It is designed to reward persistence and diligence when students initially get a question wrong, but they try again. It works in the following way. For each attempt k , we let s_k be the score from the potential response tree. p_k be the \"penalty\" as follows: If s_k=1 then p_k=0 , else If the penalty p set in the last branch traversed before exiting the potential response tree is not NULL then p_k=p , else p_k is the penalty set in the question options, (default 0.1=10\\% ). The default penalty scheme takes the maximum score for each attempt, so that by accruing further penalties a student may never be worse off. To be specific Let (s_i,p_i) for i=1,\\cdots n be the list of scores and penalties for a particular potential response tree, for each different valid attempt. The score for attempt k is defined to be \\mbox{Question value} \\times \\max\\left\\{ s_i-\\sum_{j=1}^i p_j,\\ i=1,\\cdots k \\right\\}. Notice that this is purely a function of a list of (score, penalty) pairs. The score for that attempt is the sum of the marks for each potential response tree once penalties have been deducted from each tree. Text for the student The text-based feedback for students is a concatenation of the following elements. Answer test feedback. Many of the answer tests generate feedback of their own. This can be suppressed using the quiet option. While this feedback is often not needed, it would be very difficult for the teacher to re-create this. Bespoke feedback. Each branch of the potential response trees generates some feedback. Generic feedback. Once the potential response trees has been traversed and all feedback assigned, the score is used to generate some generic feedback. If the raw score equals 0 then the default feedback is Incorrect answer . If the raw score equals 1 then the default feedback is Correct answer, well done . Otherwise the generic feedback is Your answer is partially correct . These strings can be modified in the options .","title":"Feedback"},{"location":"en/Authoring/Feedback/#feedback","text":"The purpose of STACK is to assess students' answers to mathematical questions, and on the basis of the properties we establish to assign feedback . This document describes the ways STACK provides feedback to students. It will not go into much depth on creating the feedback, which is documented under potential response trees .","title":"Feedback"},{"location":"en/Authoring/Feedback/#types-of-assessment","text":"Formative assessment is to support and inform students' learning. Feedback here could be qualitative , e.g. written comments tailored to the student's answer and designed to help them improve their performance on the task. Summative assessment is to establish the achievement of the student. In mathematics, summative feedback is most often quantitative , either a mark or a percentage. Evaluative assessment is to measure the effectiveness of the teaching or the assessment of students. Such assessments could have quality enhancement or quality audit functions. See reporting . The ability to automatically generate data about an individual student or across a cohort is one particular strength of CAA, potentially enabling regular, detailed evaluative assessment. In STACK multi-part questions there is a complete separation between two important components. a list of inputs a list of potential response trees Specific feedback is associated with each input and each potential response tree. Typically, it is placed in the Specific feedback section, as that gives Moodle more control over when it is shown. However, the feedback tags can be positioned anywhere within the question text .","title":"Types of assessment"},{"location":"en/Authoring/Feedback/#validation","text":"Before an input is available to a potential response trees , it must be validated. In particular, at each attempt, each input is assigned a status. NULL, which indicates the field has not been previously given a value by the student, or the field is now empty since the student has deleted an answer. new, indicates an answer has not been validated or assessed, but has been changed from a previous attempt. invalid, which indicates that the field is not valid. valid, a response which is valid but not scored. score. In this case, the answer is available to any potential response tree requiring it. Normally a student will view a displayed form of their expression and submit it again. This default behaviour is inappropriate for multiple choice/selection interactions, and can be changed for each input using the option \"Student must verify\". Whether the student's answer is echoed back and shown is controlled by a separate option \"Show the validation\". Validation errors are always shown. Whether a string entered by the student is valid or invalid does not depend on the question. I.e. there should be a consistent mechanism for what constitutes a syntactically valid expression. However, in practice things are not quite so clean! Some input options do affect validity, such as forbid floats . Some symbols, e.g. i and j change meaning in different contexts, e.g. \\sqrt{-1} or vector components. See details about options .","title":"Validation"},{"location":"en/Authoring/Feedback/#potential-response-trees","text":"Each potential response tree returns three outcomes: a numerical score, text for the students, an answer note for use by the teacher during reporting . These correspond approximately to summative, formative and evaluative functions of assessment respectively. The general feedback (known as worked solution in previous versions) is fixed and may not depend on the student's answers. Hence it is not considered to be feedback to the student's work in the strict sense. However, it remains a very useful outcome for students. The amount of feedback available in each question is governed by the question behaviours.","title":"Potential response trees"},{"location":"en/Authoring/Feedback/#numerical-score","text":"Each potential response tree calculates a numerical score between 0 and 1. This is then multiplied by the question value for each potential response tree. The final score for the question is the sum over all potential response trees. The numerical scores are assembled by traversing each potential response tree. Each branch of each node can add, subtract or set an absolute, score. The outcome at the end should be between 0 and 1. If the score, s , lies outside this range it is taken to be \\min(\\max(s,0),1) to bring it within range, then it is scaled by multiplying by the question value for that potential response tree. A \"penalty\" may also set in the potential response tree for this attempt. Normally the penalty field in each branch of the potential response tree is empty, in which case the question level penalty value is used. However, these fields are useful to remove any penalty for this outcome, by setting it to zero explicitly. After the whole tree has been traversed, if the score is 1 then the penalty is always assigned to 0. STACK adjusts the score for each potential response tree, based on the number of valid, different attempts. The penalty scheme deducts from the score a small amount (default is 0.1=10\\% ) for each different and valid attempt which is not completely correct. It is designed to reward persistence and diligence when students initially get a question wrong, but they try again. It works in the following way. For each attempt k , we let s_k be the score from the potential response tree. p_k be the \"penalty\" as follows: If s_k=1 then p_k=0 , else If the penalty p set in the last branch traversed before exiting the potential response tree is not NULL then p_k=p , else p_k is the penalty set in the question options, (default 0.1=10\\% ). The default penalty scheme takes the maximum score for each attempt, so that by accruing further penalties a student may never be worse off. To be specific Let (s_i,p_i) for i=1,\\cdots n be the list of scores and penalties for a particular potential response tree, for each different valid attempt. The score for attempt k is defined to be \\mbox{Question value} \\times \\max\\left\\{ s_i-\\sum_{j=1}^i p_j,\\ i=1,\\cdots k \\right\\}. Notice that this is purely a function of a list of (score, penalty) pairs. The score for that attempt is the sum of the marks for each potential response tree once penalties have been deducted from each tree.","title":"Numerical score"},{"location":"en/Authoring/Feedback/#text-for-the-student","text":"The text-based feedback for students is a concatenation of the following elements. Answer test feedback. Many of the answer tests generate feedback of their own. This can be suppressed using the quiet option. While this feedback is often not needed, it would be very difficult for the teacher to re-create this. Bespoke feedback. Each branch of the potential response trees generates some feedback. Generic feedback. Once the potential response trees has been traversed and all feedback assigned, the score is used to generate some generic feedback. If the raw score equals 0 then the default feedback is Incorrect answer . If the raw score equals 1 then the default feedback is Correct answer, well done . Otherwise the generic feedback is Your answer is partially correct . These strings can be modified in the options .","title":"Text for the student"},{"location":"en/Authoring/Fixing_broken_questions/","text":"I have a misbehaving STACK question in a live Moodle quiz. What should I do? You can't remove or add a question to a live Moodle quiz, but you can modify it. If you edit a live STACK question then students will see the updates. There are \"regrade\" and \"dry-run regrade\" options in the Moodle quiz. If you are happy with the new behaviour of the question you can regrade. You can also manually assign a mark in the Moodle quiz. Do not change anything which alters the randomisation of variants. Students get a \"seed\" which starts the pseudo-random number generator. If your changes change the random version, then the students' previous answers will still stand, and will now most likely be \"wrong\". Minor typographical mistakes can be fixed, but often there is nothing you can do to fix seriously bad random versions. This is why we have the \"deploy\" system and question tests so question variants can be checked in advance.... The Moodle database has no \"undo\"! The best thing to do with a live question which is broken is copy it, play around and be completely sure you are happy. Then, change the live version with confidence. If you cannot apply a patch, then create a copy of the question and put it in a new category \"for next year\". It is normally best to fix it now!","title":"I have a misbehaving STACK question in a live Moodle quiz.  What should I do?"},{"location":"en/Authoring/Fixing_broken_questions/#i-have-a-misbehaving-stack-question-in-a-live-moodle-quiz-what-should-i-do","text":"You can't remove or add a question to a live Moodle quiz, but you can modify it. If you edit a live STACK question then students will see the updates. There are \"regrade\" and \"dry-run regrade\" options in the Moodle quiz. If you are happy with the new behaviour of the question you can regrade. You can also manually assign a mark in the Moodle quiz. Do not change anything which alters the randomisation of variants. Students get a \"seed\" which starts the pseudo-random number generator. If your changes change the random version, then the students' previous answers will still stand, and will now most likely be \"wrong\". Minor typographical mistakes can be fixed, but often there is nothing you can do to fix seriously bad random versions. This is why we have the \"deploy\" system and question tests so question variants can be checked in advance.... The Moodle database has no \"undo\"! The best thing to do with a live question which is broken is copy it, play around and be completely sure you are happy. Then, change the live version with confidence. If you cannot apply a patch, then create a copy of the question and put it in a new category \"for next year\". It is normally best to fix it now!","title":"I have a misbehaving STACK question in a live Moodle quiz.  What should I do?"},{"location":"en/Authoring/Future_proof/","text":"Guidelines for ensuring that a question works in the future Creating a great STACK question takes effort and often people worry about how updating STACK or Moodle or other components running those questions might affect their questions. While there are no guarantees you can increase the ongoing reliability of your questions by taking the following things into account. In some parts of this document we mention \"Abacus\". The Abacus project is a STACK material sharing organisation that seeks to develop high-quality materials to be implemented following these guidelines. This document ends with additional guidelines adopted by Abacus. This is both good practice, and will be relevant if you ever intend to join Abacus. The most important things are listed here. More detail is below. Build questions so that it is possible to detect changes in the platform. All questions must have \"question tests\", which allow unit testing of each question variant. Use simple correct HTML with all closing tags, avoiding explicit style of your own. Use only simple core LaTeX Maths environments/commands, with only \\(...\\) and \\[...\\] as the maths delimiters. Avoid linking to externally hosted content, such as pictures and applets. End Maxima commands with a semi-colon ; . Add comments to your Maxima code. Writing CASText CASText is the definition of the visible parts of the question, the bit where you pose the problem to the student lay out the equations and inputs and possibly draw fancy graphics. Technically, CASText is an HTML-document fragment with inline LaTeX equations and possible logic in the form of CASText blocks. To ease parsing of CASText you should ensure that you are writing valid (X)HTML i.e. make sure that all the tags get closed and that you are not placing block level elements in places where they do not belong. <span><div>...</div></span> is bad while <div><span>...</span></div> might be less bad. In the case of LaTeX using \\(...\\) instead of $...$ and \\[...\\] instead of $$...$$ , in Abacus $ -delimiters for LaTeX are strictly forbidden . (There is a simplistic auto-convert to help with a one-time conversion.) To ensure consistent presentation you should avoid using inline CSS styles in your CASText, as the styles of the surrounding system may change and cause conflicts. In general all styles are bad with the sole exception being text-align in the context of table cells. Otherwise: If at all possible remove all styles and the <span> tags related to them from the CASText. Most WYSIWYG editors have some clear formatting feature to do just that. You cannot have block level HTML elements inside a span tag, which is an inline element. You should not define font-size anywhere. If you need a heading with big text then use the <hX>...</hX> tags, but not with too small or large values of X. In Abacus <h3> and <h4> are recommended especially in model solutions. Likewise all other font stylings should be left to the surrounding system but feel free to use <i> , <b> , <em> , and <strong> if you need and assume that the surrounding system handles them correctly. You can use the <code> tag to explain how to type in answers. The top level of your CASText document should consist of <p> , <table> , <div> , or CASText block elements not of raw text. For the PRT be careful about using <p> tags (which editors hide). If you use the compact PRT style then STACK then puts this into span tags, and you cannot have block level HTML elements such as <p> inside a span tag. In the case of tables and images you may use a bit of styling, e.g. borders, paddings, margins, and sizes, but you should always use relative units when describing those sizes. Scale to match the current font-size or maybe to the width of the viewport or even to the maximum dimension of the display not to pixels as pixels have very different actual sizes on different screens and we cannot assume that the software displaying things will make the same scaling assumptions for them in the future. STACK now uses SVG, and this is preferred if you can embed this within the CASText. Only use supported JavaScript libraries, like JSXGraph. Avoid complex LaTeX constructions where you inject values into multiple places, instead try to tune Maxima LaTeX generation to meet your needs, e.g. showing working , using texput , or changing other features of Maxima constructs. If your CASText document contains scripts like JSXGraph content definitions you should ensure that if they require some external files to be evaluated you include those files with the question as links to external files will be broken at some point or the external files themselves change. In the case of JSXGraph use the jsxgraph CASText block which will handle the scripts at STACK level. All external files/links are bad! If you have images or other documents related to the question they should be included in the question. Avoid embedded frames, applets and other interactive content. To test inclusion you should be able to export the question and import it to a freshly installed raw system on a computer not connected to the internet and those questions should work. There is nothing wrong with internal files of any type, as long as they come with the question. Writing CAS code The CAS code (internally keyvals and CASStrings) consists of Maxima assignment statements. Occasionally, Maxima's behaviour changes, and occasionally there are changes in the STACK provided Maxima functions. Changes cannot be avoided, but you can try to develop your questions based on as new as possible Maxima version to give them longer life. Otherwise there are some details that should be noted: End your statements with semicolons ( ; ) this will ease your life if you ever need to copy code to Maxima for testing. In the future semicolons may become mandatory, automatic conversion will however handle that change. Avoid interesting chars in your variable names e.g. _ has meaning and it is reasonable to assume that other chars might have new meanings in the future. Never write to a variable sharing a name with an input! You should also heed to these general guidelines: Teachers answers are generally stored in variables named tAns , tans1 , or maybe TAns3 this is a pretty widely spread convention and should be followed, in general the question variables should end with a listing of assignments defining the teachers answers for each input. Should there be need to process the students answer it might make sense to store it to sAns... . texput instead of manual string construction when generating LaTeX representations will keep your code readable. Write comments! More complex code is more likely to break at some point and someone, probably you, will need to understand it and provide a replacement logic for it. Especially, long oneliners have tendency to mystically break. Question tests & teacher's answers To detect broken questions we need to be able to test them and the only reasonable way to that is through the question tests. You must define some tests: at least one for each PRT in your question. Preferably provide one correct answer test for each PRT, tests for each branch in the PRTs, and some nonsense inputs to check for 'false positive' style failures. For manual testing it is important to provide each input with the correct teacher's answer and that teacher's answer must be in a form that matches input requirements. For example, if you require a floating-point number with a specific number of significant figures then do not specify the teacher's answer as a rational number! Note that you will need to do the same output formatting for the question tests if your question cares about the formatting of the answer. Please note that the system administrator has access to a \"bulk test\" script which runs all the tests on a category. You can use this when you upgrade your site. Things that have broken or will break There have been some changes, which have created broken questions between versions. List instantiation in Maxima is now required by Maxima and writing to an uninstantiated list gives errors like 'ARRSTORE: use_fast_arrays=false; allocate a new property hash table'. Basically, this means that you cannot say TAns[1]:x; without first saying TAns:[]; . So do not assume that Maxima knows you want to create a list by simply assigning to an index on an undefined variable. Maxima has its own addrow command, that differs from STACKs version. Please check any questions using addrow . Eventually, a conversion will be made that will switch the arguments of function calls in old questions using the old STACK version of that function but the change process will be long. Abacus guidelines Abacus materials are assumed to take into account the future proofing related comments above. In addition to this there are some other rules: Naming of questions The question names are to be in English and the question name is then suffixed with the language codes of the localisations present in the question e.g. 'Eigenvalues and eigenvectors [FI,SV]'. While uniqueness of the naming of questions might be desirable it makes more sense to name the collection (category for those dealing with Moodle) of questions uniquely and keep the individual question names short. As a special rule if your question contains scripting inside CASText section that would suffer from being opened and saved with a helpful WYSIWYG editor do note that in the name. Maybe a suffix of '[NO WYSIWYG]' or a prefix if you fear that it would not be displayed in the question list due to a long question name. Use lexicographical ordering to your advantage, so questions are listed in an order which might be helpful when using them in a quiz or a course. Keywords & author attribution 'Tags' i.e. keywords can be connected to questions and you are encouraged to use them. You may try to gain access to a listing of most common ones and see if your ideas about them might have been typed slightly differently over there but worry not about creating a new one. Author attribution in Abacus happens through keys/tags. Your questions should have a tag referencing your home organisation and one for your name. As some platforms do not support spaces in their keywords you may want to play it safe by writing the author tag as 'LastnameFirstname'. If you are significantly modifying an existing question feel free to add your author tag there but do not remove the existing ones. HTML All HTML needs to be valid XHTML. Empty <p></p> -tags and <br/> -tags are to be eliminated on sight. All content should go through clear formatting . Editing using the plain text area editor is strongly recommended, at the minimum authors should take a look at the source code view of their WYSIWYG editor and prune every now and then. Model solution Abacus materials are expected to contain model solutions in the 'general feedback'-field and that solution is expected to apply to the random variables present in the student's question. Feel free to use conditional rendering available through CASText blocks to handle differences in the solution process if the random variables require it. However, in general questions should aim to have the same solution process for all values of the parameters to avoid differences in difficulty. Naturally, questions with wildly different solutions are also useful. Question note The question note must be filled correctly, i.e. all random variables must be present in it. It is also recommended that the note provides a summary of the question and answer, if multiple differing solution processes are possible the note should tell which of those is required in the variant. Question notes are used if one selects specific variants for use and all that information will help then. Localisation Questions are to be localised within the question i.e. there must not exist more than one instance of the same question only differing by the language of the CASText portions. Currently, the localisation is to be done with the multilang filter of Moodle; once better or higher-level solutions are made possible we will automatically convert to them. PRT feedback It is perfectly acceptable to place the PRT-feedback marker within the question text, as opposed to the specific feedback field in Moodle, and it is recommended when dealing with questions with multiple PRTs and inputs. Try to place the feedback near to the things it applies to e.g. feedback for part A at the end of part A before part B starts. CAS Code & input and PRT naming Abacus materials should aim to use English names for the CAS variables, inputs and PRTs to ease debugging by other members. Realistically, when generating new localisations for an existing question the variables should be renamed at the same time unless they are already in English. If a variable name could cause confusion you should describe the variable in inline comments. You should use verbose internal variable names but not too verbose, try to aim for less than 10 characters. PascalCase/camelCase is the recommended way of dealing with multi word verbose names. Naming of PRTs is highly recommended, even partA and partB will be more descriptive names than prt1 and prt2 , naming of PRTs happens when you create them i.e. when you create that PRT-feedback marker.","title":"Guidelines for ensuring that a question works in the future"},{"location":"en/Authoring/Future_proof/#guidelines-for-ensuring-that-a-question-works-in-the-future","text":"Creating a great STACK question takes effort and often people worry about how updating STACK or Moodle or other components running those questions might affect their questions. While there are no guarantees you can increase the ongoing reliability of your questions by taking the following things into account. In some parts of this document we mention \"Abacus\". The Abacus project is a STACK material sharing organisation that seeks to develop high-quality materials to be implemented following these guidelines. This document ends with additional guidelines adopted by Abacus. This is both good practice, and will be relevant if you ever intend to join Abacus. The most important things are listed here. More detail is below. Build questions so that it is possible to detect changes in the platform. All questions must have \"question tests\", which allow unit testing of each question variant. Use simple correct HTML with all closing tags, avoiding explicit style of your own. Use only simple core LaTeX Maths environments/commands, with only \\(...\\) and \\[...\\] as the maths delimiters. Avoid linking to externally hosted content, such as pictures and applets. End Maxima commands with a semi-colon ; . Add comments to your Maxima code.","title":"Guidelines for ensuring that a question works in the future"},{"location":"en/Authoring/Future_proof/#writing-castext","text":"CASText is the definition of the visible parts of the question, the bit where you pose the problem to the student lay out the equations and inputs and possibly draw fancy graphics. Technically, CASText is an HTML-document fragment with inline LaTeX equations and possible logic in the form of CASText blocks. To ease parsing of CASText you should ensure that you are writing valid (X)HTML i.e. make sure that all the tags get closed and that you are not placing block level elements in places where they do not belong. <span><div>...</div></span> is bad while <div><span>...</span></div> might be less bad. In the case of LaTeX using \\(...\\) instead of $...$ and \\[...\\] instead of $$...$$ , in Abacus $ -delimiters for LaTeX are strictly forbidden . (There is a simplistic auto-convert to help with a one-time conversion.) To ensure consistent presentation you should avoid using inline CSS styles in your CASText, as the styles of the surrounding system may change and cause conflicts. In general all styles are bad with the sole exception being text-align in the context of table cells. Otherwise: If at all possible remove all styles and the <span> tags related to them from the CASText. Most WYSIWYG editors have some clear formatting feature to do just that. You cannot have block level HTML elements inside a span tag, which is an inline element. You should not define font-size anywhere. If you need a heading with big text then use the <hX>...</hX> tags, but not with too small or large values of X. In Abacus <h3> and <h4> are recommended especially in model solutions. Likewise all other font stylings should be left to the surrounding system but feel free to use <i> , <b> , <em> , and <strong> if you need and assume that the surrounding system handles them correctly. You can use the <code> tag to explain how to type in answers. The top level of your CASText document should consist of <p> , <table> , <div> , or CASText block elements not of raw text. For the PRT be careful about using <p> tags (which editors hide). If you use the compact PRT style then STACK then puts this into span tags, and you cannot have block level HTML elements such as <p> inside a span tag. In the case of tables and images you may use a bit of styling, e.g. borders, paddings, margins, and sizes, but you should always use relative units when describing those sizes. Scale to match the current font-size or maybe to the width of the viewport or even to the maximum dimension of the display not to pixels as pixels have very different actual sizes on different screens and we cannot assume that the software displaying things will make the same scaling assumptions for them in the future. STACK now uses SVG, and this is preferred if you can embed this within the CASText. Only use supported JavaScript libraries, like JSXGraph. Avoid complex LaTeX constructions where you inject values into multiple places, instead try to tune Maxima LaTeX generation to meet your needs, e.g. showing working , using texput , or changing other features of Maxima constructs. If your CASText document contains scripts like JSXGraph content definitions you should ensure that if they require some external files to be evaluated you include those files with the question as links to external files will be broken at some point or the external files themselves change. In the case of JSXGraph use the jsxgraph CASText block which will handle the scripts at STACK level. All external files/links are bad! If you have images or other documents related to the question they should be included in the question. Avoid embedded frames, applets and other interactive content. To test inclusion you should be able to export the question and import it to a freshly installed raw system on a computer not connected to the internet and those questions should work. There is nothing wrong with internal files of any type, as long as they come with the question.","title":"Writing CASText"},{"location":"en/Authoring/Future_proof/#writing-cas-code","text":"The CAS code (internally keyvals and CASStrings) consists of Maxima assignment statements. Occasionally, Maxima's behaviour changes, and occasionally there are changes in the STACK provided Maxima functions. Changes cannot be avoided, but you can try to develop your questions based on as new as possible Maxima version to give them longer life. Otherwise there are some details that should be noted: End your statements with semicolons ( ; ) this will ease your life if you ever need to copy code to Maxima for testing. In the future semicolons may become mandatory, automatic conversion will however handle that change. Avoid interesting chars in your variable names e.g. _ has meaning and it is reasonable to assume that other chars might have new meanings in the future. Never write to a variable sharing a name with an input! You should also heed to these general guidelines: Teachers answers are generally stored in variables named tAns , tans1 , or maybe TAns3 this is a pretty widely spread convention and should be followed, in general the question variables should end with a listing of assignments defining the teachers answers for each input. Should there be need to process the students answer it might make sense to store it to sAns... . texput instead of manual string construction when generating LaTeX representations will keep your code readable. Write comments! More complex code is more likely to break at some point and someone, probably you, will need to understand it and provide a replacement logic for it. Especially, long oneliners have tendency to mystically break.","title":"Writing CAS code"},{"location":"en/Authoring/Future_proof/#question-tests-teachers-answers","text":"To detect broken questions we need to be able to test them and the only reasonable way to that is through the question tests. You must define some tests: at least one for each PRT in your question. Preferably provide one correct answer test for each PRT, tests for each branch in the PRTs, and some nonsense inputs to check for 'false positive' style failures. For manual testing it is important to provide each input with the correct teacher's answer and that teacher's answer must be in a form that matches input requirements. For example, if you require a floating-point number with a specific number of significant figures then do not specify the teacher's answer as a rational number! Note that you will need to do the same output formatting for the question tests if your question cares about the formatting of the answer. Please note that the system administrator has access to a \"bulk test\" script which runs all the tests on a category. You can use this when you upgrade your site.","title":"Question tests &amp; teacher's answers"},{"location":"en/Authoring/Future_proof/#things-that-have-broken-or-will-break","text":"There have been some changes, which have created broken questions between versions. List instantiation in Maxima is now required by Maxima and writing to an uninstantiated list gives errors like 'ARRSTORE: use_fast_arrays=false; allocate a new property hash table'. Basically, this means that you cannot say TAns[1]:x; without first saying TAns:[]; . So do not assume that Maxima knows you want to create a list by simply assigning to an index on an undefined variable. Maxima has its own addrow command, that differs from STACKs version. Please check any questions using addrow . Eventually, a conversion will be made that will switch the arguments of function calls in old questions using the old STACK version of that function but the change process will be long.","title":"Things that have broken or will break"},{"location":"en/Authoring/Future_proof/#abacus-guidelines","text":"Abacus materials are assumed to take into account the future proofing related comments above. In addition to this there are some other rules:","title":"Abacus guidelines"},{"location":"en/Authoring/Future_proof/#naming-of-questions","text":"The question names are to be in English and the question name is then suffixed with the language codes of the localisations present in the question e.g. 'Eigenvalues and eigenvectors [FI,SV]'. While uniqueness of the naming of questions might be desirable it makes more sense to name the collection (category for those dealing with Moodle) of questions uniquely and keep the individual question names short. As a special rule if your question contains scripting inside CASText section that would suffer from being opened and saved with a helpful WYSIWYG editor do note that in the name. Maybe a suffix of '[NO WYSIWYG]' or a prefix if you fear that it would not be displayed in the question list due to a long question name. Use lexicographical ordering to your advantage, so questions are listed in an order which might be helpful when using them in a quiz or a course.","title":"Naming of questions"},{"location":"en/Authoring/Future_proof/#keywords-author-attribution","text":"'Tags' i.e. keywords can be connected to questions and you are encouraged to use them. You may try to gain access to a listing of most common ones and see if your ideas about them might have been typed slightly differently over there but worry not about creating a new one. Author attribution in Abacus happens through keys/tags. Your questions should have a tag referencing your home organisation and one for your name. As some platforms do not support spaces in their keywords you may want to play it safe by writing the author tag as 'LastnameFirstname'. If you are significantly modifying an existing question feel free to add your author tag there but do not remove the existing ones.","title":"Keywords &amp; author attribution"},{"location":"en/Authoring/Future_proof/#html","text":"All HTML needs to be valid XHTML. Empty <p></p> -tags and <br/> -tags are to be eliminated on sight. All content should go through clear formatting . Editing using the plain text area editor is strongly recommended, at the minimum authors should take a look at the source code view of their WYSIWYG editor and prune every now and then.","title":"HTML"},{"location":"en/Authoring/Future_proof/#model-solution","text":"Abacus materials are expected to contain model solutions in the 'general feedback'-field and that solution is expected to apply to the random variables present in the student's question. Feel free to use conditional rendering available through CASText blocks to handle differences in the solution process if the random variables require it. However, in general questions should aim to have the same solution process for all values of the parameters to avoid differences in difficulty. Naturally, questions with wildly different solutions are also useful.","title":"Model solution"},{"location":"en/Authoring/Future_proof/#question-note","text":"The question note must be filled correctly, i.e. all random variables must be present in it. It is also recommended that the note provides a summary of the question and answer, if multiple differing solution processes are possible the note should tell which of those is required in the variant. Question notes are used if one selects specific variants for use and all that information will help then.","title":"Question note"},{"location":"en/Authoring/Future_proof/#localisation","text":"Questions are to be localised within the question i.e. there must not exist more than one instance of the same question only differing by the language of the CASText portions. Currently, the localisation is to be done with the multilang filter of Moodle; once better or higher-level solutions are made possible we will automatically convert to them.","title":"Localisation"},{"location":"en/Authoring/Future_proof/#prt-feedback","text":"It is perfectly acceptable to place the PRT-feedback marker within the question text, as opposed to the specific feedback field in Moodle, and it is recommended when dealing with questions with multiple PRTs and inputs. Try to place the feedback near to the things it applies to e.g. feedback for part A at the end of part A before part B starts.","title":"PRT feedback"},{"location":"en/Authoring/Future_proof/#cas-code-input-and-prt-naming","text":"Abacus materials should aim to use English names for the CAS variables, inputs and PRTs to ease debugging by other members. Realistically, when generating new localisations for an existing question the variables should be renamed at the same time unless they are already in English. If a variable name could cause confusion you should describe the variable in inline comments. You should use verbose internal variable names but not too verbose, try to aim for less than 10 characters. PascalCase/camelCase is the recommended way of dealing with multi word verbose names. Naming of PRTs is highly recommended, even partA and partB will be more descriptive names than prt1 and prt2 , naming of PRTs happens when you create them i.e. when you create that PRT-feedback marker.","title":"CAS Code &amp; input and PRT naming"},{"location":"en/Authoring/HELM/","text":"HELM During the summer of 2020, we started to convert the HELM workbooks into STACK quizzes. The ultimate goal is to create and release one quiz for each of the .pdf workbooks. To help question authors work in parallel and yet achieve a consistent style we introduced the following style conventions which are now available to any STACK question. Key points These appear in boxes in the original HELM workbooks. Do not include the numbers that appear in the PDFs (i.e. use \"Key Point\" rather than \"Key Point 1\") Example Code A generalisation of the third law of indices states: Key Point For all ... . <p>A generalisation of the third law of indices states:</p> <div class=\"HELM_keypoint\"> <h4>Key Point</h4> <p>For all ... .</p> </div> Examples Have a horizontal rule before them. They also have a horizontal rule after them, unless they are last in the text. Do not include the numbers that appear in the PDFs (i.e. use \"Example\" rather than \"Example 1\") The headings are <h4> with a special class applied to them for styling. Use the HELM_parts and HELM_parts_inline styles to label lists of parts (a), (b), (c), etc. Example Code Example Use a calculator to evaluate ... . Solution Using the ... button on the calculator check that you obtain ... . <hr> <h4 class=\"HELM_example\">Example</h4> <p>Use a calculator to evaluate ... .</p> <h4 class=\"HELM_solution\">Solution</h4> <p>Using the ... button on the calculator check that you obtain ... .</p> Example Identify the index and base in the following expressions. Ex 1. Ex 2. Ex 3. Solution In the expression ..., 8 is the base and 11 is the index. In the expression ..., -2 is the base and 5 is the index. In the expression ..., p is the base and -q is the index. The interpretation of a negative index will be given in sub-section 4 which starts on page 31. <hr> <h4 class=\"HELM_example\">Example</h4> <p>Identify the index and base in the following expressions. </p> <ol class=\"HELM_parts_inline\"> <li> Ex 1. </li> <li> Ex 2. </li> <li> Ex 3. </li> </ol> <h4 class=\"HELM_solution\">Solution</h4> <ol class=\"HELM_parts\"> <li>In the expression ..., 8 is the base and 11 is the index.</li> <li>In the expression ..., -2 is the base and 5 is the index.</li> <li>In the expression ..., p is the base and -q is the index.<p> </p><p>The interpretation of a negative index will be given in sub-section 4 which starts on page 31.</p></li> </ol> Hint: If <hr> doesn't work try preceding it with <p>&nbsp;</p>. Questions Start with heading \"Exercise\" - see below for styling. Note that these are numbered in the PDFs but do not copy the numbers. The Moodle quiz will take care of numbering the questions. Example Code Exercise <p class=\"HELM_exercise\">Exercise</p>","title":"HELM"},{"location":"en/Authoring/HELM/#helm","text":"During the summer of 2020, we started to convert the HELM workbooks into STACK quizzes. The ultimate goal is to create and release one quiz for each of the .pdf workbooks. To help question authors work in parallel and yet achieve a consistent style we introduced the following style conventions which are now available to any STACK question.","title":"HELM"},{"location":"en/Authoring/HELM/#key-points","text":"These appear in boxes in the original HELM workbooks. Do not include the numbers that appear in the PDFs (i.e. use \"Key Point\" rather than \"Key Point 1\") Example Code A generalisation of the third law of indices states:","title":"Key points"},{"location":"en/Authoring/HELM/#examples","text":"Have a horizontal rule before them. They also have a horizontal rule after them, unless they are last in the text. Do not include the numbers that appear in the PDFs (i.e. use \"Example\" rather than \"Example 1\") The headings are <h4> with a special class applied to them for styling. Use the HELM_parts and HELM_parts_inline styles to label lists of parts (a), (b), (c), etc. Example Code","title":"Examples"},{"location":"en/Authoring/HELM/#questions","text":"Start with heading \"Exercise\" - see below for styling. Note that these are numbered in the PDFs but do not copy the numbers. The Moodle quiz will take care of numbering the questions. Example Code Exercise <p class=\"HELM_exercise\">Exercise</p>","title":"Questions"},{"location":"en/Authoring/ImportExport/","text":"Import and Export of STACK questions STACK questions use the \"Moodle XML format\" to import and export. Importing STACK questions Go to Question bank => Import Choose \"Moodle XML format\" and the question bank category you wish to import your questions to. Then select files to import. Some sample questions are supplied with STACK in this format. Exporting STACK questions There are two ways to export STACK questions. The normal Moodle procedure is to export whole category of questions at one time through the Moodle question bank. To export a selection of questions, you need to move them into a separate category. This can be any mix of STACK and other Moodle questions. You must choose \"Moodle XML format\" as the file format. To export a single STACK question as \"Moodle XML format\". Preview the question. Follow the link to \"Question tests & deployed variants\". Export this question. This export mechanism is only available to STACK questions and no other question types in Moodle. Migrating STACK 3 questions to STACK 4 STACK 4.0 has one important change in the question authoring. CASText now uses {@...@} in include mathematics in the text. The change from @...@ to {@...@} gives us matching parentheses to parse, which is much better. The {..} will not break LaTeX. You will need to update all your existing questions which include CAS calculations. This includes all fields, e.g. in the feedback as well. To help with this process we have an automatic conversion script. As an admin user navigate to Site administration -> Plugins -> Question Types -> STACK Then choose the link \"The fix maths delimiters script\". Importing STACK 2 questions You will need to install the qformat_stack importer before you can import STACK 2 questions. Go to Question bank => Import Choose \"STACK2.0 format\" and the question bank category you wish to import your questions to. The importer enables STACK 2 questions which have been exported in STACK's \"xml\" format to be imported into STACK 3. Both individual questions and lists of questions can be imported. There have been a number of changes between STACK 2 and STACK 3. These are detailed in the development track . The following question level options are now ignored by the importer Display (Reason: this should not be set at the question level anyway). Worked Solution on Demand (Reason: the quiz behaviours are the right place to deal with this. Providing this option was always a hack in the first place...). Feedback shown (Reason: again, the quiz behaviours are the right place to deal with this.) From the old MetaData only the name is preserved. All other MetaData is lost on import. STACK 2 exporter does not seem to export some of the interaction element options correctly, in particular the options which ask the student to verify and to show validation feedback. question level penalty option. Questions with a single potential response tree import with the PRT feedback in the specific feedback slot, not in the question text. We envisage this will enable single part questions to respect a wider variety of Moodle question behaviours. When importing question tests, the new testing mechanism in STACK 3 enables the teacher to specify a score and penalty, not just an answer note. Since we have to set defaults on import, most question tests now fail and this information will need to be added by hand. A good opportunity to confirm questions have imported correctly.....","title":"Import and Export of STACK questions"},{"location":"en/Authoring/ImportExport/#import-and-export-of-stack-questions","text":"STACK questions use the \"Moodle XML format\" to import and export.","title":"Import and Export of STACK questions"},{"location":"en/Authoring/ImportExport/#importing-stack-questions","text":"Go to Question bank => Import Choose \"Moodle XML format\" and the question bank category you wish to import your questions to. Then select files to import. Some sample questions are supplied with STACK in this format.","title":"Importing STACK questions"},{"location":"en/Authoring/ImportExport/#exporting-stack-questions","text":"There are two ways to export STACK questions. The normal Moodle procedure is to export whole category of questions at one time through the Moodle question bank. To export a selection of questions, you need to move them into a separate category. This can be any mix of STACK and other Moodle questions. You must choose \"Moodle XML format\" as the file format. To export a single STACK question as \"Moodle XML format\". Preview the question. Follow the link to \"Question tests & deployed variants\". Export this question. This export mechanism is only available to STACK questions and no other question types in Moodle.","title":"Exporting STACK questions"},{"location":"en/Authoring/ImportExport/#migrating-stack-3-questions-to-stack-4","text":"STACK 4.0 has one important change in the question authoring. CASText now uses {@...@} in include mathematics in the text. The change from @...@ to {@...@} gives us matching parentheses to parse, which is much better. The {..} will not break LaTeX. You will need to update all your existing questions which include CAS calculations. This includes all fields, e.g. in the feedback as well. To help with this process we have an automatic conversion script. As an admin user navigate to Site administration -> Plugins -> Question Types -> STACK Then choose the link \"The fix maths delimiters script\".","title":"Migrating STACK 3 questions to STACK 4"},{"location":"en/Authoring/ImportExport/#importing-stack-2-questions","text":"You will need to install the qformat_stack importer before you can import STACK 2 questions. Go to Question bank => Import Choose \"STACK2.0 format\" and the question bank category you wish to import your questions to. The importer enables STACK 2 questions which have been exported in STACK's \"xml\" format to be imported into STACK 3. Both individual questions and lists of questions can be imported. There have been a number of changes between STACK 2 and STACK 3. These are detailed in the development track . The following question level options are now ignored by the importer Display (Reason: this should not be set at the question level anyway). Worked Solution on Demand (Reason: the quiz behaviours are the right place to deal with this. Providing this option was always a hack in the first place...). Feedback shown (Reason: again, the quiz behaviours are the right place to deal with this.) From the old MetaData only the name is preserved. All other MetaData is lost on import. STACK 2 exporter does not seem to export some of the interaction element options correctly, in particular the options which ask the student to verify and to show validation feedback. question level penalty option. Questions with a single potential response tree import with the PRT feedback in the specific feedback slot, not in the question text. We envisage this will enable single part questions to respect a wider variety of Moodle question behaviours. When importing question tests, the new testing mechanism in STACK 3 enables the teacher to specify a score and penalty, not just an answer note. Since we have to set defaults on import, most question tests now fail and this information will need to be added by hand. A good opportunity to confirm questions have imported correctly.....","title":"Importing STACK 2 questions"},{"location":"en/Authoring/Inputs/","text":"Inputs Inputs are the points at which the student interacts with the question. The default (and prototype) is an HTML input box into which a student is expected to type an algebraic expression. Only the question text may have inputs. Inputs are not required. Hence it is possible for the teacher to make a statement which asks for no response from the student, i.e. a rhetorical question. A question may have as many inputs as needed. Inputs can be positioned anywhere within the question text . MathJax does not currently support the inclusion of inputs within equations. All inputs return a Maxima expression. This might be just the student's answer (in the case of an algebraic input). MCQ inputs also return a valid Maxima expression. In a multi-part question avoid having inputs which differ only by case sensitivity. E.g. do not have [[input:a]] and [[input:A]] in the same question. (Some database defaults have case insensitive unique keys (!) and in that case this will cause a database error. See the installation instructions ). The position of an input in the question text is denoted by [[input:ans1]] Here ans1 is the name of a Maxima variable to which the student's answer is to be assigned. This must only be letters followed (optionally) by numbers, as in this example. No special characters are permitted. The input name cannot be more than 18 characters long. Feedback as to the syntactic validity of a response is positioned using a corresponding tag [[validation:ans1]] This tag must be included even if validation is suppressed with an option (see below) and is automatically generated after the input if it does not exist. We expose the exact behaviour of the validation by giving registered users access to STACK's test suite validation of student's answers. This can be found on a live server at https://stack-demo.maths.ed.ac.uk/demo/question/type/stack/studentinputs.php Each input may have a number of options and this is potentially complex area with a large range of possibilities. The basic idea is to reject things as \"invalid\" to stop students being penalized on a technicality. This might be requiring an equation, or making floating-point numbers within an expression forbidden. Basic options Student's Answer Key Every input must have a unique answer key. This is set in the Question text using the following tag, where ans1 is the variable name to which the student's answer is assigned. [[input:ans1]] Internally you can refer to the student's answer using the variable name ans1 in the potential response tree, feedback variables and feedback text. The worked solution (general feedback) may not depend on the inputs. Model answer This field is compulsory. Every input must have an answer, although this answer is not necessarily the unique correct answer, or even \"correct\"! This value be displayed to the student as the correct answer. We recommend you use a question variable for this field so it can be used in the other parts of the question, e.g. the potential response trees. Input type Currently STACK supports the following kinds of inputs. These have a variety of options, as explained below. Algebraic input The default: a form box into which a student is expected to type an algebraic expression. Numerical This input type requires the student to type in a number of some kind. Any expression with a variable will be rejected as invalid. Note, some things (like forbid floats) can be applied to any numbers in an algebraic input; other tests (like require n decimal places) cannot and can only be applied to a single number in this input type. See the specific documentation for more information: Numerical input . Scientific units The support for scientific units includes an input type which enables teachers to check units as valid/invalid. See the separate documentation for units . Matrix The size of the matrix is inferred from the model answer. STACK then adds an appropriate grid of boxes (of size Box Size) for the student to fill in. This is easier than typing in Maxima 's matrix command, but does give the game away about the size of the required matrix. The student may not fill in part of a matrix. If they do so, the remaining entries will be completed with ? characters which render the attempt invalid. STACK cannot cope with empty boxes here. We cannot use the EMPTYANSWER tag for the teacher's answer with the matrix input, because the size of the matrix is inferred from the model answer. If a teacher really wants a correct answer to be empty inputs then they must use a correctly formatted matrix with null values ta:transpose(matrix([null,null,null])); Text area Enter algebraic expressions on multiple lines. STACK passes the result to Maxima as a list. Note, the teacher's answer and any syntax hint must be a list! If you just pass in an expression strange behaviour may result. Equivalence reasoning input The purpose of this input type is to enable students to work line by line and reason by equivalence. See the specific documentation for more information: Equivalence reasoning . Note, the teacher's answer and any syntax hint must be a list! If you just pass in an expression strange behaviour may result. True/False Simple drop down. A Boolean value is assigned to the variable name. If the teacher's correct answer should leave this blank (e.g. not answered at all) then use the tag EMPTYANSWER . (There are some edge cases where only some inputs are used in the correct answer to a question, so not answering is correct here). If you use the extra option allowempty then empty answers are considered valid, and the value of this input is EMPTYANSWER . Dropdown/Checkbox/Radio The dropdown, checkbox and radio input types enable teachers to create multiple-choice questions. See the separate documentation. String input This is a normal input into which students may type whatever they choose. It is always converted into a Maxima string internally. Note that there is no way whatsoever to parse the student's string into a Maxima expression. If you accept a string, then it will always remain a string! You can't later check for algebraic equivalence. The only tests available will be simple string matches, etc. Notes input This input is a text area into which students may type whatever they choose. It can be used to gather their notes or \"working\". However, this input is always considered as \"invalid\", so that any potential response tree which relies on this input will never get evaluated! This input type can be used for surveys; answers which are not automatically marked, contributing to semi-automatic marking . The notes input has a special extra option manualgraded , and the default option value is manualgraded:false . If you specify manualgraded:true then the whole STACK quesion will require manual grading! Single Character A single letter can be entered. This is useful for creating multiple-choice questions, but is not used regularly. Options Input Box Size The width of the input box. Insert Stars Insert Stars affect the way STACK treats the validation of CAS strings. Some patterns must always be wrong. For example )( must be missing a star, and so this pattern is always included. There are six options. Don't insert stars: This does not insert * characters automatically. If there are any pattern identified the result will be an invalid expression. Insert * s for implied multiplication. If any patterns are identified as needing * s then they will automatically be inserted into the expression quietly. Insert * s assuming single character variable names. In many situations we know that a student will only have single character variable names. Identify variables in the student's answer made up of more than one character then replace these with the product of the letters. Note, the student's formula is interpreted and variables identified, so \\sin(ax) will not end up as s*i*n*(a*x) but as sin(a*x) . Note, in interpreting the student's formula we build an internal tree in order to identify variable names and function names. Hence xe^x is interpreted as (xe)^x . We then identify the variable name xe and replace this as x*e . Hence, using this option we have xe^x is interpreted as (x*e)^x NOT as x*e^x which you might expect. There are also additional options to insert multiplication signs for spaces. Insert stars for spaces only Insert stars for implied multiplication and for spaces Insert stars assuming single-character variable names and for spaces If a space is taken for multiplication what should we do with \\sin\\ x ? Currently this is transformed to \\sin \\times x and then rejected as invalid as you can't multiply the function name by its argument. Use these latter options with caution: in the long run students are likely to need to use a strict syntax with machines, and letting them use spaces now might be a disservice. It is often very important to have some on-screen representation of multiplication, e.g. as a dot, so the student can see at the validation that xe^x is interpreted as (x\\cdot e)^x if we assume single character variable names, and as xe^x if we just \"Insert * s for implied multiplication\". The absence of the dot here is key. Syntax Hint A syntax hint allows the teacher to give the student a pro-forma in the input box. This can include '?' characters. The syntax hint will appear in the answer box whenever this is left blank by the student. For example, rather than having to type matrix([1,2],[3,4]) the teacher may want to provide an answer box which already contains the string matrix([?,?],[?,?]) instead. The student then need only to edit this, to replace ?s with their values. This helps reduce syntax error problems with more difficult syntax issues. The ? may also be used to give partial credit. Of course it could also be used for general expressions such as: x^2+?*x+1 Forbidden words This is a comma-separated list of text strings which are forbidden in a student's answer. If one of these strings is present then the student's attempt will be considered invalid, and no penalties will be given. This is an unsophisticated string match. Note, any question variable names used in the question variables are automatically forbidden (otherwise the student could potentially use the variable name you have defined, which might be the correct answer). If you want to allow question variables, you must explicitly use the allowed words field, see below. Note that the string * is literally taken as * and is not a wild card. Teachers may ask a student to calculate 2*3 and hence need to forbid multiplication in an answer. If you wish to forbid commas, then escape it with a backslash. There are groups of common keywords which you can forbid simply as [[BASIC-ALGEBRA]] common algebraic operations such as simplify , factor , expand , solve , etc. [[BASIC-CALCULUS]] common calculus operations such as int , diff , taylor , etc. [[BASIC-MATRIX]] common matrix operations such as transpose , invert , charpoly , etc. If you have suggestions for more lists, or additional operations which should be added to the existing lists, please contact the developers. Allowed words By default, arbitrary function or variable names of more than two characters in length are not permitted. This is a comma-separated list of function or variable names which are permitted in a student's answer. Note the allowed words permit the teacher to override some (but not all) of the strings which are considered to be invalid by default for student input. For example, Sin (capital \"S\") has specific feedback. If you need this in a question you have to allow it here. Similarly In (\"India November\") is mistakenly used by students for the natural logarithm rather than ln (\"Lima November\"). Hence by default this triggers specific feedback. You can allow In here. Forbid Floats If set to yes , then any answer of the student which has a floating-point number will be rejected as invalid. Students sometimes use floating-point numbers when they should use fractions. This option prevents problems with approximations being used. Require lowest terms When this option is set to yes , any coefficients or other rational numbers in an expression, must be written in lowest terms. Otherwise the answer is rejected as \"invalid\". This enables the teacher to reject answers, and not consider them further. Note that at most one number can have a minus sign and two unary minus signs are considered to be something which should be cancelled. Check Students answer's type If this option is set to yes then unless the student's expression is the same Maxima as the teacher's correct answer, then the attempt will be rejected as invalid. This is very useful for ensuring the student has typed in an \"equation\", such as y=mx+c and not an expression such as mx+c . Remember, you can't compare an expression with an equation! Another useful way of avoiding this problem is to put a LaTeX string such as y= just before the input. E.g. \\(y=\\)[[input:ans1]]. Student must verify Specifies whether the student's input is presented back to them before scoring as part of a two-step validation process. Typically the student's mathematical expression is displayed in traditional form. This is useful for complex algebraic expressions but not needed for constrained input like yes / no . Experience strongly supports the use of this two-step verification process. Errors will always be displayed and expressions with errors rejected as invalid. Potential response trees will not execute with invalid input. The next option controls how the validation feedback is displayed. Note, it is not possible to require a two-step validation but not show some validation feedback. Show validation Feedback to students is in two forms. feedback tied to inputs, in particular if the answer is invalid. feedback tied to each potential response tree. Setting this option displays any feedback from this input, including echoing back their expression in traditional two-dimensional notation. Generally, feedback and verification are used in conjunction. Errors will always be displayed. In addition to simply displaying the student's expression, the teacher can display the list of variables which occurs in the expression. From experience, this is helpful in letting students understand the idea of variable and to spot case insensitivity or wrong variable problems. The \"compact\" version removes most of the styling. This is needed when the answer is part of a table. Extra option: hideanswer Users are increasingly using inputs to store state , which makes no sense for a user to see. For example, when using JSXGraph users transfer the configuration of the diagram into an input via JavaScript. In many situations, it makes no sense for the student to see anything about this input. The validation can be switched off with the regular \"show validation\" option, the input box itself can be hidden with JavaScript/CSS. Putting hideanswer in the extra options stops displaying the \"teacher's answer\", e.g. at the end of the process. Do not use this option in questions in place of the normal quiz settings. For this reason it is only supported in the string input type. Extra option: allowempty Normally a blank , i.e. empty, answer has a special status and are not considered \"valid\". Hence, a PRT relying on an input left blank will not be traversed. Answers consisting only of whitespace are also considered as empty. The extra option allowempty allows the input to be empty. Internally an empty answer will be replaced by the Maxima atom EMPTYANSWER . Internally it is essential that the variable name of the input, (e.g. ans1 ) is really assigned a specific value. The teacher will need to deal with EMPTYANSWER tags in the PRT. We strongly recommend (with many years of experience) that teachers do not use this option without very careful thought! For example, if you don't want to give away how many answers you expect, then ask the student to provide a set of answers. Another option is to use the \"TextArea\" input type. Each line of the TextArea is validated separately, and the resulting mathematical expression is a list. The student is therefore free to choose how many expressions to type in, as the circumstances require, without a pre-defined number of input boxes. By design, it is better to use these methods than trying to combine separate inputs, some of which are empty, in the PRT later. Our experience strongly suggests this option should only be used for edge cases, and not for routine use. If you use this option when students navigate away from a page the system will \"validate\" the inputs, and hence any empty boxes will be considered an active empty choice by the student and will be assessed. If you use this option there is no way to distinguish between an active empty answer choice, and a student who deletes their answer. (The same problem occurs with radio buttons....) There are (unfortunately) some edge cases where it is useful to permit the execution of a PRT without all the inputs containing significant content. Assume you have three inputs ans1 , ans2 , ans3 contributing to a PRT, all of which have the allowempty option set because you don't want to tell the student which might be empty. Assume the correct answer has at least one entry non-empty. Then, make the first node of the PRT check ATAlgEquiv({ans1,ans2,ans3},{EMPTYANSWER}) This checks if all inputs are empty, so if true set the score and the penalty to be zero and stop. This prevents the student accruing a penalty if they navigate away with all the boxes empty, but the PRT will still execute an \"attempt\". If a teacher has three inputs ans1 , ans2 , ans3 , then they can define a set in the feedback variables as follows sa:setdifference({ans1,ans2,ans3},{EMPTYANSWER}) The variable sa will be a set containing the non-empty answers (if any). The teacher can use the EMPTYANSWER tag as a \"correct answer\". Extra option: simp Actually simplify the student's answer during the validation process. This will allow students to type in something like makelist(k^2,k,1,8) If teacher's want this kind of thing, then a syntax hint is probably in order as well. You may need to ev(ans1,simp) explicitly in any potential response tree. It makes no sense to simplify the equivalence reasoning input type, so this has been omitted. Extra option: align Controls if the student's answer is aligned 'left' or 'right' within the input box. Extra option: nounits As of STACK 4.3, if units are declared in a question then the whole question will use a units context for parsing inputs. For example, in a multi-part question you may use a matrix input. If you do so, and use variable names, then these will be parsed expecting them to be usits. To prevent this in a particular input, use the nounits option Extra options In the future we are likely to add additional functionality via the extra options fields. This is because the form-based support becomes ever more complex, intimidating and difficult to navigate. Input tips and tricks It is often sensible to use a prefix just in front of the form box. For example \\(f(x)=\\) [[input:ans1]]. This avoids all kinds of problems with students also trying to enter the prefix themselves. You could also specify units afterwards, but you might also want the student to type these in! In Maxima the input (a,b,c) is a programmatic block element (see Maxima's manual for block ). Hence we cannot use this directly for the input of coordinates. Instead, have the students type in an unnamed function like P(x,y) This technique can be used to enter a set of points {A(1,2), B(2,3)} as an answer. The op command can be used to filter out a particular point, and the args command becomes a list of coordinates. Options summary table This table lists all options, and which inputs use/respect them. The . means the option is ignored. Options Alg Num Units Matrix Check Radio Drop T/F TextArea Equiv String Notes Box size Y Y Y Y . . . . Y Y Y Y Strict Syn Y (1) (1) Y . . . . Y Y . . Insert stars Y Y Y Y . . . . Y Y . . Syntax hint Y Y Y Y . . . . Y Y Y Y Hint att Y Y Y Y . . . . Y Y Y Y Forbidden words Y Y Y Y . . . . Y Y . . Allowed words Y Y Y Y . . . . Y Y . . Forbid float Y Y Y Y . . . . Y Y . . Lowest terms Y Y Y Y . . . . Y Y . . Check type Y Y Y Y . . . . . . . . Must verify Y Y Y Y Y Y Y Y Y Y Y . Show validation Y Y Y Y Y Y Y Y Y Y Y . Extra options: rationalize Y Y . . . . . . . . . . min/max sf/dp . Y Y . . . . . . . . . floatnum . Y . . . . . . . . . . intnum . Y . . . . . . . . . . rationalnum . Y . . . . . . . . . . negpow . . Y . . . . . . . . . allowempty Y Y Y Y . . . Y . . Y . hideanswer Y Y . . . . . Y . . Y Y simp Y Y Y Y . . . . Y . . . align Y Y Y . . . . . . . . . nounits Y Y Y Y Y Y Y . . Y . . For documentation about the various options not documented on this page look at the pages for the specific inputs in which each option is used. Notes: The numerical and units input type ignore the strict syntax option and always assume strict syntax is \"true\". Otherwise patterns for scientific numbers such as 2.23e4 will have multiplication characters inserted. Other input types Adding new inputs, or options for existing inputs, is a job for the developers. The only essential requirement is that the result is a valid CAS expression, which includes of course a string data type, or a list.","title":"Inputs"},{"location":"en/Authoring/Inputs/#inputs","text":"Inputs are the points at which the student interacts with the question. The default (and prototype) is an HTML input box into which a student is expected to type an algebraic expression. Only the question text may have inputs. Inputs are not required. Hence it is possible for the teacher to make a statement which asks for no response from the student, i.e. a rhetorical question. A question may have as many inputs as needed. Inputs can be positioned anywhere within the question text . MathJax does not currently support the inclusion of inputs within equations. All inputs return a Maxima expression. This might be just the student's answer (in the case of an algebraic input). MCQ inputs also return a valid Maxima expression. In a multi-part question avoid having inputs which differ only by case sensitivity. E.g. do not have [[input:a]] and [[input:A]] in the same question. (Some database defaults have case insensitive unique keys (!) and in that case this will cause a database error. See the installation instructions ). The position of an input in the question text is denoted by [[input:ans1]] Here ans1 is the name of a Maxima variable to which the student's answer is to be assigned. This must only be letters followed (optionally) by numbers, as in this example. No special characters are permitted. The input name cannot be more than 18 characters long. Feedback as to the syntactic validity of a response is positioned using a corresponding tag [[validation:ans1]] This tag must be included even if validation is suppressed with an option (see below) and is automatically generated after the input if it does not exist. We expose the exact behaviour of the validation by giving registered users access to STACK's test suite validation of student's answers. This can be found on a live server at https://stack-demo.maths.ed.ac.uk/demo/question/type/stack/studentinputs.php Each input may have a number of options and this is potentially complex area with a large range of possibilities. The basic idea is to reject things as \"invalid\" to stop students being penalized on a technicality. This might be requiring an equation, or making floating-point numbers within an expression forbidden.","title":"Inputs"},{"location":"en/Authoring/Inputs/#basic-options","text":"","title":"Basic options"},{"location":"en/Authoring/Inputs/#Answer_Key","text":"Every input must have a unique answer key. This is set in the Question text using the following tag, where ans1 is the variable name to which the student's answer is assigned. [[input:ans1]] Internally you can refer to the student's answer using the variable name ans1 in the potential response tree, feedback variables and feedback text. The worked solution (general feedback) may not depend on the inputs.","title":"Student's Answer Key"},{"location":"en/Authoring/Inputs/#model_answer","text":"This field is compulsory. Every input must have an answer, although this answer is not necessarily the unique correct answer, or even \"correct\"! This value be displayed to the student as the correct answer. We recommend you use a question variable for this field so it can be used in the other parts of the question, e.g. the potential response trees.","title":"Model answer"},{"location":"en/Authoring/Inputs/#input-type","text":"Currently STACK supports the following kinds of inputs. These have a variety of options, as explained below.","title":"Input type"},{"location":"en/Authoring/Inputs/#algebraic-input","text":"The default: a form box into which a student is expected to type an algebraic expression.","title":"Algebraic input"},{"location":"en/Authoring/Inputs/#numerical","text":"This input type requires the student to type in a number of some kind. Any expression with a variable will be rejected as invalid. Note, some things (like forbid floats) can be applied to any numbers in an algebraic input; other tests (like require n decimal places) cannot and can only be applied to a single number in this input type. See the specific documentation for more information: Numerical input .","title":"Numerical"},{"location":"en/Authoring/Inputs/#scientific-units","text":"The support for scientific units includes an input type which enables teachers to check units as valid/invalid. See the separate documentation for units .","title":"Scientific units"},{"location":"en/Authoring/Inputs/#matrix","text":"The size of the matrix is inferred from the model answer. STACK then adds an appropriate grid of boxes (of size Box Size) for the student to fill in. This is easier than typing in Maxima 's matrix command, but does give the game away about the size of the required matrix. The student may not fill in part of a matrix. If they do so, the remaining entries will be completed with ? characters which render the attempt invalid. STACK cannot cope with empty boxes here. We cannot use the EMPTYANSWER tag for the teacher's answer with the matrix input, because the size of the matrix is inferred from the model answer. If a teacher really wants a correct answer to be empty inputs then they must use a correctly formatted matrix with null values ta:transpose(matrix([null,null,null]));","title":"Matrix"},{"location":"en/Authoring/Inputs/#text-area","text":"Enter algebraic expressions on multiple lines. STACK passes the result to Maxima as a list. Note, the teacher's answer and any syntax hint must be a list! If you just pass in an expression strange behaviour may result.","title":"Text area"},{"location":"en/Authoring/Inputs/#equivalence-reasoning-input","text":"The purpose of this input type is to enable students to work line by line and reason by equivalence. See the specific documentation for more information: Equivalence reasoning . Note, the teacher's answer and any syntax hint must be a list! If you just pass in an expression strange behaviour may result.","title":"Equivalence reasoning input"},{"location":"en/Authoring/Inputs/#truefalse","text":"Simple drop down. A Boolean value is assigned to the variable name. If the teacher's correct answer should leave this blank (e.g. not answered at all) then use the tag EMPTYANSWER . (There are some edge cases where only some inputs are used in the correct answer to a question, so not answering is correct here). If you use the extra option allowempty then empty answers are considered valid, and the value of this input is EMPTYANSWER .","title":"True/False"},{"location":"en/Authoring/Inputs/#dropdowncheckboxradio","text":"The dropdown, checkbox and radio input types enable teachers to create multiple-choice questions. See the separate documentation.","title":"Dropdown/Checkbox/Radio"},{"location":"en/Authoring/Inputs/#string-input","text":"This is a normal input into which students may type whatever they choose. It is always converted into a Maxima string internally. Note that there is no way whatsoever to parse the student's string into a Maxima expression. If you accept a string, then it will always remain a string! You can't later check for algebraic equivalence. The only tests available will be simple string matches, etc.","title":"String input"},{"location":"en/Authoring/Inputs/#notes-input","text":"This input is a text area into which students may type whatever they choose. It can be used to gather their notes or \"working\". However, this input is always considered as \"invalid\", so that any potential response tree which relies on this input will never get evaluated! This input type can be used for surveys; answers which are not automatically marked, contributing to semi-automatic marking . The notes input has a special extra option manualgraded , and the default option value is manualgraded:false . If you specify manualgraded:true then the whole STACK quesion will require manual grading!","title":"Notes input"},{"location":"en/Authoring/Inputs/#single-character","text":"A single letter can be entered. This is useful for creating multiple-choice questions, but is not used regularly.","title":"Single Character"},{"location":"en/Authoring/Inputs/#options","text":"","title":"Options"},{"location":"en/Authoring/Inputs/#Box_Size","text":"The width of the input box.","title":"Input Box Size"},{"location":"en/Authoring/Inputs/#Insert_Stars","text":"Insert Stars affect the way STACK treats the validation of CAS strings. Some patterns must always be wrong. For example )( must be missing a star, and so this pattern is always included. There are six options. Don't insert stars: This does not insert * characters automatically. If there are any pattern identified the result will be an invalid expression. Insert * s for implied multiplication. If any patterns are identified as needing * s then they will automatically be inserted into the expression quietly. Insert * s assuming single character variable names. In many situations we know that a student will only have single character variable names. Identify variables in the student's answer made up of more than one character then replace these with the product of the letters. Note, the student's formula is interpreted and variables identified, so \\sin(ax) will not end up as s*i*n*(a*x) but as sin(a*x) . Note, in interpreting the student's formula we build an internal tree in order to identify variable names and function names. Hence xe^x is interpreted as (xe)^x . We then identify the variable name xe and replace this as x*e . Hence, using this option we have xe^x is interpreted as (x*e)^x NOT as x*e^x which you might expect. There are also additional options to insert multiplication signs for spaces. Insert stars for spaces only Insert stars for implied multiplication and for spaces Insert stars assuming single-character variable names and for spaces If a space is taken for multiplication what should we do with \\sin\\ x ? Currently this is transformed to \\sin \\times x and then rejected as invalid as you can't multiply the function name by its argument. Use these latter options with caution: in the long run students are likely to need to use a strict syntax with machines, and letting them use spaces now might be a disservice. It is often very important to have some on-screen representation of multiplication, e.g. as a dot, so the student can see at the validation that xe^x is interpreted as (x\\cdot e)^x if we assume single character variable names, and as xe^x if we just \"Insert * s for implied multiplication\". The absence of the dot here is key.","title":"Insert Stars"},{"location":"en/Authoring/Inputs/#Syntax_Hint","text":"A syntax hint allows the teacher to give the student a pro-forma in the input box. This can include '?' characters. The syntax hint will appear in the answer box whenever this is left blank by the student. For example, rather than having to type matrix([1,2],[3,4]) the teacher may want to provide an answer box which already contains the string matrix([?,?],[?,?]) instead. The student then need only to edit this, to replace ?s with their values. This helps reduce syntax error problems with more difficult syntax issues. The ? may also be used to give partial credit. Of course it could also be used for general expressions such as: x^2+?*x+1","title":"Syntax Hint"},{"location":"en/Authoring/Inputs/#Forbidden_Words","text":"This is a comma-separated list of text strings which are forbidden in a student's answer. If one of these strings is present then the student's attempt will be considered invalid, and no penalties will be given. This is an unsophisticated string match. Note, any question variable names used in the question variables are automatically forbidden (otherwise the student could potentially use the variable name you have defined, which might be the correct answer). If you want to allow question variables, you must explicitly use the allowed words field, see below. Note that the string * is literally taken as * and is not a wild card. Teachers may ask a student to calculate 2*3 and hence need to forbid multiplication in an answer. If you wish to forbid commas, then escape it with a backslash. There are groups of common keywords which you can forbid simply as [[BASIC-ALGEBRA]] common algebraic operations such as simplify , factor , expand , solve , etc. [[BASIC-CALCULUS]] common calculus operations such as int , diff , taylor , etc. [[BASIC-MATRIX]] common matrix operations such as transpose , invert , charpoly , etc. If you have suggestions for more lists, or additional operations which should be added to the existing lists, please contact the developers.","title":"Forbidden words"},{"location":"en/Authoring/Inputs/#Allowed_Words","text":"By default, arbitrary function or variable names of more than two characters in length are not permitted. This is a comma-separated list of function or variable names which are permitted in a student's answer. Note the allowed words permit the teacher to override some (but not all) of the strings which are considered to be invalid by default for student input. For example, Sin (capital \"S\") has specific feedback. If you need this in a question you have to allow it here. Similarly In (\"India November\") is mistakenly used by students for the natural logarithm rather than ln (\"Lima November\"). Hence by default this triggers specific feedback. You can allow In here.","title":"Allowed words"},{"location":"en/Authoring/Inputs/#Forbid_Floats","text":"If set to yes , then any answer of the student which has a floating-point number will be rejected as invalid. Students sometimes use floating-point numbers when they should use fractions. This option prevents problems with approximations being used.","title":"Forbid Floats"},{"location":"en/Authoring/Inputs/#Require_lowest_terms","text":"When this option is set to yes , any coefficients or other rational numbers in an expression, must be written in lowest terms. Otherwise the answer is rejected as \"invalid\". This enables the teacher to reject answers, and not consider them further. Note that at most one number can have a minus sign and two unary minus signs are considered to be something which should be cancelled.","title":"Require lowest terms"},{"location":"en/Authoring/Inputs/#Check_Type","text":"If this option is set to yes then unless the student's expression is the same Maxima as the teacher's correct answer, then the attempt will be rejected as invalid. This is very useful for ensuring the student has typed in an \"equation\", such as y=mx+c and not an expression such as mx+c . Remember, you can't compare an expression with an equation! Another useful way of avoiding this problem is to put a LaTeX string such as y= just before the input. E.g. \\(y=\\)[[input:ans1]].","title":"Check Students answer's type"},{"location":"en/Authoring/Inputs/#Student_must_verify","text":"Specifies whether the student's input is presented back to them before scoring as part of a two-step validation process. Typically the student's mathematical expression is displayed in traditional form. This is useful for complex algebraic expressions but not needed for constrained input like yes / no . Experience strongly supports the use of this two-step verification process. Errors will always be displayed and expressions with errors rejected as invalid. Potential response trees will not execute with invalid input. The next option controls how the validation feedback is displayed. Note, it is not possible to require a two-step validation but not show some validation feedback.","title":"Student must verify"},{"location":"en/Authoring/Inputs/#Show_validation","text":"Feedback to students is in two forms. feedback tied to inputs, in particular if the answer is invalid. feedback tied to each potential response tree. Setting this option displays any feedback from this input, including echoing back their expression in traditional two-dimensional notation. Generally, feedback and verification are used in conjunction. Errors will always be displayed. In addition to simply displaying the student's expression, the teacher can display the list of variables which occurs in the expression. From experience, this is helpful in letting students understand the idea of variable and to spot case insensitivity or wrong variable problems. The \"compact\" version removes most of the styling. This is needed when the answer is part of a table.","title":"Show validation"},{"location":"en/Authoring/Inputs/#extra-option-hideanswer","text":"Users are increasingly using inputs to store state , which makes no sense for a user to see. For example, when using JSXGraph users transfer the configuration of the diagram into an input via JavaScript. In many situations, it makes no sense for the student to see anything about this input. The validation can be switched off with the regular \"show validation\" option, the input box itself can be hidden with JavaScript/CSS. Putting hideanswer in the extra options stops displaying the \"teacher's answer\", e.g. at the end of the process. Do not use this option in questions in place of the normal quiz settings. For this reason it is only supported in the string input type.","title":"Extra option: hideanswer"},{"location":"en/Authoring/Inputs/#extra-option-allowempty","text":"Normally a blank , i.e. empty, answer has a special status and are not considered \"valid\". Hence, a PRT relying on an input left blank will not be traversed. Answers consisting only of whitespace are also considered as empty. The extra option allowempty allows the input to be empty. Internally an empty answer will be replaced by the Maxima atom EMPTYANSWER . Internally it is essential that the variable name of the input, (e.g. ans1 ) is really assigned a specific value. The teacher will need to deal with EMPTYANSWER tags in the PRT. We strongly recommend (with many years of experience) that teachers do not use this option without very careful thought! For example, if you don't want to give away how many answers you expect, then ask the student to provide a set of answers. Another option is to use the \"TextArea\" input type. Each line of the TextArea is validated separately, and the resulting mathematical expression is a list. The student is therefore free to choose how many expressions to type in, as the circumstances require, without a pre-defined number of input boxes. By design, it is better to use these methods than trying to combine separate inputs, some of which are empty, in the PRT later. Our experience strongly suggests this option should only be used for edge cases, and not for routine use. If you use this option when students navigate away from a page the system will \"validate\" the inputs, and hence any empty boxes will be considered an active empty choice by the student and will be assessed. If you use this option there is no way to distinguish between an active empty answer choice, and a student who deletes their answer. (The same problem occurs with radio buttons....) There are (unfortunately) some edge cases where it is useful to permit the execution of a PRT without all the inputs containing significant content. Assume you have three inputs ans1 , ans2 , ans3 contributing to a PRT, all of which have the allowempty option set because you don't want to tell the student which might be empty. Assume the correct answer has at least one entry non-empty. Then, make the first node of the PRT check ATAlgEquiv({ans1,ans2,ans3},{EMPTYANSWER}) This checks if all inputs are empty, so if true set the score and the penalty to be zero and stop. This prevents the student accruing a penalty if they navigate away with all the boxes empty, but the PRT will still execute an \"attempt\". If a teacher has three inputs ans1 , ans2 , ans3 , then they can define a set in the feedback variables as follows sa:setdifference({ans1,ans2,ans3},{EMPTYANSWER}) The variable sa will be a set containing the non-empty answers (if any). The teacher can use the EMPTYANSWER tag as a \"correct answer\".","title":"Extra option: allowempty"},{"location":"en/Authoring/Inputs/#extra-option-simp","text":"Actually simplify the student's answer during the validation process. This will allow students to type in something like makelist(k^2,k,1,8) If teacher's want this kind of thing, then a syntax hint is probably in order as well. You may need to ev(ans1,simp) explicitly in any potential response tree. It makes no sense to simplify the equivalence reasoning input type, so this has been omitted.","title":"Extra option: simp"},{"location":"en/Authoring/Inputs/#extra-option-align","text":"Controls if the student's answer is aligned 'left' or 'right' within the input box.","title":"Extra option: align"},{"location":"en/Authoring/Inputs/#extra-option-nounits","text":"As of STACK 4.3, if units are declared in a question then the whole question will use a units context for parsing inputs. For example, in a multi-part question you may use a matrix input. If you do so, and use variable names, then these will be parsed expecting them to be usits. To prevent this in a particular input, use the nounits option","title":"Extra option: nounits"},{"location":"en/Authoring/Inputs/#extra-options","text":"In the future we are likely to add additional functionality via the extra options fields. This is because the form-based support becomes ever more complex, intimidating and difficult to navigate.","title":"Extra options"},{"location":"en/Authoring/Inputs/#input-tips-and-tricks","text":"It is often sensible to use a prefix just in front of the form box. For example \\(f(x)=\\) [[input:ans1]]. This avoids all kinds of problems with students also trying to enter the prefix themselves. You could also specify units afterwards, but you might also want the student to type these in! In Maxima the input (a,b,c) is a programmatic block element (see Maxima's manual for block ). Hence we cannot use this directly for the input of coordinates. Instead, have the students type in an unnamed function like P(x,y) This technique can be used to enter a set of points {A(1,2), B(2,3)} as an answer. The op command can be used to filter out a particular point, and the args command becomes a list of coordinates.","title":"Input tips and tricks"},{"location":"en/Authoring/Inputs/#options-summary-table","text":"This table lists all options, and which inputs use/respect them. The . means the option is ignored. Options Alg Num Units Matrix Check Radio Drop T/F TextArea Equiv String Notes Box size Y Y Y Y . . . . Y Y Y Y Strict Syn Y (1) (1) Y . . . . Y Y . . Insert stars Y Y Y Y . . . . Y Y . . Syntax hint Y Y Y Y . . . . Y Y Y Y Hint att Y Y Y Y . . . . Y Y Y Y Forbidden words Y Y Y Y . . . . Y Y . . Allowed words Y Y Y Y . . . . Y Y . . Forbid float Y Y Y Y . . . . Y Y . . Lowest terms Y Y Y Y . . . . Y Y . . Check type Y Y Y Y . . . . . . . . Must verify Y Y Y Y Y Y Y Y Y Y Y . Show validation Y Y Y Y Y Y Y Y Y Y Y . Extra options: rationalize Y Y . . . . . . . . . . min/max sf/dp . Y Y . . . . . . . . . floatnum . Y . . . . . . . . . . intnum . Y . . . . . . . . . . rationalnum . Y . . . . . . . . . . negpow . . Y . . . . . . . . . allowempty Y Y Y Y . . . Y . . Y . hideanswer Y Y . . . . . Y . . Y Y simp Y Y Y Y . . . . Y . . . align Y Y Y . . . . . . . . . nounits Y Y Y Y Y Y Y . . Y . . For documentation about the various options not documented on this page look at the pages for the specific inputs in which each option is used. Notes: The numerical and units input type ignore the strict syntax option and always assume strict syntax is \"true\". Otherwise patterns for scientific numbers such as 2.23e4 will have multiplication characters inserted.","title":"Options summary table"},{"location":"en/Authoring/Inputs/#other-input-types","text":"Adding new inputs, or options for existing inputs, is a job for the developers. The only essential requirement is that the result is a valid CAS expression, which includes of course a string data type, or a list.","title":"Other input types"},{"location":"en/Authoring/JSXGraph/","text":"JSXGraph This page documents use of JSXGraph to display visuals. This is a somewhat advanced topic. For basic plots and visuals you may prefer to use Maxima to plot graphs . STACK supports inclusion of dynamic graphs using JSXGraph: http://jsxgraph.uni-bayreuth.de/wiki/ . Note, we strongly recommend you do not use an HTML-aware editor when using JSXGraph questions. Instead turn off the editor within Moodle and edit the raw HTML. Site administration > Plugins > Text editors > Manage editors Individual users can also set their editor preferences: User Dashboard > Preferences > Editor preferences > Manage editors Include basic plots This example is based on the documentation for curve and the even simpler function plotter example. To include a basic dynamically-generated sketch into a STACK question, first define the expression of the graph to be plotted in the question variables. For example a:rand(6)-3; fx:sin(x)+a; Then include the following question text, which includes a simple [[jsxgraph]] block . In particular note the lack of <script> tags which you might expect to include. <p>Type in an algebraic expression which has the graph shown below.</p> [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-10, 5, 10, -5], axis: true, showCopyright: false}); var f = board.jc.snippet('{#fx#}', true, 'x', true); board.create('functiongraph', [f,-10,10]); [[/jsxgraph]] <p>\\(f(x)=\\) [[input:ans1]] [[validation:ans1]]</p> Note the code board.jc.snippet('{#fx#}', true, 'x', true); which turns a reasonable expression for a function into the JavaScript function. You cannot just plot the functiongraph on its own. To make a working question, you will then need to add in fx as the model answer to input ans1 , a question note (e.g. \\({@fx@}\\) ) and an appropriate potential response tree. Block options You can control the size of the JSXGraph board with the width and height options. E.g. [[jsxgraph width=\"200px\" height=\"200px\"]] Automatic identifier for the div-element As initialisation of the JSXGraph board requires you to give it a reference to the div-element that will contain the graph you will need to know what that id is. With the JSXGraph-block that identifier is present in a variable named divid . Since, 4.3.3 we also provide that same identifier in a variable named BOARDID to match the behaviour of the JSXGraph Moodle filter. We generate that identifier automatically to allow one to have multiple plots even multiple copies of the same question on the same page without anyone having to worry about accidental identifier clashing. Interactive elements In this example define the question variables as fx:int(expand((x-1)*(x+1)*(x-2)),x); This question contains an interactive sliding element. <p>A graph, together with the tangent line and its slope, are shown below. Find an algebraic expression for the graph shown below.</p> [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 10, 5, -10], axis: true, showCopyright: false}); var f = board.jc.snippet('{#fx#}', true, 'x', true); var curve = board.create('functiongraph', [f,-10,10], {strokeWidth:2}); var dcurve = board.create('functiongraph', [JXG.Math.Numerics.D(f),-10,10], {strokeColor:'#ff0000', strokeWidth:1, dash:2}); var p = board.create('glider',[1,0,curve], {name:'Drag me'}); board.create('tangent',[p], {name:'Drag me'}); var q = board.create('point', [function(){return p.X();}, function(){return JXG.Math.Numerics.D(f)(p.X());} ], {withLabel:false}); board.unsuspendUpdate(); [[/jsxgraph]] <p>\\(f(x)=\\) [[input:ans1]] [[validation:ans1]]</p> In this example the student can interact with a dynamic diagram to help them understand what is going on. An example with a slider In this example we provide a simple slider. Notice in this example we use the JavaScript notation a**x for a^x and not Maxima's a^x . [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 10, 5, -10], axis: true, showCopyright: false}); var a = board.create('slider',[[-3,6],[2,6],[0,2,6]],{name:'a'}); var curve = board.create('functiongraph', [function(x) {return a.Value()**x}], {strokeWidth:2}); board.unsuspendUpdate(); [[/jsxgraph]] General considerations when building interactive graphs In general you should pay attention on how your graph reacts to the student returning to the page/question later. For example, will your graph reset to display the original situation or will it at least move all movable things to the positions the student last left them? If the student can do things that are not actually considered as part of the answer, e.g. zoom out or pan the view, do you also remember those actions? If your graph is not used for inputting answers then this is not a major issue but if it is then you will need to solve this issue. Basically, storing the state of the interactive graph is a key thing that the author of that graph needs to deal with. The basic structure of such graph logic is as follows: Load existing state or if not found initialise with defaults. Draw the graph based on that state. Attach listeners to everything that can be changed in the graph and store those changes into the state in those listeners. The simplest solution for storing state is to add a string type input field to the question. Create and hide an input with CSS, e.g. <p style=\"display:none\">[[input:stateStore]] [[validation:stateStore]]</p> (but probably not while you develop the question!) Make the input a \"string\" type. Turn off the validation and verification of the field. Use the extra option hideanswer to make sure the teacher's answer is not shown to students. That input field should not be connected to any PRTs. You can use the syntax hint feature to pass in a default value but only if that is not parametric (currently the syntax hint is not CASText: see the todo list). You can use that input field to store the state of the graph as a string, for example as a JSON-encoded structure. For example, assuming the name of the String input is named stateStore , we can store the position of a point as follows: [[jsxgraph input-ref-stateStore=\"stateRef\"]] // Note that the input-ref-X attribute above will store the element identifier of the input X in // a variable named in the attribute, you can have multiple references to multiple inputs. // Create a normal board. var board = JXG.JSXGraph.initBoard(divid, {axis: true, showCopyright: false}); // State represented as a JS-object, first define default then try loading the stored values. var state = {'x':4, 'y':3}; var stateInput = document.getElementById(stateRef); if (stateInput.value && stateInput.value != '') { state = JSON.parse(stateInput.value); } // Then make the graph represent the state var p = board.create('point',[state['x'],state['y']]); // And finally the most important thing, update the stored state when things change. p.on('drag', function() { var newState = {'x':p.X(), 'y':p.Y()}; // Encode the state as JSON for storage and store it stateInput.value = JSON.stringify(newState); }); // As a side note, you typically do not want the state storing input to be directly visible to the user // although it may be handy during development to see what happens in it. You might hide it like this: stateInput.style.display = 'none'; [[/jsxgraph]] Note, in the above example in [[jsxgraph input-ref-stateStore=\"stateRef\"]] the stateStore part of this tag directly relates to, and must match, the name of the input. In that trivial example you only have one point that you can drag around but the position of that point will be stored and it will be where you left it when you return to the page. However, the position has been stored in a String encoded in JSON format and cannot directly be used in STACK-side logic. The JSON format is however very handy if you create objects to store dynamically and want to represent things of more complex nature, but in this example we could have just as well have had two separate Numeric inputs storing just the raw 'x' and 'y' coordinates separately as raw numbers and in that case we could have used them directly in STACK's grading logic. If needed, JSON is not impossible to parse in STACK, but it is not easy (as in JavaScript) because Maxima has no map data-structures and is not object oriented. In any case, the JSON string generated in the previous example would look like this: stateStore:\"{\\\"x\\\":4,\\\"y\\\":3}\"; To parse and manipulate it you can use STACK's custom JSON parsing functions: tmp:stackjson_parse(stateStore); /* This returns a STACK-map: [\"stack_map\", [\"x\", 4], [\"y\", 3]] */ x:stackmap_get(tmp,\"x\"); /* 4 */ y:stackmap_get(tmp,\"y\"); /* 3 */ tmp:stackmap_set(tmp,\"z\",x*y); /* [\"stack_map\", [\"x\", 4], [\"y\", 3], [\"z\", 12]] */ json:stackjson_stringify(tmp); /* \"{\\\"x\\\":4,\\\"y\\\":3,\\\"z\\\":12}\" */ Convenience tools for building graphs The previous section covered the general case of storing the state of the graph and acting on it. Typically, you only need to handle a few points and maybe some sliders and for this task we provide ready-made functions that bind those primitive objects to STACK input fields. As these binding functions only deal with singular sliders and points they will also use simpler forms of passing around the values. The example in the previous section about moving the point around and storing the points position as an JSON object can be redone with the convenience functions in much simpler form. The only major differences being that the value is stored as a raw list of float values, and the input field should not be of the String type instead we can store it as Algebraic input and directly access the values, just make sure you allow float values in that input. [[jsxgraph input-ref-stateStore=\"stateRef\"]] // Create a board like normal. var board = JXG.JSXGraph.initBoard(divid, {axis: true, showCopyright: false}); // Create a point, its initial position will be the default position if no state is present. var p = board.create('point', [4, 3]); // Bind it to the input and state stored in it. stack_jxg.bind_point(stateRef, p); // As a side note, you typically do not want the state storing input to be directly visible to the user // although it may be handy during development to see what happens in it. You might hide it like this: var stateInput = document.getElementById(stateRef); stateInput.style.display = 'none'; [[/jsxgraph]] For sliders you use the function stack_jxg.bind_slider(inputRef, slider) and it stores the sliders value as a raw float. Sliders will however require that you call board.update() after binding to them, otherwise the graph may not display the stored state after reload. You should check the sample questions about JSXGraph binding for examples of these functions in action. Starting from version 4.3 there are three functions for dealing with pairs of points. Basically, if you want to represent vectors, lines or circles or anything that can be defined with just two points. stack_jxg.bind_point_dual(inputRef, point1, point2) will store the positions of the points into a single input as a list of lists, stack_jxg.bind_point_relative(inputRef, point1, point2) will also generate a list but in it the second point is represented relative to the first, and finally stack_jxg.bind_point_direction(inputRef, point1, point2) will provide the first point as coordinates and the second point as an angle and distance from the first. Convenience tools for generating lists of values. If you want to output a list of values without Maxima's normal bracket symbols you can use stack_disp_comma_separate([a,b,sin(pi)]); This function turns a list into a string representation of its arguments, without braces. Internally, it applies string to the list of values (not TeX!). However, you might still get things like %pi in the output. You can use this with mathematical input: {@stack_disp_comma_separate([a,b,sin(pi)])@} and you will get the result a, b, sin(%pi/7) (without the string quotes) because when a Maxima variable is a string we strip off the outside quotes and don't typeset this in maths mode. Discrete mathematics and graph theory. A graph can be displayed with JSXGraph, see discrete mathematics for examples.","title":"JSXGraph"},{"location":"en/Authoring/JSXGraph/#jsxgraph","text":"This page documents use of JSXGraph to display visuals. This is a somewhat advanced topic. For basic plots and visuals you may prefer to use Maxima to plot graphs . STACK supports inclusion of dynamic graphs using JSXGraph: http://jsxgraph.uni-bayreuth.de/wiki/ . Note, we strongly recommend you do not use an HTML-aware editor when using JSXGraph questions. Instead turn off the editor within Moodle and edit the raw HTML. Site administration > Plugins > Text editors > Manage editors Individual users can also set their editor preferences: User Dashboard > Preferences > Editor preferences > Manage editors","title":"JSXGraph"},{"location":"en/Authoring/JSXGraph/#include-basic-plots","text":"This example is based on the documentation for curve and the even simpler function plotter example. To include a basic dynamically-generated sketch into a STACK question, first define the expression of the graph to be plotted in the question variables. For example a:rand(6)-3; fx:sin(x)+a; Then include the following question text, which includes a simple [[jsxgraph]] block . In particular note the lack of <script> tags which you might expect to include. <p>Type in an algebraic expression which has the graph shown below.</p> [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-10, 5, 10, -5], axis: true, showCopyright: false}); var f = board.jc.snippet('{#fx#}', true, 'x', true); board.create('functiongraph', [f,-10,10]); [[/jsxgraph]] <p>\\(f(x)=\\) [[input:ans1]] [[validation:ans1]]</p> Note the code board.jc.snippet('{#fx#}', true, 'x', true); which turns a reasonable expression for a function into the JavaScript function. You cannot just plot the functiongraph on its own. To make a working question, you will then need to add in fx as the model answer to input ans1 , a question note (e.g. \\({@fx@}\\) ) and an appropriate potential response tree.","title":"Include basic plots"},{"location":"en/Authoring/JSXGraph/#block-options","text":"You can control the size of the JSXGraph board with the width and height options. E.g. [[jsxgraph width=\"200px\" height=\"200px\"]]","title":"Block options"},{"location":"en/Authoring/JSXGraph/#automatic-identifier-for-the-div-element","text":"As initialisation of the JSXGraph board requires you to give it a reference to the div-element that will contain the graph you will need to know what that id is. With the JSXGraph-block that identifier is present in a variable named divid . Since, 4.3.3 we also provide that same identifier in a variable named BOARDID to match the behaviour of the JSXGraph Moodle filter. We generate that identifier automatically to allow one to have multiple plots even multiple copies of the same question on the same page without anyone having to worry about accidental identifier clashing.","title":"Automatic identifier for the div-element"},{"location":"en/Authoring/JSXGraph/#interactive-elements","text":"In this example define the question variables as fx:int(expand((x-1)*(x+1)*(x-2)),x); This question contains an interactive sliding element. <p>A graph, together with the tangent line and its slope, are shown below. Find an algebraic expression for the graph shown below.</p> [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 10, 5, -10], axis: true, showCopyright: false}); var f = board.jc.snippet('{#fx#}', true, 'x', true); var curve = board.create('functiongraph', [f,-10,10], {strokeWidth:2}); var dcurve = board.create('functiongraph', [JXG.Math.Numerics.D(f),-10,10], {strokeColor:'#ff0000', strokeWidth:1, dash:2}); var p = board.create('glider',[1,0,curve], {name:'Drag me'}); board.create('tangent',[p], {name:'Drag me'}); var q = board.create('point', [function(){return p.X();}, function(){return JXG.Math.Numerics.D(f)(p.X());} ], {withLabel:false}); board.unsuspendUpdate(); [[/jsxgraph]] <p>\\(f(x)=\\) [[input:ans1]] [[validation:ans1]]</p> In this example the student can interact with a dynamic diagram to help them understand what is going on.","title":"Interactive elements"},{"location":"en/Authoring/JSXGraph/#an-example-with-a-slider","text":"In this example we provide a simple slider. Notice in this example we use the JavaScript notation a**x for a^x and not Maxima's a^x . [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 10, 5, -10], axis: true, showCopyright: false}); var a = board.create('slider',[[-3,6],[2,6],[0,2,6]],{name:'a'}); var curve = board.create('functiongraph', [function(x) {return a.Value()**x}], {strokeWidth:2}); board.unsuspendUpdate(); [[/jsxgraph]]","title":"An example with a slider"},{"location":"en/Authoring/JSXGraph/#general-considerations-when-building-interactive-graphs","text":"In general you should pay attention on how your graph reacts to the student returning to the page/question later. For example, will your graph reset to display the original situation or will it at least move all movable things to the positions the student last left them? If the student can do things that are not actually considered as part of the answer, e.g. zoom out or pan the view, do you also remember those actions? If your graph is not used for inputting answers then this is not a major issue but if it is then you will need to solve this issue. Basically, storing the state of the interactive graph is a key thing that the author of that graph needs to deal with. The basic structure of such graph logic is as follows: Load existing state or if not found initialise with defaults. Draw the graph based on that state. Attach listeners to everything that can be changed in the graph and store those changes into the state in those listeners. The simplest solution for storing state is to add a string type input field to the question. Create and hide an input with CSS, e.g. <p style=\"display:none\">[[input:stateStore]] [[validation:stateStore]]</p> (but probably not while you develop the question!) Make the input a \"string\" type. Turn off the validation and verification of the field. Use the extra option hideanswer to make sure the teacher's answer is not shown to students. That input field should not be connected to any PRTs. You can use the syntax hint feature to pass in a default value but only if that is not parametric (currently the syntax hint is not CASText: see the todo list). You can use that input field to store the state of the graph as a string, for example as a JSON-encoded structure. For example, assuming the name of the String input is named stateStore , we can store the position of a point as follows: [[jsxgraph input-ref-stateStore=\"stateRef\"]] // Note that the input-ref-X attribute above will store the element identifier of the input X in // a variable named in the attribute, you can have multiple references to multiple inputs. // Create a normal board. var board = JXG.JSXGraph.initBoard(divid, {axis: true, showCopyright: false}); // State represented as a JS-object, first define default then try loading the stored values. var state = {'x':4, 'y':3}; var stateInput = document.getElementById(stateRef); if (stateInput.value && stateInput.value != '') { state = JSON.parse(stateInput.value); } // Then make the graph represent the state var p = board.create('point',[state['x'],state['y']]); // And finally the most important thing, update the stored state when things change. p.on('drag', function() { var newState = {'x':p.X(), 'y':p.Y()}; // Encode the state as JSON for storage and store it stateInput.value = JSON.stringify(newState); }); // As a side note, you typically do not want the state storing input to be directly visible to the user // although it may be handy during development to see what happens in it. You might hide it like this: stateInput.style.display = 'none'; [[/jsxgraph]] Note, in the above example in [[jsxgraph input-ref-stateStore=\"stateRef\"]] the stateStore part of this tag directly relates to, and must match, the name of the input. In that trivial example you only have one point that you can drag around but the position of that point will be stored and it will be where you left it when you return to the page. However, the position has been stored in a String encoded in JSON format and cannot directly be used in STACK-side logic. The JSON format is however very handy if you create objects to store dynamically and want to represent things of more complex nature, but in this example we could have just as well have had two separate Numeric inputs storing just the raw 'x' and 'y' coordinates separately as raw numbers and in that case we could have used them directly in STACK's grading logic. If needed, JSON is not impossible to parse in STACK, but it is not easy (as in JavaScript) because Maxima has no map data-structures and is not object oriented. In any case, the JSON string generated in the previous example would look like this: stateStore:\"{\\\"x\\\":4,\\\"y\\\":3}\"; To parse and manipulate it you can use STACK's custom JSON parsing functions: tmp:stackjson_parse(stateStore); /* This returns a STACK-map: [\"stack_map\", [\"x\", 4], [\"y\", 3]] */ x:stackmap_get(tmp,\"x\"); /* 4 */ y:stackmap_get(tmp,\"y\"); /* 3 */ tmp:stackmap_set(tmp,\"z\",x*y); /* [\"stack_map\", [\"x\", 4], [\"y\", 3], [\"z\", 12]] */ json:stackjson_stringify(tmp); /* \"{\\\"x\\\":4,\\\"y\\\":3,\\\"z\\\":12}\" */","title":"General considerations when building interactive graphs"},{"location":"en/Authoring/JSXGraph/#convenience-tools-for-building-graphs","text":"The previous section covered the general case of storing the state of the graph and acting on it. Typically, you only need to handle a few points and maybe some sliders and for this task we provide ready-made functions that bind those primitive objects to STACK input fields. As these binding functions only deal with singular sliders and points they will also use simpler forms of passing around the values. The example in the previous section about moving the point around and storing the points position as an JSON object can be redone with the convenience functions in much simpler form. The only major differences being that the value is stored as a raw list of float values, and the input field should not be of the String type instead we can store it as Algebraic input and directly access the values, just make sure you allow float values in that input. [[jsxgraph input-ref-stateStore=\"stateRef\"]] // Create a board like normal. var board = JXG.JSXGraph.initBoard(divid, {axis: true, showCopyright: false}); // Create a point, its initial position will be the default position if no state is present. var p = board.create('point', [4, 3]); // Bind it to the input and state stored in it. stack_jxg.bind_point(stateRef, p); // As a side note, you typically do not want the state storing input to be directly visible to the user // although it may be handy during development to see what happens in it. You might hide it like this: var stateInput = document.getElementById(stateRef); stateInput.style.display = 'none'; [[/jsxgraph]] For sliders you use the function stack_jxg.bind_slider(inputRef, slider) and it stores the sliders value as a raw float. Sliders will however require that you call board.update() after binding to them, otherwise the graph may not display the stored state after reload. You should check the sample questions about JSXGraph binding for examples of these functions in action. Starting from version 4.3 there are three functions for dealing with pairs of points. Basically, if you want to represent vectors, lines or circles or anything that can be defined with just two points. stack_jxg.bind_point_dual(inputRef, point1, point2) will store the positions of the points into a single input as a list of lists, stack_jxg.bind_point_relative(inputRef, point1, point2) will also generate a list but in it the second point is represented relative to the first, and finally stack_jxg.bind_point_direction(inputRef, point1, point2) will provide the first point as coordinates and the second point as an angle and distance from the first.","title":"Convenience tools for building graphs"},{"location":"en/Authoring/JSXGraph/#convenience-tools-for-generating-lists-of-values","text":"If you want to output a list of values without Maxima's normal bracket symbols you can use stack_disp_comma_separate([a,b,sin(pi)]); This function turns a list into a string representation of its arguments, without braces. Internally, it applies string to the list of values (not TeX!). However, you might still get things like %pi in the output. You can use this with mathematical input: {@stack_disp_comma_separate([a,b,sin(pi)])@} and you will get the result a, b, sin(%pi/7) (without the string quotes) because when a Maxima variable is a string we strip off the outside quotes and don't typeset this in maths mode.","title":"Convenience tools for generating lists of values."},{"location":"en/Authoring/JSXGraph/#discrete-mathematics-and-graph-theory","text":"A graph can be displayed with JSXGraph, see discrete mathematics for examples.","title":"Discrete mathematics and graph theory."},{"location":"en/Authoring/Languages/","text":"Producing multilingual content STACK questions can be easily localized for different languages using the multi-language content filter. http://docs.moodle.org/en/Multi-language_content_filter . That is to say, a single question can exist in multiple languages and the user can choose the language they use. This page deals with translating text within individual questions. It does not deal with translating the Moodle and STACK interface. See the page on Language packs and translating STACK . Installation Your site administrator must enable the Moodle multi-language content filter . The multi-language content filter must be applied before the MathJax filter, otherwise strange results will occur. Authoring questions The filter works by searching the document for all multilang blocks and displaying the block that matches the selected language. <span lang=\"en\" class=\"multilang\">...Text in English...</span> <span lang=\"fi\" class=\"multilang\">...Text in Finnish...</span> If no block matching the user's language can be found, the block encountered first is displayed. In the above example the English block would be displayed if the user's language was not either English or Finnish. The English block should be the first block in the documents in order for it to be the default language in case no matching language can be found. When translating STACK assignments into different languages, it should be noted that the question text field may not contain multiple instances of input or validation fields of the same name. This means that the input and validations fields must be placed outside multilang blocks in order for them to be visible in all the available languages. The following example will illustrate this. STACK would not accept the following question text: <span lang=\"en\" class=\"multilang\"> <p> Let \\( {\\bf a} = ({@a@}, {@b@}) \\). Find a vector \\({\\bf b}\\neq {\\bf 0}\\) such that it is perpendicular to \\(\\mathbf{a}\\) </p> <p> \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\) </p> <div> [[validation:ans1]] </div> <div> [[validation:ans2]] </div> </span> <span lang=\"fi\" class=\"multilang\"> <p> Olkoon vektori \\( {\\bf a} = ({@a@}, {@b@}) \\). Anna vektori \\({\\bf b}\\neq {\\bf 0}\\) siten, ett\u00e4 vektorit ovat kohtisuorassa toisiaan vastaan. </p> <p> \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\) </p> <div> [[validation:ans1]] </div> <div> [[validation:ans2]] </div> </span> But this question text causes no issues: <span lang=\"en\" class=\"multilang\"> <p> Let \\( {\\bf a} = ({@a@}, {@b@}) \\). Find a vector \\({\\bf b}\\neq {\\bf 0}\\) such that it is perpendicular to \\(\\mathbf{a}\\) </p> </span> <span lang=\"fi\" class=\"multilang\"> <p> Olkoon vektori \\( {\\bf a} = ({@a@}, {@b@}) \\). Anna vektori \\({\\bf b}\\neq {\\bf 0}\\) siten, ett\u00e4 vektorit ovat kohtisuorassa toisiaan vastaan. </p> </span> <p> \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\) </p> <div>[[validation:ans1]]</div> <div>[[validation:ans2]]</div> Changing STACK's language If you have written a multilingual question, and a student wants to see it in a certain language, they have to change their preferred language. In Moodle, this is done by clicking on their profile, and then going to Preferences , Preferred language and selecting the language. This will not only change the language of all question text (where multilingual blocks have been used), but also the language of the default Moodle and STACK interface (if this translation is available). The specific language pack has to be installed on your server by the server administrator to allow this. More information is available in the developer docs under Translating STACK . Further reading The STACK project has been translated to many languages. Information on specific languages, installing language packs and how to contribute to translations can be found here .","title":"Producing multilingual content"},{"location":"en/Authoring/Languages/#producing-multilingual-content","text":"STACK questions can be easily localized for different languages using the multi-language content filter. http://docs.moodle.org/en/Multi-language_content_filter . That is to say, a single question can exist in multiple languages and the user can choose the language they use. This page deals with translating text within individual questions. It does not deal with translating the Moodle and STACK interface. See the page on Language packs and translating STACK .","title":"Producing multilingual content"},{"location":"en/Authoring/Languages/#installation","text":"Your site administrator must enable the Moodle multi-language content filter . The multi-language content filter must be applied before the MathJax filter, otherwise strange results will occur.","title":"Installation"},{"location":"en/Authoring/Languages/#authoring-questions","text":"The filter works by searching the document for all multilang blocks and displaying the block that matches the selected language. <span lang=\"en\" class=\"multilang\">...Text in English...</span> <span lang=\"fi\" class=\"multilang\">...Text in Finnish...</span> If no block matching the user's language can be found, the block encountered first is displayed. In the above example the English block would be displayed if the user's language was not either English or Finnish. The English block should be the first block in the documents in order for it to be the default language in case no matching language can be found. When translating STACK assignments into different languages, it should be noted that the question text field may not contain multiple instances of input or validation fields of the same name. This means that the input and validations fields must be placed outside multilang blocks in order for them to be visible in all the available languages. The following example will illustrate this. STACK would not accept the following question text: <span lang=\"en\" class=\"multilang\"> <p> Let \\( {\\bf a} = ({@a@}, {@b@}) \\). Find a vector \\({\\bf b}\\neq {\\bf 0}\\) such that it is perpendicular to \\(\\mathbf{a}\\) </p> <p> \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\) </p> <div> [[validation:ans1]] </div> <div> [[validation:ans2]] </div> </span> <span lang=\"fi\" class=\"multilang\"> <p> Olkoon vektori \\( {\\bf a} = ({@a@}, {@b@}) \\). Anna vektori \\({\\bf b}\\neq {\\bf 0}\\) siten, ett\u00e4 vektorit ovat kohtisuorassa toisiaan vastaan. </p> <p> \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\) </p> <div> [[validation:ans1]] </div> <div> [[validation:ans2]] </div> </span> But this question text causes no issues: <span lang=\"en\" class=\"multilang\"> <p> Let \\( {\\bf a} = ({@a@}, {@b@}) \\). Find a vector \\({\\bf b}\\neq {\\bf 0}\\) such that it is perpendicular to \\(\\mathbf{a}\\) </p> </span> <span lang=\"fi\" class=\"multilang\"> <p> Olkoon vektori \\( {\\bf a} = ({@a@}, {@b@}) \\). Anna vektori \\({\\bf b}\\neq {\\bf 0}\\) siten, ett\u00e4 vektorit ovat kohtisuorassa toisiaan vastaan. </p> </span> <p> \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\) </p> <div>[[validation:ans1]]</div> <div>[[validation:ans2]]</div>","title":"Authoring questions"},{"location":"en/Authoring/Languages/#changing-stacks-language","text":"If you have written a multilingual question, and a student wants to see it in a certain language, they have to change their preferred language. In Moodle, this is done by clicking on their profile, and then going to Preferences , Preferred language and selecting the language. This will not only change the language of all question text (where multilingual blocks have been used), but also the language of the default Moodle and STACK interface (if this translation is available). The specific language pack has to be installed on your server by the server administrator to allow this. More information is available in the developer docs under Translating STACK .","title":"Changing STACK's language"},{"location":"en/Authoring/Languages/#further-reading","text":"The STACK project has been translated to many languages. Information on specific languages, installing language packs and how to contribute to translations can be found here .","title":"Further reading"},{"location":"en/Authoring/Multiple_choice_questions/","text":"Multiple choice questions The whole point of STACK is not to use multiple-choice questions, but instead to have the student enter an algebraic expression! That said there are occasions where it is very useful, if not necessary, to use multiple-choice questions in their various forms. STACK's use of a CAS is then very helpful to generate random variants of multiple-choice questions based on the mathematical values. This can also be one input in a multi-part randomly generated question. E.g. you might say \"which method do you need to integrate \\sin(x)\\cos(x) ?\" and give students the choice of (i) trig functions first, (ii) parts, (iii) substitution, (iv) replace with complex exponentials. (Yes, this is a joke: all these methods can be made to work here!) Another algebraic input can then be used for the answer. Please read the section on inputs first. If you are new to STACK please note that in STACK MCQs are not the place to start learning how to author questions. Please look at the authoring quick-start guide . Multiple choice input types return a CAS object which is then assessed by the potential response tree. For this reason, these inputs do not provide \"feedback\" fields for each possible answer, as does the Moodle multiple choice input type. The goal of these input types is to provide modest facilities for MCQ. An early design decision was to restrict each of the possible answers to be a CAS expression. In particular, we decided NOT to make each possible answer CASText . Adopting CASText would have provided more flexibility but would have significantly increased the complexity of the internal code. If these features are extensively used we will consider a different input type. Model answer This input type uses the \"model answer\" both to input the teacher's answer and the other options. In this respect, this input type is unique, and the \"model answer\" field does not contain just the teacher's model answer. Constructing a correctly formed model answer is complex, and so this input type should be considered \"advanced\". New users are advised to gain confidence writing questions with algebraic inputs first, and gain experience in using Maxima lists. The \"model answer\" must be supplied in a particular form as a list of lists [[value, correct(, display)], ... ] . value is the value of the teacher's answer. correct must be either true or false . If it is not true then it will be considered to be false ! (optional) display is another CAS expression to be displayed in place of value . This can be a string value here, but it will be passed through the CAS if you choose the LaTeX display option below. display is only used in constructing the question. STACK will take value as the student's answer internally, regardless of what is set here. For example ta:[[diff(p,x),true],[p,false],[int(p,x),false]] At least one of the choices must be considered correct . However, the true and false values are only used to construct the \"teacher's correct answer\". You must still use a potential response tree to assess the student's answer as normal. STACK provides some helper functions mcq_correct(ta) takes the \"model answer\" list and returns a list of values for which correct is true. mcq_incorrect(ta) takes the \"model answer\" list and returns a list of values for which correct is false. Note, that the optional display field is only used when constructing the choices seen by the student when displaying the question. The student's answer will be the value , and this value is normally displayed to the student using the validation feedback, i.e. \"Your last answer was interpreted as...\". A fundamental design principal of STACK is that the student's answer should be a mathematical expression, and this input type is no exception. In situations where there is a significant difference between the optional display and the value which would be confusing, the only current option is to turn off validation feedback. After all, this should not be needed anyway with this input type. In the example above when a student is asked to choose the right method the value could be an integer and the display is some kind of string. An example which includes the display option is tacp:[[A, false, \"A. Direct proof\"], [B, false, \"B. Definition-chasing\"], [C, false, \"C. If and only if\"], [D, false, \"D. Exhaustive cases\"], [E, false, \"E. Induction\"], [F, false, \"F. Contrapositive\"], [G, true, \"G. Contradiction\"]]; Note in this example the value of the student's answer will be a letter which is literally a Maxima variable name. In this situation you can't really randomize the letters used easily. (Not impossible with some cunning code, but a lot of work....) If you choose to use an integer, and randomly suffle the answers then the validation feedback would be confusing, since an integer (which might be shuffled) has no correspondence to the choices selected. This behaviour is a design decision and not a bug! It may change in the future if there is sufficient demand, but it requires a significant change in STACK's internals to have parallel \"real answer\" and \"indicated answer\". Such a change might have other unintended and confusing consequences. Normally we don't permit duplicate values in the values of the teacher's answer. If the input type receives duplicate values STACK will throw an error. This probably arises from poor randomization. However it may be needed. If duplicate entries are permitted use the display option to create unique value keys with the same display. This behaviour is a design decision may change in the future. When STACK displays the \"teacher's answer\", e.g. after a quiz is due, this will be constructed from the display fields corresponding to those elements for which correct is true . I.e. the \"teacher's answer\" will be a list of things which the student could actually select. Whether the student is able to select more than one, or if more than one is actually included, is not checked. The teacher must indicate at least one choice as true . If you need \"none of these\" you must include this as an explicit option, and not rely on the student not checking any boxes in the checkbox type. Indeed, it would be impossible to distinguish the active selection of \"none of these\" from a passive failure to respond to the question. If one of the responses is x=1 \\mbox{ or } x=2 then it is probably best to use nounor which is commutative and associative. Do not use or which always simplifies its arguments. In this example x=1 or x=2 evaluates to false . HTML dropdowns cannot display LaTeX within the options. This is a restriction of HTML/MathJax (not of STACK). You can use HTML-entities within a string field. For example ta1:[[0,false,\"n/a\"],[1,true,\"&ge;\"],[2,false,\"&le;\"],[3,false,\"=\"],[4,false,\"?\"]]; Note here that an integer will returned internally. Similarly, you can include logical symbols. ta1:[[0, false, \"&#8658;\"], [1, true, \"&#8656;\"], [2, false, \"&#8660;\"]]; This will give a choice, e.g. a dropdown, from \u21d2, \u21d0 and \u21d4 and an integer will returned internally. ta1:[[0, false, \"&#8704;\"], [1, true, \"&#8707;\"]]; This will give a choice, e.g. a dropdown, from \u2200 and \u2203. ta1:[[0, true, \"c &#8712;\"], [1, false, \"c &#8713;\"]]; This will give a choice, e.g. a dropdown, from \"c \u2208\" and \"c \u2209\". Internals The dropdown and radio inputs return the value , but the checkbox type returns the student's answer as Maxima list, even if they have only chosen one option. If, when authoring a question, you switch from radio/dropdown to checkboxes or back, you will probably break a PRT because of mismatched types. For the select and radio types the first option on the list will always be \"Not answered\". This enables a student to retract an answer and return a \"blank\" response. For the checkbox type there is a fundamental ambiguity between a blank response and actively not selecting any of the provided choices, which indicates \"none of the others\". Internally STACK has a number of \"states\" for a student's answer, including BLANK , VALID , INVALID , SCORE etc. A student who has not answered will be considered BLANK . This is not invalid, and potential response trees which rely on this input type will not activate. To enable a student to indicate \"none of the others\", the teacher must add this as an explicit option. Note, this will not return an empty list as the answer as might be expected: it will be the value of that selection and you could give this option the value of null , for example, which is a Maxima atom. For the radio and dropdown types STACK always adds a \"not answered\" option as the first option. This allows a student to retract their choice, otherwise they will be unable to \"uncheck\" a radio button, which will be stored, validated and possibly assessed (to their potential detriment). We did not add support for a special internal \"none of the others\" because the teacher still needs to indicate whether this is the true or false answer to the question. To support randomisation, this needs to be done as an option in the teacher's answer list. Extra options These input types make use of the \"Extra options\" field of the input type to pass in options. These options are not case sensitive. This must be a comma-separated list of values as follows, but currently the only option is to control the display of mathematical expressions. The way the items are displayed can be controlled by the following options. LaTeX The default option is to use LaTeX to display the options, using an inline maths environment \\(...\\) . This is probably better for radio and checkboxes. It sometimes works in dropdowns, but not always and we need to test this in a wider variety of browsers. LaTeXdisplay use LaTeX to display the options, using the display maths environment \\[...\\] . LaTeXinline use LaTeX to display the options, using the inline maths environment \\(...\\) . LaTeXdisplaystyle use LaTeX to display the options, using the inline maths environment and the displaystyle option \\(\\displaystyle...\\) . casstring does not use the LaTeX value, but just prints the casstring value in <code>...</code> tags. nonotanswered removes the ``Not answered'' option from radio and dropdown. This is not recommended as it means a student has no opportunity to \"uncheck\" a radio button once selected. They may wish not to answer, rather than save an incorrect answer. Randomly shuffling the options To randomly shuffle the options create the list in the question variables and use the Maxima command random_permutation in the question variables. For example, the question variables might look like the following. /* Create a list of potential answers. */ p:sin(2*x); ta:[[diff(p,x),true],[p,false],[int(p,x),false],[cos(2*x)+c,false]]; /* The actual correct answer. */ tac:diff(p,x) /* Randomly shuffle the list \"ta\". */ ta:random_permutation(ta); /* Add in a \"None of these\" to the end of the list. The Maxima value is the atom null. */ tao:[null, false, \"None of these\"]; ta:append(ta,[tao]); These commands ensure (1) the substantive options are in a random order, and (2) that the None of these always comes at the end of the list. Note, the value for the None of these is the CAS atom null . In Maxima null has no special significance but it is a useful atom to use in this situation. As the Question Note, you might like to consider just taking the first item from each list, for example: {@maplist(first,ta)@}. The correct answer is {@tac@}. This note stores both the correct answer and the order shown to the student without the clutter of the true/false values or the optional display strings. Remember, random variants of a question are considered to be the same if and only if the question note is the same, so the random order must be part of the question note if you shuffle the options. Constructing MCQ arrays in Maxima It is not easy to construct MCQ arrays in Maxima. This section contains some tips for creating them, using Maxima's lambda command. Below is an example of a correctly constructed teacher's answer. ta:[[x^2-1,true],[x^2+1,false],[(x-1)*(x+1),true],[(x-i)*(x+i),false]] To create a list of correct answers you could use the function mcq_correct(ta) . This essentially consists of the following code. maplist(first, sublist(ta, lambda([ex], second(ex)))); The function sublist \"filters\" out those entries of ta for which the second element of the list is true. We then \"map\" first onto these entries to pull out the value. It is relatively simple to modify this code to extract the incorrect entries, the displayed forms of the correct entries etc. To go in the other direction, the first list ta1 is considered \"correct\" and the second ta2 is considered incorrect. ta1:[x^2-1,(x-1)*(x+1)]; ta1:maplist(lambda([ex],[ex, true]), ta1); ta2:[x^2+1,(x-i)*(x+i)]; ta2:maplist(lambda([ex],[ex, false]), ta2); ta:append(ta1,ta2); /* If you want to shuffle the responses then use the next line. */ ta:random_permutation(ta); Also, you can use STACK's rand_selection(L, n) to select n different elements from the list L . Say you have the following list of wrong answers and you want to take only 3 out of 5. ta2:[x^2,w^2,w^6,z^4,2*z^4]; ta2:rand_selection(ta2, 3); /* Then, as before. */ ta2:maplist(lambda([ex],[ex, false]), ta2); Another way to create an MCQ answer list is to have Maxima decide which of the answers are true. For example, in this question the student has to choose which of the answers are integers. L:[1,4/2,3.0,2.7,1/4,%pi,10028]; /* Map the appropriate predicate to the list to create the true/false list. */ A:maplist(integerp,L); /* Note the use of zip_with together with the list constructing function \"[\". */ ta:zip_with(\"[\",L,A); /* If you want to shuffle the responses then use the next line. */ ta:random_permutation(ta); MCQ helper functions STACK has helper functions to create MCQ arrays in Maxima. [ta, variant] = multiselqn(corbase, numcor, wrongbase, numwrong) This function takes two lists corbase and wrongbase and two integers numcor and numwrong . It randomly selects numcor from corbase , and numwrong from wrongbase and then creates the MCQ list ta with these selections, and an answernote variant . The function returns a list with two arguments. The first argument of the list is the MCQ array, the second is just the list of answers which is useful for the answer note. Note, this function does use random_permutation internally to randomly order the random selections. For example, the following generates random expressions for an MCQ calculus question. Note the use of ev(...) later to evaluate the derivative. trg:rand([sin(p), cos(p)]); dtrg:diff(trg, p); wrongbase:[a*trg, 2*a*x*trg, -2*a*x*trg, ev(dtrg, p=2*a*x), 2*a*x*ev(dtrg, p=2*a*x)]; p:a*x^2+b; wrongbase:ev(wrongbase); /* Now we have a value for p, the extra evaluation will use it. */ ans:diff(ev(trg), x); multisel:multiselqn([ans], 1, wrongbase, 3); ta:multisel[1]; variant:multisel[2]; In the above example there is only one correct answer, so we just select 1 from [ans] . This is fine, and we then choose three randomly generated wrong answers. This returns (for example) the values ta = [[-2*a*x*cos(a*x^2+b),false],[-sin(2*a*x),false],[a*cos(a*x^2+b),false],[-2*a*x*sin(a*x^2+b),true]]; variant = [-2*a*x*cos(a*x^2+b),-sin(2*a*x),a*cos(a*x^2+b),-2*a*x*sin(a*x^2+b)]; The following function does a similar job when we have MCQ display strings. [ta, variant] = multiselqndisplay(corbase, numcor, wrongbase, numwrong) For example, here the return values could be ta = [[3,false,2*a*x*sin(a*x^2+b)],[2,false,a*sin(a*x^2+b)],[5,false,cos(2*a*x)],[1,true,2*a*x*cos(a*x^2+b)]] variant = [3,2,5,1] The function multiselqndisplay automatically assigns numbers 1,\\cdots, k to the corbase entries, and then k+1,\\cdots, n to the wrongbase entries so that the numbers returned by the input type uniquely map to the entries in the two lists regardless of which random variant is generated. These numbers are useful internally, but not for students. The function multiselqnalpha automatically selects the appropriate number of correct and incorrect entries, permutes the list and then assigns strings \"(a)\" , \"(b)\" , \"(c)\" etc. in the correct order. The student's answer will thus be a list of strings (somewhat subverting the whole purpose of STACK in returning a genuine mathematical expression, but this has its place...). [ta, variant] = multiselqnalpha(corbase, numcor, wrongbase, numwrong, [dispstyle]) For example, here the return values (with inline maths) could be ta = [[\"(a)\",false,\"<b>(a)</b> \\\\(-2\\\\,a\\\\,x\\\\,\\\\sin \\\\left( a\\\\,x^2+b \\\\right)\\\\)\"],[\"(b)\",true,\"<b>(b)</b> \\\\(2\\\\,a\\\\,x\\\\,\\\\cos \\\\left( a\\\\,x^2+b \\\\right)\\\\)\"],[\"(c)\",false,\"<b>(c)</b> \\\\(\\\\cos \\\\left( 2\\\\,a\\\\,x \\\\right)\\\\)\"],[\"(d)\",false,\"<b>(d)</b> \\\\(2\\\\,a\\\\,x\\\\,\\\\cos \\\\left( 2\\\\,a\\\\,x \\\\right)\\\\)\"]] variant = [-2*a*x*sin(a*x^2+b),2*a*x*cos(a*x^2+b),cos(2*a*x),2*a*x*cos(2*a*x)] Notes The fifth optional argument to multiselqnalpha controls the display style of the LaTeX. Use \"i\" (a string containing i ) for inline, \"d\" for displayed and \"id\" for inline \"displaystyle\" (which is the default). Note that the \"student's\" answer will now be a string such as \"(a)\" . When you construct the PRT you will not need to check against these strings, not the original CAS expressions. The variant retains the CAS statements, in order. Do not use multiselqnalpha in conjunction with the shuffle option. There is no need as the selection are permuted, and it messes up the order of the choices for the student. Dealing with strings in MCQ A likely situation is that a teacher wants to include a language string as one of the options for a student's answer in a multiple-choice question. Recall: A fundamental design principal of STACK is that the student's answer should be a mathematical expression which can be manipulated by the CAS as a valid expression. Students are very limited in the keywords they are permitted to use in an input type. It is very likely that strings will contain keywords forbidden in student expressions. One option to overcome this is to do something like this as one option in the teacher's response: [C, false, \"(C) None of the other options\"] The optional display part of this input is displayed to the student. Their answer is the (valid) CAS atom C which the PRT will deal with appropriately. To construct appropriate arrays use the multiselqnalpha function. The quotation marks will be removed from strings, and the strings will not be wrapped <code>...</code> tags or LaTeX mathematics environments. Question authors should consider using the Moodle MCQ question type in addition to these facilities for purely text-based answers. You must protect characters within strings. E.g. in [A, true, \"A. There exists \\\\(M\\\\) such that \\\\( |a_n| &lt; M \\\\).\"] We have protected the backslash, and the inequality. The language strings are not CAStext, they are simply raw strings. It is possible to construct strings which inlcude variable values using the stack_disp function. [oc(-inf,a), false, sconcat(\"The half interval: \", stack_disp(oc(-inf,a),\"i\"))] The argument \"i\" here displays the expression \"inline\", other options are \"\" (you are responsible for maths environments), \"d\" (displayed), and \"di\" (inline but using displaystyle). If you construct strings in this way the display of any equations will not respect the display options in the particular input since variables are typically defined in the question variables and the input options are not available at that point in the code base. Dealing with plots in MCQ It is possible to use plots as the options in a STACK MCQ. Recall again the MCQ are limited to legitimate CAS objects. The plot command returns a string which is the URL of the dynamically generated image on the server. The \"value\" of this can't be assessed by the potential response trees. For this reason you must use the display option with plots and must only put the plot command in the display option. (Otherwise STACK will throw an error: this behaviour could be improved). For example, to create a correct answer consisting of three plots consider the following in the question variables. p1:plot(x,[x,-2,2],[y,-3,3]) p2:plot(x^2,[x,-2,2],[y,-3,3]) p3:plot(x^3,[x,-2,2],[y,-3,3]) ta:[[1,true,p1],[2,false,p2],[3,false,p3]] The actual CAS value of the answer returned will be the respective integer selected (radio or dropdown) or list of integers (checkbox). The PRT can then be used to check the value of the integer (or list) as normal. For this reason you will probably want to switch off the validation feedback ``your last answer was...\". Using a PRT is slight overkill, but it maintains the consistent internal design. Dealing with external images in MCQ It is also possible to embed the URL of an externally hosted image as the \"display\" field of an MCQ. The string is not checked, and is also passed through the CAS. This feature is fragile to being rejected as an invalid CAS object, and so is not recommended. (This could also be improved...) For example, the question variables could be something like i1:\"<img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z1.jpg' />\" i2:\"<img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z2.jpg' />\" i3:\"<img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z3.jpg' />\" ta:[[1,true,i1],[2,false,i2],[3,false,i3]] Writing question tests Quality control of questions is important. See the notes on testing questions. When entering test cases the question author must type in the CAS expression they expect to be the value of the student's answer (NOT the optional display field!). For example, if the teacher's answer (to a checkbox) question is the following. ta:[[x^2-1,true],[x^2+1,false],[(x-1)*(x+1),true],[(x-i)*(x+i),false]] Then the following test case contains all the \"true\" answers. [x^2-1,(x-1)*(x+1)] There is currently minimal checking that the string entered by the teacher corresponds to a valid choice in the input type. If your test case returns a blank result this is probably the problem.","title":"Multiple choice questions"},{"location":"en/Authoring/Multiple_choice_questions/#multiple-choice-questions","text":"The whole point of STACK is not to use multiple-choice questions, but instead to have the student enter an algebraic expression! That said there are occasions where it is very useful, if not necessary, to use multiple-choice questions in their various forms. STACK's use of a CAS is then very helpful to generate random variants of multiple-choice questions based on the mathematical values. This can also be one input in a multi-part randomly generated question. E.g. you might say \"which method do you need to integrate \\sin(x)\\cos(x) ?\" and give students the choice of (i) trig functions first, (ii) parts, (iii) substitution, (iv) replace with complex exponentials. (Yes, this is a joke: all these methods can be made to work here!) Another algebraic input can then be used for the answer. Please read the section on inputs first. If you are new to STACK please note that in STACK MCQs are not the place to start learning how to author questions. Please look at the authoring quick-start guide . Multiple choice input types return a CAS object which is then assessed by the potential response tree. For this reason, these inputs do not provide \"feedback\" fields for each possible answer, as does the Moodle multiple choice input type. The goal of these input types is to provide modest facilities for MCQ. An early design decision was to restrict each of the possible answers to be a CAS expression. In particular, we decided NOT to make each possible answer CASText . Adopting CASText would have provided more flexibility but would have significantly increased the complexity of the internal code. If these features are extensively used we will consider a different input type.","title":"Multiple choice questions"},{"location":"en/Authoring/Multiple_choice_questions/#model-answer","text":"This input type uses the \"model answer\" both to input the teacher's answer and the other options. In this respect, this input type is unique, and the \"model answer\" field does not contain just the teacher's model answer. Constructing a correctly formed model answer is complex, and so this input type should be considered \"advanced\". New users are advised to gain confidence writing questions with algebraic inputs first, and gain experience in using Maxima lists. The \"model answer\" must be supplied in a particular form as a list of lists [[value, correct(, display)], ... ] . value is the value of the teacher's answer. correct must be either true or false . If it is not true then it will be considered to be false ! (optional) display is another CAS expression to be displayed in place of value . This can be a string value here, but it will be passed through the CAS if you choose the LaTeX display option below. display is only used in constructing the question. STACK will take value as the student's answer internally, regardless of what is set here. For example ta:[[diff(p,x),true],[p,false],[int(p,x),false]] At least one of the choices must be considered correct . However, the true and false values are only used to construct the \"teacher's correct answer\". You must still use a potential response tree to assess the student's answer as normal. STACK provides some helper functions mcq_correct(ta) takes the \"model answer\" list and returns a list of values for which correct is true. mcq_incorrect(ta) takes the \"model answer\" list and returns a list of values for which correct is false. Note, that the optional display field is only used when constructing the choices seen by the student when displaying the question. The student's answer will be the value , and this value is normally displayed to the student using the validation feedback, i.e. \"Your last answer was interpreted as...\". A fundamental design principal of STACK is that the student's answer should be a mathematical expression, and this input type is no exception. In situations where there is a significant difference between the optional display and the value which would be confusing, the only current option is to turn off validation feedback. After all, this should not be needed anyway with this input type. In the example above when a student is asked to choose the right method the value could be an integer and the display is some kind of string. An example which includes the display option is tacp:[[A, false, \"A. Direct proof\"], [B, false, \"B. Definition-chasing\"], [C, false, \"C. If and only if\"], [D, false, \"D. Exhaustive cases\"], [E, false, \"E. Induction\"], [F, false, \"F. Contrapositive\"], [G, true, \"G. Contradiction\"]]; Note in this example the value of the student's answer will be a letter which is literally a Maxima variable name. In this situation you can't really randomize the letters used easily. (Not impossible with some cunning code, but a lot of work....) If you choose to use an integer, and randomly suffle the answers then the validation feedback would be confusing, since an integer (which might be shuffled) has no correspondence to the choices selected. This behaviour is a design decision and not a bug! It may change in the future if there is sufficient demand, but it requires a significant change in STACK's internals to have parallel \"real answer\" and \"indicated answer\". Such a change might have other unintended and confusing consequences. Normally we don't permit duplicate values in the values of the teacher's answer. If the input type receives duplicate values STACK will throw an error. This probably arises from poor randomization. However it may be needed. If duplicate entries are permitted use the display option to create unique value keys with the same display. This behaviour is a design decision may change in the future. When STACK displays the \"teacher's answer\", e.g. after a quiz is due, this will be constructed from the display fields corresponding to those elements for which correct is true . I.e. the \"teacher's answer\" will be a list of things which the student could actually select. Whether the student is able to select more than one, or if more than one is actually included, is not checked. The teacher must indicate at least one choice as true . If you need \"none of these\" you must include this as an explicit option, and not rely on the student not checking any boxes in the checkbox type. Indeed, it would be impossible to distinguish the active selection of \"none of these\" from a passive failure to respond to the question. If one of the responses is x=1 \\mbox{ or } x=2 then it is probably best to use nounor which is commutative and associative. Do not use or which always simplifies its arguments. In this example x=1 or x=2 evaluates to false . HTML dropdowns cannot display LaTeX within the options. This is a restriction of HTML/MathJax (not of STACK). You can use HTML-entities within a string field. For example ta1:[[0,false,\"n/a\"],[1,true,\"&ge;\"],[2,false,\"&le;\"],[3,false,\"=\"],[4,false,\"?\"]]; Note here that an integer will returned internally. Similarly, you can include logical symbols. ta1:[[0, false, \"&#8658;\"], [1, true, \"&#8656;\"], [2, false, \"&#8660;\"]]; This will give a choice, e.g. a dropdown, from \u21d2, \u21d0 and \u21d4 and an integer will returned internally. ta1:[[0, false, \"&#8704;\"], [1, true, \"&#8707;\"]]; This will give a choice, e.g. a dropdown, from \u2200 and \u2203. ta1:[[0, true, \"c &#8712;\"], [1, false, \"c &#8713;\"]]; This will give a choice, e.g. a dropdown, from \"c \u2208\" and \"c \u2209\".","title":"Model answer"},{"location":"en/Authoring/Multiple_choice_questions/#internals","text":"The dropdown and radio inputs return the value , but the checkbox type returns the student's answer as Maxima list, even if they have only chosen one option. If, when authoring a question, you switch from radio/dropdown to checkboxes or back, you will probably break a PRT because of mismatched types. For the select and radio types the first option on the list will always be \"Not answered\". This enables a student to retract an answer and return a \"blank\" response. For the checkbox type there is a fundamental ambiguity between a blank response and actively not selecting any of the provided choices, which indicates \"none of the others\". Internally STACK has a number of \"states\" for a student's answer, including BLANK , VALID , INVALID , SCORE etc. A student who has not answered will be considered BLANK . This is not invalid, and potential response trees which rely on this input type will not activate. To enable a student to indicate \"none of the others\", the teacher must add this as an explicit option. Note, this will not return an empty list as the answer as might be expected: it will be the value of that selection and you could give this option the value of null , for example, which is a Maxima atom. For the radio and dropdown types STACK always adds a \"not answered\" option as the first option. This allows a student to retract their choice, otherwise they will be unable to \"uncheck\" a radio button, which will be stored, validated and possibly assessed (to their potential detriment). We did not add support for a special internal \"none of the others\" because the teacher still needs to indicate whether this is the true or false answer to the question. To support randomisation, this needs to be done as an option in the teacher's answer list.","title":"Internals"},{"location":"en/Authoring/Multiple_choice_questions/#extra-options","text":"These input types make use of the \"Extra options\" field of the input type to pass in options. These options are not case sensitive. This must be a comma-separated list of values as follows, but currently the only option is to control the display of mathematical expressions. The way the items are displayed can be controlled by the following options. LaTeX The default option is to use LaTeX to display the options, using an inline maths environment \\(...\\) . This is probably better for radio and checkboxes. It sometimes works in dropdowns, but not always and we need to test this in a wider variety of browsers. LaTeXdisplay use LaTeX to display the options, using the display maths environment \\[...\\] . LaTeXinline use LaTeX to display the options, using the inline maths environment \\(...\\) . LaTeXdisplaystyle use LaTeX to display the options, using the inline maths environment and the displaystyle option \\(\\displaystyle...\\) . casstring does not use the LaTeX value, but just prints the casstring value in <code>...</code> tags. nonotanswered removes the ``Not answered'' option from radio and dropdown. This is not recommended as it means a student has no opportunity to \"uncheck\" a radio button once selected. They may wish not to answer, rather than save an incorrect answer.","title":"Extra options"},{"location":"en/Authoring/Multiple_choice_questions/#randomly-shuffling-the-options","text":"To randomly shuffle the options create the list in the question variables and use the Maxima command random_permutation in the question variables. For example, the question variables might look like the following. /* Create a list of potential answers. */ p:sin(2*x); ta:[[diff(p,x),true],[p,false],[int(p,x),false],[cos(2*x)+c,false]]; /* The actual correct answer. */ tac:diff(p,x) /* Randomly shuffle the list \"ta\". */ ta:random_permutation(ta); /* Add in a \"None of these\" to the end of the list. The Maxima value is the atom null. */ tao:[null, false, \"None of these\"]; ta:append(ta,[tao]); These commands ensure (1) the substantive options are in a random order, and (2) that the None of these always comes at the end of the list. Note, the value for the None of these is the CAS atom null . In Maxima null has no special significance but it is a useful atom to use in this situation. As the Question Note, you might like to consider just taking the first item from each list, for example: {@maplist(first,ta)@}. The correct answer is {@tac@}. This note stores both the correct answer and the order shown to the student without the clutter of the true/false values or the optional display strings. Remember, random variants of a question are considered to be the same if and only if the question note is the same, so the random order must be part of the question note if you shuffle the options.","title":"Randomly shuffling the options"},{"location":"en/Authoring/Multiple_choice_questions/#constructing-mcq-arrays-in-maxima","text":"It is not easy to construct MCQ arrays in Maxima. This section contains some tips for creating them, using Maxima's lambda command. Below is an example of a correctly constructed teacher's answer. ta:[[x^2-1,true],[x^2+1,false],[(x-1)*(x+1),true],[(x-i)*(x+i),false]] To create a list of correct answers you could use the function mcq_correct(ta) . This essentially consists of the following code. maplist(first, sublist(ta, lambda([ex], second(ex)))); The function sublist \"filters\" out those entries of ta for which the second element of the list is true. We then \"map\" first onto these entries to pull out the value. It is relatively simple to modify this code to extract the incorrect entries, the displayed forms of the correct entries etc. To go in the other direction, the first list ta1 is considered \"correct\" and the second ta2 is considered incorrect. ta1:[x^2-1,(x-1)*(x+1)]; ta1:maplist(lambda([ex],[ex, true]), ta1); ta2:[x^2+1,(x-i)*(x+i)]; ta2:maplist(lambda([ex],[ex, false]), ta2); ta:append(ta1,ta2); /* If you want to shuffle the responses then use the next line. */ ta:random_permutation(ta); Also, you can use STACK's rand_selection(L, n) to select n different elements from the list L . Say you have the following list of wrong answers and you want to take only 3 out of 5. ta2:[x^2,w^2,w^6,z^4,2*z^4]; ta2:rand_selection(ta2, 3); /* Then, as before. */ ta2:maplist(lambda([ex],[ex, false]), ta2); Another way to create an MCQ answer list is to have Maxima decide which of the answers are true. For example, in this question the student has to choose which of the answers are integers. L:[1,4/2,3.0,2.7,1/4,%pi,10028]; /* Map the appropriate predicate to the list to create the true/false list. */ A:maplist(integerp,L); /* Note the use of zip_with together with the list constructing function \"[\". */ ta:zip_with(\"[\",L,A); /* If you want to shuffle the responses then use the next line. */ ta:random_permutation(ta);","title":"Constructing MCQ arrays in Maxima"},{"location":"en/Authoring/Multiple_choice_questions/#mcq-helper-functions","text":"STACK has helper functions to create MCQ arrays in Maxima. [ta, variant] = multiselqn(corbase, numcor, wrongbase, numwrong) This function takes two lists corbase and wrongbase and two integers numcor and numwrong . It randomly selects numcor from corbase , and numwrong from wrongbase and then creates the MCQ list ta with these selections, and an answernote variant . The function returns a list with two arguments. The first argument of the list is the MCQ array, the second is just the list of answers which is useful for the answer note. Note, this function does use random_permutation internally to randomly order the random selections. For example, the following generates random expressions for an MCQ calculus question. Note the use of ev(...) later to evaluate the derivative. trg:rand([sin(p), cos(p)]); dtrg:diff(trg, p); wrongbase:[a*trg, 2*a*x*trg, -2*a*x*trg, ev(dtrg, p=2*a*x), 2*a*x*ev(dtrg, p=2*a*x)]; p:a*x^2+b; wrongbase:ev(wrongbase); /* Now we have a value for p, the extra evaluation will use it. */ ans:diff(ev(trg), x); multisel:multiselqn([ans], 1, wrongbase, 3); ta:multisel[1]; variant:multisel[2]; In the above example there is only one correct answer, so we just select 1 from [ans] . This is fine, and we then choose three randomly generated wrong answers. This returns (for example) the values ta = [[-2*a*x*cos(a*x^2+b),false],[-sin(2*a*x),false],[a*cos(a*x^2+b),false],[-2*a*x*sin(a*x^2+b),true]]; variant = [-2*a*x*cos(a*x^2+b),-sin(2*a*x),a*cos(a*x^2+b),-2*a*x*sin(a*x^2+b)]; The following function does a similar job when we have MCQ display strings. [ta, variant] = multiselqndisplay(corbase, numcor, wrongbase, numwrong) For example, here the return values could be ta = [[3,false,2*a*x*sin(a*x^2+b)],[2,false,a*sin(a*x^2+b)],[5,false,cos(2*a*x)],[1,true,2*a*x*cos(a*x^2+b)]] variant = [3,2,5,1] The function multiselqndisplay automatically assigns numbers 1,\\cdots, k to the corbase entries, and then k+1,\\cdots, n to the wrongbase entries so that the numbers returned by the input type uniquely map to the entries in the two lists regardless of which random variant is generated. These numbers are useful internally, but not for students. The function multiselqnalpha automatically selects the appropriate number of correct and incorrect entries, permutes the list and then assigns strings \"(a)\" , \"(b)\" , \"(c)\" etc. in the correct order. The student's answer will thus be a list of strings (somewhat subverting the whole purpose of STACK in returning a genuine mathematical expression, but this has its place...). [ta, variant] = multiselqnalpha(corbase, numcor, wrongbase, numwrong, [dispstyle]) For example, here the return values (with inline maths) could be ta = [[\"(a)\",false,\"<b>(a)</b> \\\\(-2\\\\,a\\\\,x\\\\,\\\\sin \\\\left( a\\\\,x^2+b \\\\right)\\\\)\"],[\"(b)\",true,\"<b>(b)</b> \\\\(2\\\\,a\\\\,x\\\\,\\\\cos \\\\left( a\\\\,x^2+b \\\\right)\\\\)\"],[\"(c)\",false,\"<b>(c)</b> \\\\(\\\\cos \\\\left( 2\\\\,a\\\\,x \\\\right)\\\\)\"],[\"(d)\",false,\"<b>(d)</b> \\\\(2\\\\,a\\\\,x\\\\,\\\\cos \\\\left( 2\\\\,a\\\\,x \\\\right)\\\\)\"]] variant = [-2*a*x*sin(a*x^2+b),2*a*x*cos(a*x^2+b),cos(2*a*x),2*a*x*cos(2*a*x)] Notes The fifth optional argument to multiselqnalpha controls the display style of the LaTeX. Use \"i\" (a string containing i ) for inline, \"d\" for displayed and \"id\" for inline \"displaystyle\" (which is the default). Note that the \"student's\" answer will now be a string such as \"(a)\" . When you construct the PRT you will not need to check against these strings, not the original CAS expressions. The variant retains the CAS statements, in order. Do not use multiselqnalpha in conjunction with the shuffle option. There is no need as the selection are permuted, and it messes up the order of the choices for the student.","title":"MCQ helper functions"},{"location":"en/Authoring/Multiple_choice_questions/#dealing-with-strings-in-mcq","text":"A likely situation is that a teacher wants to include a language string as one of the options for a student's answer in a multiple-choice question. Recall: A fundamental design principal of STACK is that the student's answer should be a mathematical expression which can be manipulated by the CAS as a valid expression. Students are very limited in the keywords they are permitted to use in an input type. It is very likely that strings will contain keywords forbidden in student expressions. One option to overcome this is to do something like this as one option in the teacher's response: [C, false, \"(C) None of the other options\"] The optional display part of this input is displayed to the student. Their answer is the (valid) CAS atom C which the PRT will deal with appropriately. To construct appropriate arrays use the multiselqnalpha function. The quotation marks will be removed from strings, and the strings will not be wrapped <code>...</code> tags or LaTeX mathematics environments. Question authors should consider using the Moodle MCQ question type in addition to these facilities for purely text-based answers. You must protect characters within strings. E.g. in [A, true, \"A. There exists \\\\(M\\\\) such that \\\\( |a_n| &lt; M \\\\).\"] We have protected the backslash, and the inequality. The language strings are not CAStext, they are simply raw strings. It is possible to construct strings which inlcude variable values using the stack_disp function. [oc(-inf,a), false, sconcat(\"The half interval: \", stack_disp(oc(-inf,a),\"i\"))] The argument \"i\" here displays the expression \"inline\", other options are \"\" (you are responsible for maths environments), \"d\" (displayed), and \"di\" (inline but using displaystyle). If you construct strings in this way the display of any equations will not respect the display options in the particular input since variables are typically defined in the question variables and the input options are not available at that point in the code base.","title":"Dealing with strings in MCQ"},{"location":"en/Authoring/Multiple_choice_questions/#dealing-with-plots-in-mcq","text":"It is possible to use plots as the options in a STACK MCQ. Recall again the MCQ are limited to legitimate CAS objects. The plot command returns a string which is the URL of the dynamically generated image on the server. The \"value\" of this can't be assessed by the potential response trees. For this reason you must use the display option with plots and must only put the plot command in the display option. (Otherwise STACK will throw an error: this behaviour could be improved). For example, to create a correct answer consisting of three plots consider the following in the question variables. p1:plot(x,[x,-2,2],[y,-3,3]) p2:plot(x^2,[x,-2,2],[y,-3,3]) p3:plot(x^3,[x,-2,2],[y,-3,3]) ta:[[1,true,p1],[2,false,p2],[3,false,p3]] The actual CAS value of the answer returned will be the respective integer selected (radio or dropdown) or list of integers (checkbox). The PRT can then be used to check the value of the integer (or list) as normal. For this reason you will probably want to switch off the validation feedback ``your last answer was...\". Using a PRT is slight overkill, but it maintains the consistent internal design.","title":"Dealing with plots in MCQ"},{"location":"en/Authoring/Multiple_choice_questions/#dealing-with-external-images-in-mcq","text":"It is also possible to embed the URL of an externally hosted image as the \"display\" field of an MCQ. The string is not checked, and is also passed through the CAS. This feature is fragile to being rejected as an invalid CAS object, and so is not recommended. (This could also be improved...) For example, the question variables could be something like i1:\"<img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z1.jpg' />\" i2:\"<img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z2.jpg' />\" i3:\"<img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z3.jpg' />\" ta:[[1,true,i1],[2,false,i2],[3,false,i3]]","title":"Dealing with external images in MCQ"},{"location":"en/Authoring/Multiple_choice_questions/#writing-question-tests","text":"Quality control of questions is important. See the notes on testing questions. When entering test cases the question author must type in the CAS expression they expect to be the value of the student's answer (NOT the optional display field!). For example, if the teacher's answer (to a checkbox) question is the following. ta:[[x^2-1,true],[x^2+1,false],[(x-1)*(x+1),true],[(x-i)*(x+i),false]] Then the following test case contains all the \"true\" answers. [x^2-1,(x-1)*(x+1)] There is currently minimal checking that the string entered by the teacher corresponds to a valid choice in the input type. If your test case returns a blank result this is probably the problem.","title":"Writing question tests"},{"location":"en/Authoring/Numerical_input/","text":"Numerical input This is documentation for the numerical input type . This input type requires the student to type in a number of some kind. Any expression with a variable will be rejected as invalid. While variable names are forbidden, by default function names are not forbidden. sin(pi/2) represents a number. If you actually want the student to type in 1 you need to forbid sin in the normal way using the forbidden words. This input type will preserve trailing zeros in a student's answer. For example, 0.00100 will keep the two trailing zeros. By default Maxima removes these, and these will also be removed in the algebraic input. Note, some things (like forbid floats) can be applied to any numbers in an algebraic input, other tests (require n decimal places) cannot and can only be applied to a single number in this input type. Options The \"Extra options\" field on the input must be a comma separated list of the following tags. Note, these options may not depend on the question variables. floatnum : requires the student's answer to be a floating-point number, as judged by Maxima's floatnump predicate. E.g. to use this and other Boolean options type floatnum:true etc. as a comma separated list in the extra options field. intnum : requires the student's answer to be an explicit integer. E.g. 6 is valid, but 2*3 , 12/2 etc. are invalid. rationalnum : requires the student's answer to be a rational number (i.e. a fraction), as judged by STACK's rational_numberp predicate. Integers are excluded here! rationalized : requires the denominator of any fractions in the student's answer to be free of surds and i , as judged by STACK's rationalized function. mindp:n : requires the student to type in n or more decimal places. maxdp:n : requires the student to type in at most n decimal places. minsf:n : requires the student to type in n or more significant figures. maxsf:n : requires the student to type in at most n significant figures. You cannot specify both decimal places and significant figures (even if they are min for one and max for the other). If mindp=maxdp=n or minsf=maxsf=n then a student will be told to type in exactly n places/figures. Note, where there is ambiguity in the number of significant figures (e.g. does 100 have 1 or 3 significant figures?) then the student will be given the benefit of the doubt.","title":"Numerical input"},{"location":"en/Authoring/Numerical_input/#numerical-input","text":"This is documentation for the numerical input type . This input type requires the student to type in a number of some kind. Any expression with a variable will be rejected as invalid. While variable names are forbidden, by default function names are not forbidden. sin(pi/2) represents a number. If you actually want the student to type in 1 you need to forbid sin in the normal way using the forbidden words. This input type will preserve trailing zeros in a student's answer. For example, 0.00100 will keep the two trailing zeros. By default Maxima removes these, and these will also be removed in the algebraic input. Note, some things (like forbid floats) can be applied to any numbers in an algebraic input, other tests (require n decimal places) cannot and can only be applied to a single number in this input type.","title":"Numerical input"},{"location":"en/Authoring/Numerical_input/#options","text":"The \"Extra options\" field on the input must be a comma separated list of the following tags. Note, these options may not depend on the question variables. floatnum : requires the student's answer to be a floating-point number, as judged by Maxima's floatnump predicate. E.g. to use this and other Boolean options type floatnum:true etc. as a comma separated list in the extra options field. intnum : requires the student's answer to be an explicit integer. E.g. 6 is valid, but 2*3 , 12/2 etc. are invalid. rationalnum : requires the student's answer to be a rational number (i.e. a fraction), as judged by STACK's rational_numberp predicate. Integers are excluded here! rationalized : requires the denominator of any fractions in the student's answer to be free of surds and i , as judged by STACK's rationalized function. mindp:n : requires the student to type in n or more decimal places. maxdp:n : requires the student to type in at most n decimal places. minsf:n : requires the student to type in n or more significant figures. maxsf:n : requires the student to type in at most n significant figures. You cannot specify both decimal places and significant figures (even if they are min for one and max for the other). If mindp=maxdp=n or minsf=maxsf=n then a student will be told to type in exactly n places/figures. Note, where there is ambiguity in the number of significant figures (e.g. does 100 have 1 or 3 significant figures?) then the student will be given the benefit of the doubt.","title":"Options"},{"location":"en/Authoring/Options/","text":"Options Options affect the behaviour of each question. Question Level Simplify See the entry on simplification . Default is true . Assume Positive This option sets the value of Maxima 's assume_pos variable. If true and the sign of a parameter x cannot be determined from the current context or other considerations, sign and asksign(x) return true . This may forestall some automatically-generated asksign queries, such as may arise from integrate or other computations Default is False Question Penalty This is the percentage of the marks deducted from each different and valid attempt which is not completely correct, when the penalty mark modification scheme is in use. The default is 10\\% of the marks available for this question, entered at 0.1 . Note that Moodle stores scores to 7 decimal places, so, 1/3 should be entered as 0.3333333 , and 2/3 as 0.6666667 . If you input any number close to 1/3 , but with less precision, then the extra digits will automatically be added. The exact range affected is that any penalty \\ge 0.33 and \\le 0.34 is changed to 0.3333333 , and any penalty \\ge 0.66 and \\le 0.67 is changed to 0.6666667 . Output The following options affect how mathematics is displayed. Multiplication Sign (none), e.g. x(x+1) Dot, e.g. x\\cdot(x+1) Cross, e.g. x\\times (x+1) In practice it is very helpful to have some kind of multiplication sign displayed to the student. The difference between xe^x \\mbox{ and } x\\,e^x is very subtle. Notice the spacing? The first means xe^x=(xe)^x the second is x*e^x . Could be quite confusing to students if there is no multiplication sign. Using x\\cdot e^x neatly solves this problem. Internally the display of multiplication signs is controlled by the STACK function make_multsgn(ex) , where the argument can be one of the strings \"cross\" , \"dot\" or \"blank\" . This can be switched part-way through a session. E.g. consider the following castext. Default: {@a*b@}. Switch to cross: {@(make_multsgn(\"cross\"), a*b)@}. Cross remains: {@a*b@}. The expression (make_multsgn(\"cross\"), a*b) uses parentheses as an abbreviation for Maxima's block command. So, the first expression make_multsgn(\"cross\") is evaluated which changes the display option to a cross. Then the second expression is evaluated and displayed as a\\times b . The new option persists in the next expression. Logic symbols How logical symbols should be displayed. The values are language, e.g. A \\mbox{ and } B or symbol, e.g. A\\land B . Surd for Square Root This option sets the value of Maxima 's sqrtdispflag When false the prefix function sqrt(x) will be displayed as x^{1/2} . Please note that Maxima (by default) does not like to use the \\sqrt{} symbol. The internal representation favours fractional powers, for very good reasons. In Maxima 5.19.1 we get: (%i1) 4*sqrt(2); (%o1) 2^(5/2) (%i2) 6*sqrt(2); (%o2) 3*2^(3/2) The discussion of this issue can be followed on the Maxima mailing list . Do you really want to continue using \\sqrt{} in your teaching? sqrt(-1) In Maxima %i is the complex unit satisfying %i^2=-1 . However, students would like to type i and physicists and engineers j . We also sometimes need to use symbols i and j for vectors. To accommodate these needs we have an option ComplexNo which provides a context for these symbols and affects the way they are displayed. Option Interpretation Display ~ ~ ~ ~ %i^2 i^2 j^2 %i i j -------- ---------------- --------- ----- ---- ----- ----- i -1 -1 j^2 i i j j -1 i^2 -1 j i j symi -1 i^2 j^2 i i j symj -1 i^2 j^2 j i j Note the use of both Roman and italic symbols in this table. Matrix parentheses See the entry on matrices . Inline and displayed fractions. The display of fractions can take two forms: inline 1/x and displayed \\frac{1}{x} . The default behaviour is displayed, i.e. using LaTeX \\frac{}{} . The function stack_disp_fractions(ex) can be used to control the display. stack_disp_fractions(\"i\") switches display to inline. stack_disp_fractions(\"d\") switches display to display. Note, for CASText the display is controlled by the prevailing setting at the moment the text is displayed, not when a variable is defined in the question variables. Hence, if you would like a single inline fraction within a CASText you will need to use Normally fractions are displayed {@1/x@}. This switches to inline {@(stack_disp_fractions(\"i\"), 1/x)@}, which persists {@1/a@}. Switch explicitly back to displayed {@(stack_disp_fractions(\"d\"),1/x)@}.","title":"Options"},{"location":"en/Authoring/Options/#options","text":"Options affect the behaviour of each question.","title":"Options"},{"location":"en/Authoring/Options/#question-level-simplify","text":"See the entry on simplification . Default is true .","title":"Question Level Simplify"},{"location":"en/Authoring/Options/#Assume_Positive","text":"This option sets the value of Maxima 's assume_pos variable. If true and the sign of a parameter x cannot be determined from the current context or other considerations, sign and asksign(x) return true . This may forestall some automatically-generated asksign queries, such as may arise from integrate or other computations Default is False","title":"Assume Positive"},{"location":"en/Authoring/Options/#Question_penalty","text":"This is the percentage of the marks deducted from each different and valid attempt which is not completely correct, when the penalty mark modification scheme is in use. The default is 10\\% of the marks available for this question, entered at 0.1 . Note that Moodle stores scores to 7 decimal places, so, 1/3 should be entered as 0.3333333 , and 2/3 as 0.6666667 . If you input any number close to 1/3 , but with less precision, then the extra digits will automatically be added. The exact range affected is that any penalty \\ge 0.33 and \\le 0.34 is changed to 0.3333333 , and any penalty \\ge 0.66 and \\le 0.67 is changed to 0.6666667 .","title":"Question Penalty"},{"location":"en/Authoring/Options/#output","text":"The following options affect how mathematics is displayed.","title":"Output"},{"location":"en/Authoring/Options/#multiplication","text":"(none), e.g. x(x+1) Dot, e.g. x\\cdot(x+1) Cross, e.g. x\\times (x+1) In practice it is very helpful to have some kind of multiplication sign displayed to the student. The difference between xe^x \\mbox{ and } x\\,e^x is very subtle. Notice the spacing? The first means xe^x=(xe)^x the second is x*e^x . Could be quite confusing to students if there is no multiplication sign. Using x\\cdot e^x neatly solves this problem. Internally the display of multiplication signs is controlled by the STACK function make_multsgn(ex) , where the argument can be one of the strings \"cross\" , \"dot\" or \"blank\" . This can be switched part-way through a session. E.g. consider the following castext. Default: {@a*b@}. Switch to cross: {@(make_multsgn(\"cross\"), a*b)@}. Cross remains: {@a*b@}. The expression (make_multsgn(\"cross\"), a*b) uses parentheses as an abbreviation for Maxima's block command. So, the first expression make_multsgn(\"cross\") is evaluated which changes the display option to a cross. Then the second expression is evaluated and displayed as a\\times b . The new option persists in the next expression.","title":"Multiplication Sign"},{"location":"en/Authoring/Options/#logicsymbol","text":"How logical symbols should be displayed. The values are language, e.g. A \\mbox{ and } B or symbol, e.g. A\\land B .","title":"Logic symbols"},{"location":"en/Authoring/Options/#surd","text":"This option sets the value of Maxima 's sqrtdispflag When false the prefix function sqrt(x) will be displayed as x^{1/2} . Please note that Maxima (by default) does not like to use the \\sqrt{} symbol. The internal representation favours fractional powers, for very good reasons. In Maxima 5.19.1 we get: (%i1) 4*sqrt(2); (%o1) 2^(5/2) (%i2) 6*sqrt(2); (%o2) 3*2^(3/2) The discussion of this issue can be followed on the Maxima mailing list . Do you really want to continue using \\sqrt{} in your teaching?","title":"Surd for Square Root"},{"location":"en/Authoring/Options/#sqrt_minus_one","text":"In Maxima %i is the complex unit satisfying %i^2=-1 . However, students would like to type i and physicists and engineers j . We also sometimes need to use symbols i and j for vectors. To accommodate these needs we have an option ComplexNo which provides a context for these symbols and affects the way they are displayed. Option Interpretation Display ~ ~ ~ ~ %i^2 i^2 j^2 %i i j -------- ---------------- --------- ----- ---- ----- ----- i -1 -1 j^2 i i j j -1 i^2 -1 j i j symi -1 i^2 j^2 i i j symj -1 i^2 j^2 j i j Note the use of both Roman and italic symbols in this table.","title":"sqrt(-1)"},{"location":"en/Authoring/Options/#matrix-parentheses","text":"See the entry on matrices .","title":"Matrix parentheses"},{"location":"en/Authoring/Options/#inline-and-displayed-fractions","text":"The display of fractions can take two forms: inline 1/x and displayed \\frac{1}{x} . The default behaviour is displayed, i.e. using LaTeX \\frac{}{} . The function stack_disp_fractions(ex) can be used to control the display. stack_disp_fractions(\"i\") switches display to inline. stack_disp_fractions(\"d\") switches display to display. Note, for CASText the display is controlled by the prevailing setting at the moment the text is displayed, not when a variable is defined in the question variables. Hence, if you would like a single inline fraction within a CASText you will need to use Normally fractions are displayed {@1/x@}. This switches to inline {@(stack_disp_fractions(\"i\"), 1/x)@}, which persists {@1/a@}. Switch explicitly back to displayed {@(stack_disp_fractions(\"d\"),1/x)@}.","title":"Inline and displayed fractions."},{"location":"en/Authoring/Potential_response_trees/","text":"Potential response trees The potential response tree is the algorithm which establishes the mathematical properties of the student's answer and assigns outcomes. For examples of how to use this, see the entry on improving feedback in the quick start guide. When is the tree used? Each potential response tree relies on one or more of the inputs . STACK automatically detects which elements are needed in the answer tests or feedback variables . The first time a student submits an input it is validated. The second time it is submitted it is available for assessment by a potential response tree. Only when all inputs upon which a tree relies are valid and submitted will the tree be traversed. Before the tree is traversed Each potential response tree can set Maxima's level of simplification . Before the tree is traversed the feedback variables are evaluated. The feedback variables may depend on the values of the question variables and the inputs . The values of these variables are available to the answer tests and all CASText fields within the tree, for example the feedback could be built using these variables. Note, you cannot define a feedback variable with the same name as an input. For example, if your input is ans1 then it is tempting to define a feedback variable ans1:exdowncase(ans1) to ensure it is in lower case. Do not do this! Please use a different variable name. This is because in some situations the answer test will choose to take the raw value of ans1 exactly as the student typed it. Any redefinition will interfere with this process. Traversing the tree A potential response tree (technically an acyclic directed graph) consists of an arbitrary number of linked nodes we call potential responses. In each node two expressions are compared using a specified answer tests , and the result is either true or false . A corresponding branch of the tree has the opportunity to each of the following. Adjust the score, (e.g. assign a value, add or subtract a value) Add written feedback specifically for the student Generate an \" answer note \", used by the teacher for evaluative assessment Nominate the next node, or end the process. Outcomes The outcomes are The raw score The penalty for this attempt Feedback to the student (see below for full details) An answer note Question Value The potential response tree itself is expected to return a numerical raw score between 0 and 1 . This number is multiplied by the question value before being returned to the student as feedback or recorded in the database. Answer note The answer note is a tag which is key for reporting purposes. It is designed to record the outcome of each answer test and the unique path through the tree. This is automatically generated, but can be changed to something meaningful. When looking for identical paths through the tree we have to do so, regardless of which random numbers were selected in this variant of the question given to a particular student. Hence, this string may not depend on any of the variables. The answer note is the concatenation of each answer note from the answer tests and then the corresponding true/false branch. This note provides a record of the result of applying each test and the route taken through the tree. This field is given a default value automatically and is used for reporting students' work. This field may not be empty and for each node in a tree the string must be unique. Do not use ; , | charaters in your answer note. These characters are used to split the response summary in the reporting scripts. Scores and penalties A score is generated by each potential response tree. Because the tree is only traversed when all inputs are valid, the score is only generated for a valid attempt. If a score is generated it is based only on the current values of the inputs. This means that it is not based on either (1) previous values of the inputs, or (2) the number of previous attempts. (Requests have been made to enable attempt number to be available, but this has not been implemented yet.) If a score is generated then a penalty is also generated. The penalty system is designed to encourage students to make repeated attempts in a formative setting. For example, a student is asked to find \\int x^2, \\mathrm{d}x . Attempt 1: x^3/3 . Score =0 , Penalty =0.1 , Feedback: \"You have missed a constant of integration.\" Attempt 2: x^3/3+c . Score =1 , Penalty =0 , Feedback: \"Well done.\" Overall, the potential response tree returns the current score minus total penalties so far, in this example 0.9 . This is multiplied by the \"Question value\" set in the potential response tree. These are summed across all potential response trees. In this example, some colleagues would prefer to give partial credit for missing a constant of integration rather than zero marks and a penalty. In a formative setting, where students have an opportunity to have another attempt, the penalty system has been found to be an effective way to encourage students to have another attempt and to read the feedback. In an examination, where no feedback is available and so further attempts are not made, different choices need to be made and partial credit would be more appropriate than a zero mark. The penalty is given a default value in the question. This is a mandatory field; the default for STACK is 0.1. Penalties are cumulative, but the student will be given the maximum possible mark. I.e. while they accumulate penalties they are never worse off by repeatedly attempting the question. In particular, if the student in the above example makes another attempt and scores 0 they will retain their mark of 0.9 . This is to encourage students to have another go in a formative setting. STACK generates a list of penalty adjusted scores for each attempt, and takes the maximum. The penalty can be assigned a different value in the nodes of the potential response tree. This means, e.g., the teacher can assign a cumulative penalty for a particular answer. The penalties are also controlled at a quiz level by the \"question behaviours\" mechanism for the quiz. Hence, if you set the behaviour as \"Adaptive mode (no penalties)\" the penalty assigned will be ignored when the question is used by students in the quiz. Formative potential response trees The outcomes of score, penalty, feedback and note are always produced. Normally, whether this information should be shown to a student is a function of the quiz, and in Moodle the question behaviour. It should not be set at the level of an individual question. There are rare, but important, situations where we need a purely formative PRT. E.g. Imagine a questions with inputs A, and B. Input A has a dedicated PRT to establish if it is correct. Input B has a dedicated PRT to establish if it is correct. There is an additional PRT which depends on both A & B. This gives formative feedback to the student, e.g. \"try a more interesting combination of answers next time!\" but is of no consequence to the correctness of A & B. With a formative potential response tree, there is no general feedback such as \"Correct answer well done\". There is never a mark (and marks for this PRT do not contribute to the question, or completeness of an answer). Response tree feedback: feedbackstyle The feedback created by PRTs has the following parts concatinated together. [Generic feedback] [Runtime errors] [PRT generated feedback] [Score ?] The [Generic feedback] is a question level option, e.g. \"Standard feedback for correct\", to provide consistency accross a question. By default the [Generic feedback] contains both an initial symbol, and a language sentence. The current \"correct\" default is Correct answer, well done. How PRT feedback is displayed is controlled by the PRT option feedbackstyle as follows. Note the Generic feedback might include the symbol, if you retain the default. Value | Options | Symbol | Generic feedback | Errors | PRT feedback | Score ? ---------------------|--------|------------------|--------|--------------|------------------------------------------ 0 | Formative | No | No | Yes | Yes | No (PRT does not contribute to score) 1 | Standard | No | Yes | Yes | Yes | Respects quiz setting 2 | Compact | Yes | No | Yes | Yes | No 3 | Symbol only | Yes | No | Yes | No | No Note that the \"Compact\" PRT feedback uses <span> tags and not <div> . This allows inclusion inline, without new paragraphs settings. However, <span> tags cannot contain a block level element, such as a <div> or <p> . So, if you include a block level element in your PRT feedback then the browser may \"spit this out\" and misplace the feedback. Also, MathJax may not display mathematics correctly on the page when there is an HTML errror such as this. If you use the \"Compact\" feedback, please author only minimal PRT feedback with no block level HTML elements.","title":"Potential response trees"},{"location":"en/Authoring/Potential_response_trees/#potential-response-trees","text":"The potential response tree is the algorithm which establishes the mathematical properties of the student's answer and assigns outcomes. For examples of how to use this, see the entry on improving feedback in the quick start guide.","title":"Potential response trees"},{"location":"en/Authoring/Potential_response_trees/#when-is-the-tree-used","text":"Each potential response tree relies on one or more of the inputs . STACK automatically detects which elements are needed in the answer tests or feedback variables . The first time a student submits an input it is validated. The second time it is submitted it is available for assessment by a potential response tree. Only when all inputs upon which a tree relies are valid and submitted will the tree be traversed.","title":"When is the tree used?"},{"location":"en/Authoring/Potential_response_trees/#before-the-tree-is-traversed","text":"Each potential response tree can set Maxima's level of simplification . Before the tree is traversed the feedback variables are evaluated. The feedback variables may depend on the values of the question variables and the inputs . The values of these variables are available to the answer tests and all CASText fields within the tree, for example the feedback could be built using these variables. Note, you cannot define a feedback variable with the same name as an input. For example, if your input is ans1 then it is tempting to define a feedback variable ans1:exdowncase(ans1) to ensure it is in lower case. Do not do this! Please use a different variable name. This is because in some situations the answer test will choose to take the raw value of ans1 exactly as the student typed it. Any redefinition will interfere with this process.","title":"Before the tree is traversed"},{"location":"en/Authoring/Potential_response_trees/#traversing-the-tree","text":"A potential response tree (technically an acyclic directed graph) consists of an arbitrary number of linked nodes we call potential responses. In each node two expressions are compared using a specified answer tests , and the result is either true or false . A corresponding branch of the tree has the opportunity to each of the following. Adjust the score, (e.g. assign a value, add or subtract a value) Add written feedback specifically for the student Generate an \" answer note \", used by the teacher for evaluative assessment Nominate the next node, or end the process.","title":"Traversing the tree"},{"location":"en/Authoring/Potential_response_trees/#outcomes","text":"The outcomes are The raw score The penalty for this attempt Feedback to the student (see below for full details) An answer note","title":"Outcomes"},{"location":"en/Authoring/Potential_response_trees/#Question_value","text":"The potential response tree itself is expected to return a numerical raw score between 0 and 1 . This number is multiplied by the question value before being returned to the student as feedback or recorded in the database.","title":"Question Value"},{"location":"en/Authoring/Potential_response_trees/#Answer_note","text":"The answer note is a tag which is key for reporting purposes. It is designed to record the outcome of each answer test and the unique path through the tree. This is automatically generated, but can be changed to something meaningful. When looking for identical paths through the tree we have to do so, regardless of which random numbers were selected in this variant of the question given to a particular student. Hence, this string may not depend on any of the variables. The answer note is the concatenation of each answer note from the answer tests and then the corresponding true/false branch. This note provides a record of the result of applying each test and the route taken through the tree. This field is given a default value automatically and is used for reporting students' work. This field may not be empty and for each node in a tree the string must be unique. Do not use ; , | charaters in your answer note. These characters are used to split the response summary in the reporting scripts.","title":"Answer note"},{"location":"en/Authoring/Potential_response_trees/#scores-and-penalties","text":"A score is generated by each potential response tree. Because the tree is only traversed when all inputs are valid, the score is only generated for a valid attempt. If a score is generated it is based only on the current values of the inputs. This means that it is not based on either (1) previous values of the inputs, or (2) the number of previous attempts. (Requests have been made to enable attempt number to be available, but this has not been implemented yet.) If a score is generated then a penalty is also generated. The penalty system is designed to encourage students to make repeated attempts in a formative setting. For example, a student is asked to find \\int x^2, \\mathrm{d}x . Attempt 1: x^3/3 . Score =0 , Penalty =0.1 , Feedback: \"You have missed a constant of integration.\" Attempt 2: x^3/3+c . Score =1 , Penalty =0 , Feedback: \"Well done.\" Overall, the potential response tree returns the current score minus total penalties so far, in this example 0.9 . This is multiplied by the \"Question value\" set in the potential response tree. These are summed across all potential response trees. In this example, some colleagues would prefer to give partial credit for missing a constant of integration rather than zero marks and a penalty. In a formative setting, where students have an opportunity to have another attempt, the penalty system has been found to be an effective way to encourage students to have another attempt and to read the feedback. In an examination, where no feedback is available and so further attempts are not made, different choices need to be made and partial credit would be more appropriate than a zero mark. The penalty is given a default value in the question. This is a mandatory field; the default for STACK is 0.1. Penalties are cumulative, but the student will be given the maximum possible mark. I.e. while they accumulate penalties they are never worse off by repeatedly attempting the question. In particular, if the student in the above example makes another attempt and scores 0 they will retain their mark of 0.9 . This is to encourage students to have another go in a formative setting. STACK generates a list of penalty adjusted scores for each attempt, and takes the maximum. The penalty can be assigned a different value in the nodes of the potential response tree. This means, e.g., the teacher can assign a cumulative penalty for a particular answer. The penalties are also controlled at a quiz level by the \"question behaviours\" mechanism for the quiz. Hence, if you set the behaviour as \"Adaptive mode (no penalties)\" the penalty assigned will be ignored when the question is used by students in the quiz.","title":"Scores and penalties"},{"location":"en/Authoring/Potential_response_trees/#formative-potential-response-trees","text":"The outcomes of score, penalty, feedback and note are always produced. Normally, whether this information should be shown to a student is a function of the quiz, and in Moodle the question behaviour. It should not be set at the level of an individual question. There are rare, but important, situations where we need a purely formative PRT. E.g. Imagine a questions with inputs A, and B. Input A has a dedicated PRT to establish if it is correct. Input B has a dedicated PRT to establish if it is correct. There is an additional PRT which depends on both A & B. This gives formative feedback to the student, e.g. \"try a more interesting combination of answers next time!\" but is of no consequence to the correctness of A & B. With a formative potential response tree, there is no general feedback such as \"Correct answer well done\". There is never a mark (and marks for this PRT do not contribute to the question, or completeness of an answer).","title":"Formative potential response trees"},{"location":"en/Authoring/Potential_response_trees/#response-tree-feedback-feedbackstyle","text":"The feedback created by PRTs has the following parts concatinated together. [Generic feedback] [Runtime errors] [PRT generated feedback] [Score ?] The [Generic feedback] is a question level option, e.g. \"Standard feedback for correct\", to provide consistency accross a question. By default the [Generic feedback] contains both an initial symbol, and a language sentence. The current \"correct\" default is Correct answer, well done. How PRT feedback is displayed is controlled by the PRT option feedbackstyle as follows. Note the Generic feedback might include the symbol, if you retain the default. Value | Options | Symbol | Generic feedback | Errors | PRT feedback | Score ? ---------------------|--------|------------------|--------|--------------|------------------------------------------ 0 | Formative | No | No | Yes | Yes | No (PRT does not contribute to score) 1 | Standard | No | Yes | Yes | Yes | Respects quiz setting 2 | Compact | Yes | No | Yes | Yes | No 3 | Symbol only | Yes | No | Yes | No | No Note that the \"Compact\" PRT feedback uses <span> tags and not <div> . This allows inclusion inline, without new paragraphs settings. However, <span> tags cannot contain a block level element, such as a <div> or <p> . So, if you include a block level element in your PRT feedback then the browser may \"spit this out\" and misplace the feedback. Also, MathJax may not display mathematics correctly on the page when there is an HTML errror such as this. If you use the \"Compact\" feedback, please author only minimal PRT feedback with no block level HTML elements.","title":"Response tree feedback: feedbackstyle"},{"location":"en/Authoring/Proof/","text":"Assessment of proof In STACK the basic assumption is that a student's answer will be a mathematical expression, e.g. a polynomial or an equation. The facilities for assessing a student's free-form proof is limited. Colleagues assessing proof might also consider semi-automatic marking . Styles From STACK 4.3 we support the following CSS styles to enable consistent display of mathematical proof, and arguments in general. General style was also introduced with the HELM materials. <div class=\"proof\"> This class is a general high level container. This is typical question style, from the Moodle theme, containing the following proof. Let P(n) be the statement [...] From which we see that. Back to the typical Moodle style. Note, the proof container is minimal, and subtle and does not intrude too much but contains a proof as a distinct entity. <div class=\"proof-block\"> This class allows the teacher to highlight sub-components of a proof. It is intended to be a nested sub-proof block of a main proof. This is typical question style, from the Moodle theme, containing the following proof. This proof has two cases. If n is odd then we have [...] and so ... If n is even then we have a. even more subcases. b. even more subcases. and so ... From which we see that in all cases the proof holds. Back to the typical Moodle style. <div class=\"proof-line\"> , <div class=\"proof-num\"> , <div class=\"proof-step\"> , <div class=\"proof-comment\"> Greater typeset structure can be gained by marking up the proof in more detail, if so desired. A typical proof consists of individual lines. Each line is numbered, so we can refer to them later. The main \"meat\" of the line is the \"proof step\" and there is an optional comment. The proof comment is designed for a comment, to allow an input to ask a question or to act as the second column in a two column proof. Consider the following proof by induction. \\(P(n)\\) 1. Let P(n) be the statement The first block of an induction proof must be a clear statement of the \"induction hypothesis\". 2. .... some maths .... Notice, in this case, we have a purely algebraic induction hypothesis. 3. Since This block is known as the \"base case\". 4. Something profound and something else 5. it follows that P(1) is true. 6. Assume that P(n) is true. This block is known as the \"induction step\". 7. .... lots of complex working .... We just consider the sum which occurs in P(n+1) and start to rearrange this. 8. More working We are assuming P(n) is true, and here we use this fact. 9. More working. 10. Which gives us what we want Notice we have rearranged the algebra to give us the right hand side of P(n+1). 11. Hence P(n+1) is true. This block is the conclusion of the proof. 12. Since P(1) and P(n) implies P(n+1) it follows that P(n) is true for all n by the principal of mathematical induction. <div class=\"proof-column\"> , <div class=\"proof-column-2\"> Alternatively, you can use columns, which are fixed at a width of 48%. The design assumes two columns and line numbers. Additionally, proof-column-2 has a different visual style for emphasis. Here is a proof of the great and wonderful theorem. The proof has two cases. 1. The proof itself is in the first column. The second column can contain comments, here in proof-column-2 style. 2. The proof continues. With further comments. 3. The second case of the proof. The second column can contain comments, here in proof-column style. 4. The proof continues. With further comments. 5. The proof continues. With further comments. 6. The proof continues, without comment. <div class=\"proof-column\"> Lines don't need to have proof-num or proof-block With further comments. The proof continues. With further comments. This concludes the proof. It is possible to use proof-column-2 style in the first column, but this looks odd and is not recommended. The proof-column-2 style is intended for only the second column. The proof-column style is intended to be used in both columns. Here is a proof by induction. Consider the following proof by induction. \\(P(n)\\) 1. Let P(n) be the statement The first block of an induction proof must be a clear statement of the \"induction hypothesis\". 2. .... some maths .... Notice, in this case, we have a purely algebraic induction hypothesis. 3. Since This block is known as the \"base case\". 4. Something profound and something else 5. it follows that P(1) is true. 6. Assume that P(n) is true. This block is known as the \"induction step\". 7. .... lots of complex working .... We just consider the sum which occurs in P(n+1) and start to rearrange this. 8. More working We are assuming P(n) is true, and here we use this fact. 9. More working. 10. Which gives us what we want Notice we have rearranged the algebra to give us the right hand side of P(n+1). 11. Hence P(n+1) is true. This block is the conclusion of the proof. 12. Since P(1) and P(n) implies P(n+1) it follows that P(n) is true for all n by the principal of mathematical induction. <ol class=\"proof-steps\"> This class enables ordered lists to have connected numbered statements. Let A be an n by n matrix and let R be the reduced row echelon form of A. We will show first that det(A) is not zero if and only if det(R) is not zero. Let E1, E2, ... Er be the elementary matrices corresponding to the elementary row operations that reduce A to R. Then Er ... E1 A = [[input:ans1]]] Taking determinants of both sides, we obtain: det(Er) ... det(E_1) det(A) = det(R). The determinants of all the elementary matrices are all [[input:ansdropdown]]] We conclude that det(A) is not zero if and only if det(R) is not zero. Now suppose that A is invertible. Then R = [[input:ans4]] Thus, det(R) = [[input:ans3]] and hence det(A) is not zero. Conversely, if det(A) is not zero then det(R) is not zero, so R cannot have a zero row. Thus R = I and A is invertible as required.","title":"Assessment of proof"},{"location":"en/Authoring/Proof/#assessment-of-proof","text":"In STACK the basic assumption is that a student's answer will be a mathematical expression, e.g. a polynomial or an equation. The facilities for assessing a student's free-form proof is limited. Colleagues assessing proof might also consider semi-automatic marking .","title":"Assessment of proof"},{"location":"en/Authoring/Proof/#styles","text":"From STACK 4.3 we support the following CSS styles to enable consistent display of mathematical proof, and arguments in general. General style was also introduced with the HELM materials.","title":"Styles"},{"location":"en/Authoring/Proof/#div-classproof","text":"This class is a general high level container. This is typical question style, from the Moodle theme, containing the following proof. Let P(n) be the statement [...] From which we see that. Back to the typical Moodle style. Note, the proof container is minimal, and subtle and does not intrude too much but contains a proof as a distinct entity.","title":"&lt;div class=\"proof\"&gt;"},{"location":"en/Authoring/Proof/#div-classproof-block","text":"This class allows the teacher to highlight sub-components of a proof. It is intended to be a nested sub-proof block of a main proof. This is typical question style, from the Moodle theme, containing the following proof. This proof has two cases. If n is odd then we have [...] and so ... If n is even then we have a. even more subcases. b. even more subcases. and so ... From which we see that in all cases the proof holds. Back to the typical Moodle style.","title":"&lt;div class=\"proof-block\"&gt;"},{"location":"en/Authoring/Proof/#div-classproof-line-div-classproof-num-div-classproof-step-div-classproof-comment","text":"Greater typeset structure can be gained by marking up the proof in more detail, if so desired. A typical proof consists of individual lines. Each line is numbered, so we can refer to them later. The main \"meat\" of the line is the \"proof step\" and there is an optional comment. The proof comment is designed for a comment, to allow an input to ask a question or to act as the second column in a two column proof. Consider the following proof by induction. \\(P(n)\\) 1. Let P(n) be the statement The first block of an induction proof must be a clear statement of the \"induction hypothesis\". 2. .... some maths .... Notice, in this case, we have a purely algebraic induction hypothesis. 3. Since This block is known as the \"base case\". 4. Something profound and something else 5. it follows that P(1) is true. 6. Assume that P(n) is true. This block is known as the \"induction step\". 7. .... lots of complex working .... We just consider the sum which occurs in P(n+1) and start to rearrange this. 8. More working We are assuming P(n) is true, and here we use this fact. 9. More working. 10. Which gives us what we want Notice we have rearranged the algebra to give us the right hand side of P(n+1). 11. Hence P(n+1) is true. This block is the conclusion of the proof. 12. Since P(1) and P(n) implies P(n+1) it follows that P(n) is true for all n by the principal of mathematical induction.","title":"&lt;div class=\"proof-line\"&gt;, &lt;div class=\"proof-num\"&gt;, &lt;div class=\"proof-step\"&gt;, &lt;div class=\"proof-comment\"&gt;"},{"location":"en/Authoring/Proof/#div-classproof-column-div-classproof-column-2","text":"Alternatively, you can use columns, which are fixed at a width of 48%. The design assumes two columns and line numbers. Additionally, proof-column-2 has a different visual style for emphasis. Here is a proof of the great and wonderful theorem. The proof has two cases. 1. The proof itself is in the first column. The second column can contain comments, here in proof-column-2 style. 2. The proof continues. With further comments. 3. The second case of the proof. The second column can contain comments, here in proof-column style. 4. The proof continues. With further comments. 5. The proof continues. With further comments. 6. The proof continues, without comment.","title":"&lt;div class=\"proof-column\"&gt;, &lt;div class=\"proof-column-2\"&gt;"},{"location":"en/Authoring/Proof/#div-classproof-column","text":"Lines don't need to have proof-num or proof-block With further comments. The proof continues. With further comments. This concludes the proof. It is possible to use proof-column-2 style in the first column, but this looks odd and is not recommended. The proof-column-2 style is intended for only the second column. The proof-column style is intended to be used in both columns. Here is a proof by induction. Consider the following proof by induction. \\(P(n)\\) 1. Let P(n) be the statement The first block of an induction proof must be a clear statement of the \"induction hypothesis\". 2. .... some maths .... Notice, in this case, we have a purely algebraic induction hypothesis. 3. Since This block is known as the \"base case\". 4. Something profound and something else 5. it follows that P(1) is true. 6. Assume that P(n) is true. This block is known as the \"induction step\". 7. .... lots of complex working .... We just consider the sum which occurs in P(n+1) and start to rearrange this. 8. More working We are assuming P(n) is true, and here we use this fact. 9. More working. 10. Which gives us what we want Notice we have rearranged the algebra to give us the right hand side of P(n+1). 11. Hence P(n+1) is true. This block is the conclusion of the proof. 12. Since P(1) and P(n) implies P(n+1) it follows that P(n) is true for all n by the principal of mathematical induction.","title":"&lt;div class=\"proof-column\"&gt;"},{"location":"en/Authoring/Proof/#ol-classproof-steps","text":"This class enables ordered lists to have connected numbered statements. Let A be an n by n matrix and let R be the reduced row echelon form of A. We will show first that det(A) is not zero if and only if det(R) is not zero. Let E1, E2, ... Er be the elementary matrices corresponding to the elementary row operations that reduce A to R. Then Er ... E1 A = [[input:ans1]]] Taking determinants of both sides, we obtain: det(Er) ... det(E_1) det(A) = det(R). The determinants of all the elementary matrices are all [[input:ansdropdown]]] We conclude that det(A) is not zero if and only if det(R) is not zero. Now suppose that A is invertible. Then R = [[input:ans4]] Thus, det(R) = [[input:ans3]] and hence det(A) is not zero. Conversely, if det(A) is not zero then det(R) is not zero, so R cannot have a zero row. Thus R = I and A is invertible as required.","title":"&lt;ol class=\"proof-steps\"&gt;"},{"location":"en/Authoring/Question_bank/","text":"How do I find the Moodle question bank? To find the STACK questions login as a teacher. To begin, go to Moodle and navigate to your course's Course administration page and, from the Question bank section, click on Questions : On the Question Bank page, press the 'Create new question' button: From the 'Choose a question type to add' dialog select 'STACK' and press 'Add': The 'Editing a STACK question' page is displayed. Now we can begin to create the actual question. Don't be put off by the amount of configuration options as, in order to get started, there are only a few we need to worry about.","title":"How do I find the Moodle question bank?"},{"location":"en/Authoring/Question_bank/#how-do-i-find-the-moodle-question-bank","text":"To find the STACK questions login as a teacher. To begin, go to Moodle and navigate to your course's Course administration page and, from the Question bank section, click on Questions : On the Question Bank page, press the 'Create new question' button: From the 'Choose a question type to add' dialog select 'STACK' and press 'Add': The 'Editing a STACK question' page is displayed. Now we can begin to create the actual question. Don't be put off by the amount of configuration options as, in order to get started, there are only a few we need to worry about.","title":"How do I find the Moodle question bank?"},{"location":"en/Authoring/Question_blocks/","text":"Question blocks Introduction Question blocks add flexibility to STACK questions by adding functional structures to the CASText. These are new from v4.0 onwards. For example, you can add in a conditional statement to selectively include materials in the version of the CASText depending on values of variables. This is useful in randomly generated contexts, especially within model solutions and randomly generated diagrams/charts. For maximum flexibility, blocks can be nested and conditionally evaluated. A body of CASText is then repeatedly processed until all blocks have been interpreted into CASText. This is a core part of CASText and so applied to all appropriate parts of the question. Note: The parameters to blocks in the question body may NOT depend on the student's answers. This means that you cannot reveal an input block based on student input, well not just by using an [[if/]] -block. But you may still adapt PRT feedback as much as you want. Such adaptation requires persistent modifiable question state and is not currently possible in STACK; however, there is work being done to create systems that would allow it. General syntax The syntax is quite similar to XML but preserving the style [[ ... ]] used in the inputs and potential response tree declarations. [[ block_type param1=\"value1\" param2='value2' ... paramN=\"valueN\" ]] Some content. [[/ block_type ]] This syntax avoids issues with the rich text editors used in Moodle but it is still recommended to use the plain text editor to avoid excess line changes and white space generated by the WYSIWYG editors. Notes In closing a block you must use [[/ \"blockname\"]] where \"blockname\" must be used, and it must match the previous opening block. White space is tolerated in block definitions and after the / in the closing block, but is not necessary. The parameters have the following syntax: param1=\"value1\" . Blocks define what are valid identifiers and parameters. The identifiers must not be in quotes (and so cannot contain spaces). The parameters must be in quotes, and either param1=\"value1\" or param1='value1' is accepted. Typically param1 will be a valid Maxima identifier, e.g. a variable name and the value would be a valid Maxima expression. The parameter value must be surrounded by quotes, and both \"value\" and 'value' are accepted. Conditional blocks The common if statement is written as: [[ if test=\"some_CAS_expression_evaluating_to_true_or_false\" ]] The expression seems to be true. [[/ if ]] The if block requires a parameter called test and the value must be a Maxima expression which evaluates to true or false . The if block uses a special syntax expansion that provides it a way to handle else cases. For example, [[ if test='oddp(rand(5))' ]] This is an odd block! [[ else ]] This is an even block! [[/ if]] There is an else if type of structure using elif (Python coders won the syntax selection vote), [[ if test='oddp(var)' ]] This is an odd block! [[ elif test='is(var=0)' ]] It might be even but it is also zero. [[ else ]] This is an even block! [[/ if]] Note that you may have to evaluate your expression explicitly. Maxima does not always evaluate predicates to true or false . For example, you might expect p<1 in the following to evaluate to true . [[ define p=\"0\" /]] \\(p\\) is now {@p@}. [[ if test=\"p<1\"]] \\(p\\) is less than 1. [[ else ]] \\(p\\) is not less than 1. [[/ if ]] However, it remains unevaluated. The true branch is therefore not satisfied. Also, the else branch is literally converted to a condition not(p<1) which in this case is also unevaluated. The overall effect is that neither the if or the else branch is included. This might be not be the expected behaviour! To address this explicitly evaluate your expressions as predicates. [[ if test=\"is(p<1)\"]] Teachers can also use evaluation with simplification and predicates as follows: [[ if test=\"ev(p<1,simp,pred)\"]] It is the responsibility of the question author to ensure that every test in an if block evaluates to true or false . Foreach loop Foreach blocks iterate over lists or sets and repeat their content redefining variables for each repetition. [[ foreach x=\"[1,2,3]\" ]]{#x#} [[/ foreach ]] You may have multiple variables and they will be iterated over in sync and the variables may also come from Maxima. Should one of the lists or set be shorter/smaller the iteration will stop when the first one ends. [[ foreach x=\"[1,2,3]\" y=\"makelist(x^2,x,4)\" ]] ({#x#},{#y#}) [[/ foreach ]] Because the foreach block needs to evaluate the lists/sets before it can do the iteration, using foreach blocks will require one additional CAS evaluation for each nested level of foreach blocks. Define block The define block is a core component of the foreach block, but it may also be used elsewhere. Its function is to change the value of a CAS variable in the middle of CASText. For example: [[ define x='1' /]] {#x#}, [[ define x='x+1' /]] {#x#}, [[ define x='x+1' /]] {#x#} should print \"1, 2, 3\". You may define multiple variables in the same block and the order of define operations is from left to right so \"[[ define a='1' b='a+1' c='a+b' /]] {#a#}, {#b#}, {#c#}\" should generate the same output. Note, the use of define provides an alternative to using the question variables. Variables here are defined on the fly. However, we do not recommend this is done routinely. the readability of the code will suffer. question variables are available elsewhere in the question, but define blocks are only available in that CASText. This feature can also be used to your advantage. Comment blocks Comment blocks allow you to put content into CASText which will not be seen by students. [[ comment ]] Place comments here which will not appear to students. [[/ comment ]] Note that, in the current form the comment block requires that the contents are syntactically correct so no mismatched blocks are possible inside comments. (We intend to change this in the future.) The debug block The special \"debug\" block allows question authors to see all the values of variables created during a session in a table. Do not leave this block in a live question! [[ debug /]] Empty blocks Some blocks do not have content. For example, the [[ define x='1' /]] block above does not include content. The following is correct syntax: [[ define x='1']] [[/ define]] But we think the following is much more direct, and clean. [[ define x='1' /]] There are other kinds of [[ emptyblocks /]] , which are useful in certain cases and developers of new blocks might like to consider this as a possibility. While the define block does not generate any visible content like all block also empty blocks may be used to generate output. [[ debug /]] is an example of this. JSXGraph blocks STACK supports inclusion of dynamic graphs using JSXGraph: http://jsxgraph.uni-bayreuth.de/wiki/ . See the specific documentation on including JSXGraph elements. [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 2, 3, -2], axis: true, showCopyright: false}); var f = board.jc.snippet('sin(1/x)', true, 'x', true); board.create('functiongraph', [f,-3,3]); [[/jsxgraph]]","title":"Question blocks"},{"location":"en/Authoring/Question_blocks/#question-blocks","text":"","title":"Question blocks"},{"location":"en/Authoring/Question_blocks/#introduction","text":"Question blocks add flexibility to STACK questions by adding functional structures to the CASText. These are new from v4.0 onwards. For example, you can add in a conditional statement to selectively include materials in the version of the CASText depending on values of variables. This is useful in randomly generated contexts, especially within model solutions and randomly generated diagrams/charts. For maximum flexibility, blocks can be nested and conditionally evaluated. A body of CASText is then repeatedly processed until all blocks have been interpreted into CASText. This is a core part of CASText and so applied to all appropriate parts of the question. Note: The parameters to blocks in the question body may NOT depend on the student's answers. This means that you cannot reveal an input block based on student input, well not just by using an [[if/]] -block. But you may still adapt PRT feedback as much as you want. Such adaptation requires persistent modifiable question state and is not currently possible in STACK; however, there is work being done to create systems that would allow it.","title":"Introduction"},{"location":"en/Authoring/Question_blocks/#general-syntax","text":"The syntax is quite similar to XML but preserving the style [[ ... ]] used in the inputs and potential response tree declarations. [[ block_type param1=\"value1\" param2='value2' ... paramN=\"valueN\" ]] Some content. [[/ block_type ]] This syntax avoids issues with the rich text editors used in Moodle but it is still recommended to use the plain text editor to avoid excess line changes and white space generated by the WYSIWYG editors. Notes In closing a block you must use [[/ \"blockname\"]] where \"blockname\" must be used, and it must match the previous opening block. White space is tolerated in block definitions and after the / in the closing block, but is not necessary. The parameters have the following syntax: param1=\"value1\" . Blocks define what are valid identifiers and parameters. The identifiers must not be in quotes (and so cannot contain spaces). The parameters must be in quotes, and either param1=\"value1\" or param1='value1' is accepted. Typically param1 will be a valid Maxima identifier, e.g. a variable name and the value would be a valid Maxima expression. The parameter value must be surrounded by quotes, and both \"value\" and 'value' are accepted.","title":"General syntax"},{"location":"en/Authoring/Question_blocks/#conditional-blocks","text":"The common if statement is written as: [[ if test=\"some_CAS_expression_evaluating_to_true_or_false\" ]] The expression seems to be true. [[/ if ]] The if block requires a parameter called test and the value must be a Maxima expression which evaluates to true or false . The if block uses a special syntax expansion that provides it a way to handle else cases. For example, [[ if test='oddp(rand(5))' ]] This is an odd block! [[ else ]] This is an even block! [[/ if]] There is an else if type of structure using elif (Python coders won the syntax selection vote), [[ if test='oddp(var)' ]] This is an odd block! [[ elif test='is(var=0)' ]] It might be even but it is also zero. [[ else ]] This is an even block! [[/ if]] Note that you may have to evaluate your expression explicitly. Maxima does not always evaluate predicates to true or false . For example, you might expect p<1 in the following to evaluate to true . [[ define p=\"0\" /]] \\(p\\) is now {@p@}. [[ if test=\"p<1\"]] \\(p\\) is less than 1. [[ else ]] \\(p\\) is not less than 1. [[/ if ]] However, it remains unevaluated. The true branch is therefore not satisfied. Also, the else branch is literally converted to a condition not(p<1) which in this case is also unevaluated. The overall effect is that neither the if or the else branch is included. This might be not be the expected behaviour! To address this explicitly evaluate your expressions as predicates. [[ if test=\"is(p<1)\"]] Teachers can also use evaluation with simplification and predicates as follows: [[ if test=\"ev(p<1,simp,pred)\"]] It is the responsibility of the question author to ensure that every test in an if block evaluates to true or false .","title":"Conditional blocks"},{"location":"en/Authoring/Question_blocks/#foreach-loop","text":"Foreach blocks iterate over lists or sets and repeat their content redefining variables for each repetition. [[ foreach x=\"[1,2,3]\" ]]{#x#} [[/ foreach ]] You may have multiple variables and they will be iterated over in sync and the variables may also come from Maxima. Should one of the lists or set be shorter/smaller the iteration will stop when the first one ends. [[ foreach x=\"[1,2,3]\" y=\"makelist(x^2,x,4)\" ]] ({#x#},{#y#}) [[/ foreach ]] Because the foreach block needs to evaluate the lists/sets before it can do the iteration, using foreach blocks will require one additional CAS evaluation for each nested level of foreach blocks.","title":"Foreach loop"},{"location":"en/Authoring/Question_blocks/#define-block","text":"The define block is a core component of the foreach block, but it may also be used elsewhere. Its function is to change the value of a CAS variable in the middle of CASText. For example: [[ define x='1' /]] {#x#}, [[ define x='x+1' /]] {#x#}, [[ define x='x+1' /]] {#x#} should print \"1, 2, 3\". You may define multiple variables in the same block and the order of define operations is from left to right so \"[[ define a='1' b='a+1' c='a+b' /]] {#a#}, {#b#}, {#c#}\" should generate the same output. Note, the use of define provides an alternative to using the question variables. Variables here are defined on the fly. However, we do not recommend this is done routinely. the readability of the code will suffer. question variables are available elsewhere in the question, but define blocks are only available in that CASText. This feature can also be used to your advantage.","title":"Define block"},{"location":"en/Authoring/Question_blocks/#comment-blocks","text":"Comment blocks allow you to put content into CASText which will not be seen by students. [[ comment ]] Place comments here which will not appear to students. [[/ comment ]] Note that, in the current form the comment block requires that the contents are syntactically correct so no mismatched blocks are possible inside comments. (We intend to change this in the future.)","title":"Comment blocks"},{"location":"en/Authoring/Question_blocks/#the-debug-block","text":"The special \"debug\" block allows question authors to see all the values of variables created during a session in a table. Do not leave this block in a live question! [[ debug /]]","title":"The debug block"},{"location":"en/Authoring/Question_blocks/#empty-blocks","text":"Some blocks do not have content. For example, the [[ define x='1' /]] block above does not include content. The following is correct syntax: [[ define x='1']] [[/ define]] But we think the following is much more direct, and clean. [[ define x='1' /]] There are other kinds of [[ emptyblocks /]] , which are useful in certain cases and developers of new blocks might like to consider this as a possibility. While the define block does not generate any visible content like all block also empty blocks may be used to generate output. [[ debug /]] is an example of this.","title":"Empty blocks"},{"location":"en/Authoring/Question_blocks/#jsxgraph-blocks","text":"STACK supports inclusion of dynamic graphs using JSXGraph: http://jsxgraph.uni-bayreuth.de/wiki/ . See the specific documentation on including JSXGraph elements. [[jsxgraph]] // boundingbox:[left, top, right, bottom] var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 2, 3, -2], axis: true, showCopyright: false}); var f = board.jc.snippet('sin(1/x)', true, 'x', true); board.create('functiongraph', [f,-3,3]); [[/jsxgraph]]","title":"JSXGraph blocks"},{"location":"en/Authoring/Question_note/","text":"Question note The question note is CASText . The question note is used to decide if randomly generated variants are the same or different. Two question variants are equal if and only if the question notes are equal. In particular, when we generate statistics about students' attempts we group attempts according to the equality of their question notes. Two variants are not necessarily different if their question variables are different, and hence a note is useful. The teacher needs to choose what identifies each unique variant - this cannot be automated. The teacher can also leave useful information about the answer in the question note. For example they might use a note such as \\[ \\frac{d}{d{@v@}}{@p@} = {@diff(p,v)@} \\] This is very helpful, particularly when students ask about the variant they were given. The teacher only need look at the question note to get both the question, and answer. The question note is used when deploying question variants.","title":"Question note"},{"location":"en/Authoring/Question_note/#question-note","text":"The question note is CASText . The question note is used to decide if randomly generated variants are the same or different. Two question variants are equal if and only if the question notes are equal. In particular, when we generate statistics about students' attempts we group attempts according to the equality of their question notes. Two variants are not necessarily different if their question variables are different, and hence a note is useful. The teacher needs to choose what identifies each unique variant - this cannot be automated. The teacher can also leave useful information about the answer in the question note. For example they might use a note such as \\[ \\frac{d}{d{@v@}}{@p@} = {@diff(p,v)@} \\] This is very helpful, particularly when students ask about the variant they were given. The teacher only need look at the question note to get both the question, and answer. The question note is used when deploying question variants.","title":"Question note"},{"location":"en/Authoring/Reporting/","text":"Reporting Reviewing students' answers closes the learning cycle for teachers by allowing them to understand what students are doing. Basic reporting is undertaken through the Moodle quiz. For example, lists of scores, etc. are available there. The Moodle quiz also calculates basic statistics based on the numerical information. To review work in more detail we need to use two important parts of the question. Please read the following two entries before continuing with this article. The question note . The answer note . Moodle quiz features Most of the day to day reporting is done through the Moodle quiz features. For detailed reporting go to Quiz administration -> Results -> Reporting The \"response\" column shows the raw Maxima input value entered by the student and the validity status, e.g. \"blank\" (not reported), \"invalid\", \"valid\", \"score\". The \"response\" column also shows the value of the answer note for each potential response tree. An example note is shown below. In this question a student has answered with (x-4)^6+c for the input ans1 . The potential response tree prt1 has executed and the note is ATInt_generic. | 1-0-F . ans1: (x-4)^6+c [score]; prt1: ATInt_generic. | 1-0-F Notes: If the potential response tree does not execute it will be reported as prt1: # to indicate it exists but was not used. Reporting is stored in the database, so you may need to \"regrade\" attempts if you update the answer notes. You can download the responses for offline analysis. Split over ; to separate inputs and separate PRT answer notes. Split the individual answer note over | to get the route through the tree, and the notes added by the answer tests. Individual STACK item analysis STACK has a bespoke basic reporting mechanism for analysing responses to questions. To access the Basic question use report you need to navigate to the question testing page. The basic question use report currently contains all attempts at the question, regardless of how many different quizzes the question appears in. The basic question use report makes use of the response summary. (For developers, this is generated by qtype_stack_question::summarise_response in question.php .) The response summary is a string consisting of the following information. The \"seed\" for the question used, enabling attempts to be grouped by question variant. The Maxima string value of each input, and its status (blank, invalid, valid, score). The answernote generated by each potential response tree. ! denotes a blank note, i.e. the PRT did not execute. Here is a raw response summary. Seed: 254530683; ans1: 15180 [score]; ans2: 24360 [score]; prt1: # = 1 | prt1-1-T; prt2: # = 0 | prt2-1-F Here we see the following. The seed used was 254530683. There are two inputs ans1: 15180 [score] ans2: 24360 [score] There are two potential response trees prt1: # = 1 | prt1-1-T The prt1 was activated, the score # returned was 1 and we see the answer note. prt2: # = 0 | prt2-1-F The prt2 was activated, the score # returned was 0 and we see the answer note. The response summary contains a lot of information in a condensed way, and can only be understood with an appreciation of the question structure itself in STACK (inputs, prts, variants) and the individual question. The report splits this information into the following, text-based, reports. Frequency of answer notes, for each PRT, regardless of which variant was used. Useful to know the route through the tree. Frequency of answer notes, for each PRT, split by |, regardless of which variant was used. Useful to understand the outcome at each node. Raw inputs, regardless of which variant was used. Raw inputs and PRT answer notes by variant. Raw data. This feature is new in STACK 4.3. Comments and suggestions for improvements are very welcome. Note, the question summary is stored in a database and will not be updated if you subsequently edit the question. If you wish to improve your question you will need to do a quiz \"regrade\" to update the basic question use report. Site-wide usage Moodle Admins can get stats on site-wide STACK usage .","title":"Reporting"},{"location":"en/Authoring/Reporting/#reporting","text":"Reviewing students' answers closes the learning cycle for teachers by allowing them to understand what students are doing. Basic reporting is undertaken through the Moodle quiz. For example, lists of scores, etc. are available there. The Moodle quiz also calculates basic statistics based on the numerical information. To review work in more detail we need to use two important parts of the question. Please read the following two entries before continuing with this article. The question note . The answer note .","title":"Reporting"},{"location":"en/Authoring/Reporting/#moodle-quiz-features","text":"Most of the day to day reporting is done through the Moodle quiz features. For detailed reporting go to Quiz administration -> Results -> Reporting The \"response\" column shows the raw Maxima input value entered by the student and the validity status, e.g. \"blank\" (not reported), \"invalid\", \"valid\", \"score\". The \"response\" column also shows the value of the answer note for each potential response tree. An example note is shown below. In this question a student has answered with (x-4)^6+c for the input ans1 . The potential response tree prt1 has executed and the note is ATInt_generic. | 1-0-F . ans1: (x-4)^6+c [score]; prt1: ATInt_generic. | 1-0-F Notes: If the potential response tree does not execute it will be reported as prt1: # to indicate it exists but was not used. Reporting is stored in the database, so you may need to \"regrade\" attempts if you update the answer notes. You can download the responses for offline analysis. Split over ; to separate inputs and separate PRT answer notes. Split the individual answer note over | to get the route through the tree, and the notes added by the answer tests.","title":"Moodle quiz features"},{"location":"en/Authoring/Reporting/#individual-stack-item-analysis","text":"STACK has a bespoke basic reporting mechanism for analysing responses to questions. To access the Basic question use report you need to navigate to the question testing page. The basic question use report currently contains all attempts at the question, regardless of how many different quizzes the question appears in. The basic question use report makes use of the response summary. (For developers, this is generated by qtype_stack_question::summarise_response in question.php .) The response summary is a string consisting of the following information. The \"seed\" for the question used, enabling attempts to be grouped by question variant. The Maxima string value of each input, and its status (blank, invalid, valid, score). The answernote generated by each potential response tree. ! denotes a blank note, i.e. the PRT did not execute. Here is a raw response summary. Seed: 254530683; ans1: 15180 [score]; ans2: 24360 [score]; prt1: # = 1 | prt1-1-T; prt2: # = 0 | prt2-1-F Here we see the following. The seed used was 254530683. There are two inputs ans1: 15180 [score] ans2: 24360 [score] There are two potential response trees prt1: # = 1 | prt1-1-T The prt1 was activated, the score # returned was 1 and we see the answer note. prt2: # = 0 | prt2-1-F The prt2 was activated, the score # returned was 0 and we see the answer note. The response summary contains a lot of information in a condensed way, and can only be understood with an appreciation of the question structure itself in STACK (inputs, prts, variants) and the individual question. The report splits this information into the following, text-based, reports. Frequency of answer notes, for each PRT, regardless of which variant was used. Useful to know the route through the tree. Frequency of answer notes, for each PRT, split by |, regardless of which variant was used. Useful to understand the outcome at each node. Raw inputs, regardless of which variant was used. Raw inputs and PRT answer notes by variant. Raw data. This feature is new in STACK 4.3. Comments and suggestions for improvements are very welcome. Note, the question summary is stored in a database and will not be updated if you subsequently edit the question. If you wish to improve your question you will need to do a quiz \"regrade\" to update the basic question use report.","title":"Individual STACK item analysis"},{"location":"en/Authoring/Reporting/#site-wide-usage","text":"Moodle Admins can get stats on site-wide STACK usage .","title":"Site-wide usage"},{"location":"en/Authoring/Sample_questions/","text":"Sample Questions STACK is distributed with sample questions in /qtype_stack/samplequestions/ The sample questions are in English. We would encourage colleagues to release their materials under a creative commons licence. Please contact the developers. Moodle courses released with STACK STACK is released with a demonstration course which contains hundreds of tested STACK questions. Many have a full worked solution and random variants, and this represents a substantial resource. /qtype_stack/samplequestions/STACK-demo.mbz You can \"restore\" this into your version of Moodle. It has a number of quizzes, pre-created with questions and deployed variants. It also has a large question bank, with questions not arranged into quizzes. Materials released with STACK The file sample_questions.xml contains the following questions. test_1_basic_integral This is a simple, single part integral question with randomization. test_2_rectangle A rectangle has length 6cm greater than its width. If it has an area of 27cm ^2 , find the dimensions of the rectangle. This is a multi-part question which illustrates follow-through marking . Get the first part wrong, but the second part correct based on the first part to see the feedback. test_3_matrix This question creates two random matrices and asks students to multiply them together. See the notes on matrices . test_4_complex Given a complex number z=ae^{ib} determine |z^{n}| and \\arg(z^{n}) . Where a , b and n are randomly generated numbers. See the authoring quick start 7 . test_5_cubic-spline In this question a student is asked to find a cubic spline. This question illustrates the following. Separate properties are established, i.e. the answer is a cubic, has the right end point values and correct derivatives at the end points. Plots are incorporated, including a plot of a student's incorrect answer. text_6_odd_even In this question a student is asked to give examples of odd and even functions. There are four separate parts. Separate properties are established by each. For two of the parts there are non-unique correct answers. Feedback based on calculations of students' answers is included. text_7_solve_quadratic In this question a student is asked to solve a quadratic by working line by line. ODE_2nd_order_linear.xml This file contains three example questions on 2nd order linear ODEs with constant coefficients. They illustrate the need to establish multiple independent properties, even in cases where the teacher might be tempted to look at the specific answer. MCQ-sample-questions.xml This file contains two example multiple choice questions. (Not the place to start when authoring in STACK: see the authoring guide for more details.) v4-syntax-samples.xml With v4.0 of STACK the CASText parts of the question gain blocks which allow the text to contain segments that are evaluated further and which may have parameters that define their behaviour. See the specific documentation about blocks for more details. Open Educational Resources The FETLAR project released a large collection of STACK questions in English covering calculus and algebra in April 2010. These are now part of the demonstration course . Questions to cover all parts of the The Map of Algebraic Manipulation . Questions to cover all of the Calculus Refresher by Dr Tony Croft and Dr Anthony Kay. Abacus is a material bank for STEM education which seeks to produce, share and host high-quality educational material between collaborators. For more information see https://abacus.aalto.fi/ Other sources of questions If you have materials you would like to release, please add the details here.","title":"Sample Questions"},{"location":"en/Authoring/Sample_questions/#sample-questions","text":"STACK is distributed with sample questions in /qtype_stack/samplequestions/ The sample questions are in English. We would encourage colleagues to release their materials under a creative commons licence. Please contact the developers.","title":"Sample Questions"},{"location":"en/Authoring/Sample_questions/#moodle-courses-released-with-stack","text":"STACK is released with a demonstration course which contains hundreds of tested STACK questions. Many have a full worked solution and random variants, and this represents a substantial resource. /qtype_stack/samplequestions/STACK-demo.mbz You can \"restore\" this into your version of Moodle. It has a number of quizzes, pre-created with questions and deployed variants. It also has a large question bank, with questions not arranged into quizzes.","title":"Moodle courses released with STACK"},{"location":"en/Authoring/Sample_questions/#materials-released-with-stack","text":"The file sample_questions.xml contains the following questions.","title":"Materials released with STACK"},{"location":"en/Authoring/Sample_questions/#test_1_basic_integral","text":"This is a simple, single part integral question with randomization.","title":"test_1_basic_integral"},{"location":"en/Authoring/Sample_questions/#test_2_rectangle","text":"A rectangle has length 6cm greater than its width. If it has an area of 27cm ^2 , find the dimensions of the rectangle. This is a multi-part question which illustrates follow-through marking . Get the first part wrong, but the second part correct based on the first part to see the feedback.","title":"test_2_rectangle"},{"location":"en/Authoring/Sample_questions/#test_3_matrix","text":"This question creates two random matrices and asks students to multiply them together. See the notes on matrices .","title":"test_3_matrix"},{"location":"en/Authoring/Sample_questions/#test_4_complex","text":"Given a complex number z=ae^{ib} determine |z^{n}| and \\arg(z^{n}) . Where a , b and n are randomly generated numbers. See the authoring quick start 7 .","title":"test_4_complex"},{"location":"en/Authoring/Sample_questions/#test_5_cubic-spline","text":"In this question a student is asked to find a cubic spline. This question illustrates the following. Separate properties are established, i.e. the answer is a cubic, has the right end point values and correct derivatives at the end points. Plots are incorporated, including a plot of a student's incorrect answer.","title":"test_5_cubic-spline"},{"location":"en/Authoring/Sample_questions/#text_6_odd_even","text":"In this question a student is asked to give examples of odd and even functions. There are four separate parts. Separate properties are established by each. For two of the parts there are non-unique correct answers. Feedback based on calculations of students' answers is included.","title":"text_6_odd_even"},{"location":"en/Authoring/Sample_questions/#text_7_solve_quadratic","text":"In this question a student is asked to solve a quadratic by working line by line.","title":"text_7_solve_quadratic"},{"location":"en/Authoring/Sample_questions/#ode_2nd_order_linearxml","text":"This file contains three example questions on 2nd order linear ODEs with constant coefficients. They illustrate the need to establish multiple independent properties, even in cases where the teacher might be tempted to look at the specific answer.","title":"ODE_2nd_order_linear.xml"},{"location":"en/Authoring/Sample_questions/#mcq-sample-questionsxml","text":"This file contains two example multiple choice questions. (Not the place to start when authoring in STACK: see the authoring guide for more details.)","title":"MCQ-sample-questions.xml"},{"location":"en/Authoring/Sample_questions/#v4-syntax-samplesxml","text":"With v4.0 of STACK the CASText parts of the question gain blocks which allow the text to contain segments that are evaluated further and which may have parameters that define their behaviour. See the specific documentation about blocks for more details.","title":"v4-syntax-samples.xml"},{"location":"en/Authoring/Sample_questions/#open-educational-resources","text":"The FETLAR project released a large collection of STACK questions in English covering calculus and algebra in April 2010. These are now part of the demonstration course . Questions to cover all parts of the The Map of Algebraic Manipulation . Questions to cover all of the Calculus Refresher by Dr Tony Croft and Dr Anthony Kay. Abacus is a material bank for STEM education which seeks to produce, share and host high-quality educational material between collaborators. For more information see https://abacus.aalto.fi/","title":"Open Educational Resources"},{"location":"en/Authoring/Sample_questions/#other-sources-of-questions","text":"If you have materials you would like to release, please add the details here.","title":"Other sources of questions"},{"location":"en/Authoring/Semi-automatic_Marking/","text":"Semi-automatic Marking The primary goal of STACK is automatic marking of students' answers. However, there are many situations where we want students to justify their answer, or provide a response which cannot be marked automatically. It is certainly possible to have students answer one of the other question types. E.g. Moodle provides an \"essay\" question type in which students can type in their answer (essay?), or the teacher can permit students to upload a file, e.g. a picture of their written response. The teacher can then mark this by hand. Another option is to automatically mark students' short answers using a question type such as the pattern match question type in Moodle. STACK provides the \"notes\" input type . There are some advantages to using the notes input, rather than an essay. It is part of a STACK question, so students' answers can be between other parts of a multi-part question. When students \"validate\" their answer, any maths types in using LaTeX is displayed. If the teacher shows validation then students get a preview of their answer, and LaTeX will be displayed. Manual grading. The notes input has a special extra option manualgraded , and the default option value is manualgraded:false . If you specify manualgraded:true then the whole STACK quesion will require manual grading! There really is no way to mix automatic and manually graded parts of a question. Therefore, if you want automatic and manual marking you must have separate questions.","title":"Semi-automatic Marking"},{"location":"en/Authoring/Semi-automatic_Marking/#semi-automatic-marking","text":"The primary goal of STACK is automatic marking of students' answers. However, there are many situations where we want students to justify their answer, or provide a response which cannot be marked automatically. It is certainly possible to have students answer one of the other question types. E.g. Moodle provides an \"essay\" question type in which students can type in their answer (essay?), or the teacher can permit students to upload a file, e.g. a picture of their written response. The teacher can then mark this by hand. Another option is to automatically mark students' short answers using a question type such as the pattern match question type in Moodle. STACK provides the \"notes\" input type . There are some advantages to using the notes input, rather than an essay. It is part of a STACK question, so students' answers can be between other parts of a multi-part question. When students \"validate\" their answer, any maths types in using LaTeX is displayed. If the teacher shows validation then students get a preview of their answer, and LaTeX will be displayed.","title":"Semi-automatic Marking"},{"location":"en/Authoring/Semi-automatic_Marking/#manual-grading","text":"The notes input has a special extra option manualgraded , and the default option value is manualgraded:false . If you specify manualgraded:true then the whole STACK quesion will require manual grading! There really is no way to mix automatic and manually graded parts of a question. Therefore, if you want automatic and manual marking you must have separate questions.","title":"Manual grading."},{"location":"en/Authoring/Tables/","text":"Tables STACK provides an intert function table for typesetting mathematical tables, provided originally to typeset truth tables in Propositional Logic . You can create a table directly. Notice the first row is a heading row. T0:table([x,x^3],[-1,-1],[0,0],[1,1],[2,8],[3,27]); Really, the table operator does nothing (very much like a matrix). Like a matrix, the arguments must be identical length lists. However, there are some special rules for the tex display. The first row is considered to be a heading, and a horizontal line is printed after the first row. There are vertical bars between internal columns of the table. There are currently no options for customising printing of borders, etc. You can highlight entries in the table using the command texcolor(\"col\", ex) . Note however, this will also underline any entries (as colour alone is poor accessibility practice.). The table T0 is displayed as {\\begin{array}{c|c} x & x^3\\\\ \\hline -1 & -1 \\\\ 0 & 0 \\\\ 1 & 1 \\\\ 2 & 8 \\\\ 3 & 27\\end{array}} . table_bool_abbreviate:true is a boolean variable. If set to true (the default) boolean entries true/false will be abbreviated to T/F respectively when creating the LaTeX for display, to keep the table small and tidy looking. All other entries in the table are typeset normally. This only affects the LaTeX display, and table entries remain boolean. table_zip_with(fn, T1, T2) combines two tables, using the binary function fn (much as zip_with combines two lists). It is instructive to look at the code for table_difference which colours entries which differ in red. table_difference(T1, T2) := table_zip_with(lambda([ex1,ex2], if ex1=ex2 then ex1 else texcolor(\"red\", ex1)), T1, T2)$ This shows which elements of T1 differ from the corresponding elements of T2 by returning elements of T1 coloured in red. If you want to identify which entries really are different then you could do something like the following. table_zip_with(lambda([ex1,ex2], is(ex1=ex2)), T1, T2) If you find yourself manipulating tables, the above funtion provides a starting point. Please ask the developers to add anything you use regularly. Examples. You can create a table via some code such as the following. Notice the use of the list constructor function \"[\" within the zip_with command. vals:[-1,0,1,2,3]; fn(ex):=ex^3; T0:apply(table, append([[x,fn(x)]], zip_with(\"[\", vals, maplist(fn, vals)))); As a question variable, or directly within CAStext. T1:truth_table(a implies b); T2:table_difference(truth_table(a xor b), truth_table(a implies b)); Here we have two tables T1 is displayed as {\\begin{array}{c|c|c} a & b & a\\rightarrow b\\\\ \\hline \\mathbf{F} & \\mathbf{F} & \\mathbf{T} \\\\ \\mathbf{F} & \\mathbf{T} & \\mathbf{T} \\\\ \\mathbf{T} & \\mathbf{F} & \\mathbf{F} \\\\ \\mathbf{T} & \\mathbf{T} & \\mathbf{T} \\end{array}} and T2 gives {\\begin{array}{c|c|c} a & b & \\color{red}{\\underline{a\\oplus b}}\\\\ \\hline \\mathbf{F} & \\mathbf{F} & \\color{red}{\\underline{\\mathbf{F} }} \\\\ \\mathbf{F} & \\mathbf{T} & \\mathbf{T} \\\\ \\mathbf{T} & \\mathbf{F} & \\color{red}{\\underline{\\mathbf{T} }} \\\\ \\mathbf{T} & \\mathbf{T} & \\color{red}{\\underline{\\mathbf{F} }}\\end{array}} Notice in both the effect of table_bool_abbreviate:true .","title":"Tables"},{"location":"en/Authoring/Tables/#tables","text":"STACK provides an intert function table for typesetting mathematical tables, provided originally to typeset truth tables in Propositional Logic . You can create a table directly. Notice the first row is a heading row. T0:table([x,x^3],[-1,-1],[0,0],[1,1],[2,8],[3,27]); Really, the table operator does nothing (very much like a matrix). Like a matrix, the arguments must be identical length lists. However, there are some special rules for the tex display. The first row is considered to be a heading, and a horizontal line is printed after the first row. There are vertical bars between internal columns of the table. There are currently no options for customising printing of borders, etc. You can highlight entries in the table using the command texcolor(\"col\", ex) . Note however, this will also underline any entries (as colour alone is poor accessibility practice.). The table T0 is displayed as {\\begin{array}{c|c} x & x^3\\\\ \\hline -1 & -1 \\\\ 0 & 0 \\\\ 1 & 1 \\\\ 2 & 8 \\\\ 3 & 27\\end{array}} . table_bool_abbreviate:true is a boolean variable. If set to true (the default) boolean entries true/false will be abbreviated to T/F respectively when creating the LaTeX for display, to keep the table small and tidy looking. All other entries in the table are typeset normally. This only affects the LaTeX display, and table entries remain boolean. table_zip_with(fn, T1, T2) combines two tables, using the binary function fn (much as zip_with combines two lists). It is instructive to look at the code for table_difference which colours entries which differ in red. table_difference(T1, T2) := table_zip_with(lambda([ex1,ex2], if ex1=ex2 then ex1 else texcolor(\"red\", ex1)), T1, T2)$ This shows which elements of T1 differ from the corresponding elements of T2 by returning elements of T1 coloured in red. If you want to identify which entries really are different then you could do something like the following. table_zip_with(lambda([ex1,ex2], is(ex1=ex2)), T1, T2) If you find yourself manipulating tables, the above funtion provides a starting point. Please ask the developers to add anything you use regularly.","title":"Tables"},{"location":"en/Authoring/Tables/#examples","text":"You can create a table via some code such as the following. Notice the use of the list constructor function \"[\" within the zip_with command. vals:[-1,0,1,2,3]; fn(ex):=ex^3; T0:apply(table, append([[x,fn(x)]], zip_with(\"[\", vals, maplist(fn, vals)))); As a question variable, or directly within CAStext. T1:truth_table(a implies b); T2:table_difference(truth_table(a xor b), truth_table(a implies b)); Here we have two tables T1 is displayed as {\\begin{array}{c|c|c} a & b & a\\rightarrow b\\\\ \\hline \\mathbf{F} & \\mathbf{F} & \\mathbf{T} \\\\ \\mathbf{F} & \\mathbf{T} & \\mathbf{T} \\\\ \\mathbf{T} & \\mathbf{F} & \\mathbf{F} \\\\ \\mathbf{T} & \\mathbf{T} & \\mathbf{T} \\end{array}} and T2 gives {\\begin{array}{c|c|c} a & b & \\color{red}{\\underline{a\\oplus b}}\\\\ \\hline \\mathbf{F} & \\mathbf{F} & \\color{red}{\\underline{\\mathbf{F} }} \\\\ \\mathbf{F} & \\mathbf{T} & \\mathbf{T} \\\\ \\mathbf{T} & \\mathbf{F} & \\color{red}{\\underline{\\mathbf{T} }} \\\\ \\mathbf{T} & \\mathbf{T} & \\color{red}{\\underline{\\mathbf{F} }}\\end{array}} Notice in both the effect of table_bool_abbreviate:true .","title":"Examples."},{"location":"en/Authoring/Testing/","text":"Testing, debugging and quality control This page deals with testing questions and quality control. This is largely done through the question test functionality. Question authoring checklist High-quality question production needs care at each stage. Minimal requirements The question name should be meaningful and consistent, i.e. match up to course, section and topic. E.g. 2018ILA-Wk3-Q2: equation of plane . Is the phrasing of the question clear to students? Will students know how to input an answer? Could a \"syntax hint\" or message in the question help? Can \"validation\" help, e.g. by telling students how many significant figures are expected? (See the \"numbers\" input type.) Use question variable stubs throughout, to enable efficient random generation. (E.g. define the correct answer in question variables, rather than hard-wiring a specific expression). Always make sure the question marks the correct answer as correct! Add question tests for one correct and at least one incorrect variant. (See below.) Check all options in the question, inputs and PRTs. Phase 1 Minimal random variants. Worked solution (\"General feedback\") reflecting the random variables. Consider likely mistakes, and add feedback to test for this. Add at least one question test to test for each eventuality identified above. Phase 2 Use data obtained from one cycle of attempts by students. Did the question operate correctly? E.g. were correct answers correctly marked, and incorrect answers rejected? What did students get wrong? Is there a reason for these answers such as a common misconception? If so, add nodes to the PRTs to test for this and improve feedback. Add further question tests to test each misconception. Is there any significant difference between random variants? Testing for quality control It is important to test questions to ensure they work correctly. One approach would be for the teacher to repeatedly test them with various random numbers and inputs. But this is inefficient and unreliable. Question Tests provide an automated mechanism through which the author may establish with confidence that the Potential Response Trees are processing the student answer as expected. They are based on the concept of \"unit testing\" from software development. Question variables can be included in the tests; indeed these are needed to define test inputs in the context of random values. Each test assigns values to any/all of the inputs. These values may, naturally, depend on the question variables . values for the score and any penalty. Answer notes from each of the potential response trees . The teacher can opt to run the question tests from the preview window. STACK automatically takes each test, assigns the values to inputs and attempts to submit it. The results of the last answer note from each potential response tree is compared to that specified by the teacher. Notice that this is a limitation of the system. Specifying the complete route through the potential response tree would be too difficult and would discourage teachers from writing tests. If the score, penalty and answer note generated by each potential response tree matches that specified by the teacher, then the test will PASS, otherwise the test will FAIL. Note that failure of a test is a mismatch between outputs and expected outputs, not necessarily a sign that something is wrong with the question itself! The teacher can also examine by hand the outcomes generated by each step of each test, including full feedback generated. In this way, the teacher can record, within the question itself, how they expect the marking scheme to work for a variety of student answers. Writing tests Author and save your question. From the Question bank, choose the Preview option. The Preview question window will open. If you have authority to edit the question, then the top right of the question window will contain a link to question tests and deployed variants... . Follow this link. This page manages both question tests and deployed variants. Initially you will have no tests or deployed variants. At the bottom of this page choose Add a test case... Specify values for each input. This may use the question variables. The values of these variables will be used for any random variants. Specify the expected outcomes for each potential response tree. This includes the score, penalty and answer note. Note : currently only the last Answer Note, not the whole path through the potential response tree, is examined. This is a limitation. Once you have added the test case, STACK will automatically validate and submit these responses and display the outcomes. You may add as many test cases are you need. It is sensible to add in The correct response One example of each distinction you wish to make, i.e. if you have added specific feedback then provide an answer you expect to trigger this. Some \"invalid\" responses, especially if these are syntactically-valid expressions. E.g. If the answer is an equation such as y=2x+1 , then 2x+1 might be invalid if you have chosen the input option \"check types\". Adding a test case is useful to confirm this potential problem is caught by the question. Leave the fields empty and the answer note NULL to indicate this. Add a totally incorrect answer. Just above the \"Question tests\" section of this page is a \"Send to CAS\" button. Pressing this sends the question variables and general feedback to a special page which enables more efficient authoring of the feedback in the context of the values of the variables. You still need to copy this by hand into the question edit form when you are satisfied. A Moodle administrator can run all of the questions tests within a particular course, or across the whole site by following the links on the STACK admin page. Maxima evaluation Note, that while we use simp:false Maxima must \"evaluate\" the expression prior to the result being used by an input as a test case. If the raw testcase expression cannot be sent to the CAS, e.g. a missing bracket, then this invalidity will be tested. However, some evaluations in Maxima do actually more than just replace existing variables with the values from the question variables. For example, in Maxima try simp:false; f:x*sin(1/x); limit(f,x,0); Notice here, that while simp:false the limit is still evaluated. This is not \"simplification\". For the full story, please refer to the Maxima docs on the ev command. In this case, you can prevent evaluation of limits by using an apostrophie in the test case. simp:false; f:x*sin(1/x); 'limit(f,x,0); STACK-Maxima sandbox It is very useful to be able to use the desktop Maxima application to test questions. To do this it is very helpful to load all the STACK libraries. Details on how to do this are in the STACK-Maxima sandbox page. Simplification You can set global simplification flags in two places within questions: Globally in the question. In each potential response tree. Regardless of what settings you use here the expressions you enter for inputs in question tests are not simplified. This is necessary. For example, if your question is \"what is {@a@}+{@b@} ?\" where {@a@} and {@b@} are randomly generated. You will need to set the question level option simplify:false to prevent the student typing in the sum itself as an answer. Then you will probably need separate tests for the expressions a+b and ev(a+b,simp) to make sure the student hasn't typed in the sum instead of the value of the sum. For this reason, to enable \"unsimplified\" expressions to be included as question tests we do not simplify test inputs regardless of the options used in the question. If you have set simplify:true everywhere in your question, and you are only establishing algebraic equivalence of your answers anyway, \"un-simplified\" expressions as inputs to the tests will not matter. Next steps When you are done testing a question which uses randomization, you need to deploy variants of the question.","title":"Testing, debugging and quality control"},{"location":"en/Authoring/Testing/#testing-debugging-and-quality-control","text":"This page deals with testing questions and quality control. This is largely done through the question test functionality.","title":"Testing, debugging and quality control"},{"location":"en/Authoring/Testing/#question-authoring-checklist","text":"High-quality question production needs care at each stage. Minimal requirements The question name should be meaningful and consistent, i.e. match up to course, section and topic. E.g. 2018ILA-Wk3-Q2: equation of plane . Is the phrasing of the question clear to students? Will students know how to input an answer? Could a \"syntax hint\" or message in the question help? Can \"validation\" help, e.g. by telling students how many significant figures are expected? (See the \"numbers\" input type.) Use question variable stubs throughout, to enable efficient random generation. (E.g. define the correct answer in question variables, rather than hard-wiring a specific expression). Always make sure the question marks the correct answer as correct! Add question tests for one correct and at least one incorrect variant. (See below.) Check all options in the question, inputs and PRTs. Phase 1 Minimal random variants. Worked solution (\"General feedback\") reflecting the random variables. Consider likely mistakes, and add feedback to test for this. Add at least one question test to test for each eventuality identified above. Phase 2 Use data obtained from one cycle of attempts by students. Did the question operate correctly? E.g. were correct answers correctly marked, and incorrect answers rejected? What did students get wrong? Is there a reason for these answers such as a common misconception? If so, add nodes to the PRTs to test for this and improve feedback. Add further question tests to test each misconception. Is there any significant difference between random variants?","title":"Question authoring checklist"},{"location":"en/Authoring/Testing/#testing-for-quality-control","text":"It is important to test questions to ensure they work correctly. One approach would be for the teacher to repeatedly test them with various random numbers and inputs. But this is inefficient and unreliable. Question Tests provide an automated mechanism through which the author may establish with confidence that the Potential Response Trees are processing the student answer as expected. They are based on the concept of \"unit testing\" from software development. Question variables can be included in the tests; indeed these are needed to define test inputs in the context of random values. Each test assigns values to any/all of the inputs. These values may, naturally, depend on the question variables . values for the score and any penalty. Answer notes from each of the potential response trees . The teacher can opt to run the question tests from the preview window. STACK automatically takes each test, assigns the values to inputs and attempts to submit it. The results of the last answer note from each potential response tree is compared to that specified by the teacher. Notice that this is a limitation of the system. Specifying the complete route through the potential response tree would be too difficult and would discourage teachers from writing tests. If the score, penalty and answer note generated by each potential response tree matches that specified by the teacher, then the test will PASS, otherwise the test will FAIL. Note that failure of a test is a mismatch between outputs and expected outputs, not necessarily a sign that something is wrong with the question itself! The teacher can also examine by hand the outcomes generated by each step of each test, including full feedback generated. In this way, the teacher can record, within the question itself, how they expect the marking scheme to work for a variety of student answers.","title":"Testing for quality control"},{"location":"en/Authoring/Testing/#writing-tests","text":"Author and save your question. From the Question bank, choose the Preview option. The Preview question window will open. If you have authority to edit the question, then the top right of the question window will contain a link to question tests and deployed variants... . Follow this link. This page manages both question tests and deployed variants. Initially you will have no tests or deployed variants. At the bottom of this page choose Add a test case... Specify values for each input. This may use the question variables. The values of these variables will be used for any random variants. Specify the expected outcomes for each potential response tree. This includes the score, penalty and answer note. Note : currently only the last Answer Note, not the whole path through the potential response tree, is examined. This is a limitation. Once you have added the test case, STACK will automatically validate and submit these responses and display the outcomes. You may add as many test cases are you need. It is sensible to add in The correct response One example of each distinction you wish to make, i.e. if you have added specific feedback then provide an answer you expect to trigger this. Some \"invalid\" responses, especially if these are syntactically-valid expressions. E.g. If the answer is an equation such as y=2x+1 , then 2x+1 might be invalid if you have chosen the input option \"check types\". Adding a test case is useful to confirm this potential problem is caught by the question. Leave the fields empty and the answer note NULL to indicate this. Add a totally incorrect answer. Just above the \"Question tests\" section of this page is a \"Send to CAS\" button. Pressing this sends the question variables and general feedback to a special page which enables more efficient authoring of the feedback in the context of the values of the variables. You still need to copy this by hand into the question edit form when you are satisfied. A Moodle administrator can run all of the questions tests within a particular course, or across the whole site by following the links on the STACK admin page.","title":"Writing tests"},{"location":"en/Authoring/Testing/#maxima-evaluation","text":"Note, that while we use simp:false Maxima must \"evaluate\" the expression prior to the result being used by an input as a test case. If the raw testcase expression cannot be sent to the CAS, e.g. a missing bracket, then this invalidity will be tested. However, some evaluations in Maxima do actually more than just replace existing variables with the values from the question variables. For example, in Maxima try simp:false; f:x*sin(1/x); limit(f,x,0); Notice here, that while simp:false the limit is still evaluated. This is not \"simplification\". For the full story, please refer to the Maxima docs on the ev command. In this case, you can prevent evaluation of limits by using an apostrophie in the test case. simp:false; f:x*sin(1/x); 'limit(f,x,0);","title":"Maxima evaluation"},{"location":"en/Authoring/Testing/#stack-maxima-sandbox","text":"It is very useful to be able to use the desktop Maxima application to test questions. To do this it is very helpful to load all the STACK libraries. Details on how to do this are in the STACK-Maxima sandbox page.","title":"STACK-Maxima sandbox"},{"location":"en/Authoring/Testing/#Simplification","text":"You can set global simplification flags in two places within questions: Globally in the question. In each potential response tree. Regardless of what settings you use here the expressions you enter for inputs in question tests are not simplified. This is necessary. For example, if your question is \"what is {@a@}+{@b@} ?\" where {@a@} and {@b@} are randomly generated. You will need to set the question level option simplify:false to prevent the student typing in the sum itself as an answer. Then you will probably need separate tests for the expressions a+b and ev(a+b,simp) to make sure the student hasn't typed in the sum instead of the value of the sum. For this reason, to enable \"unsimplified\" expressions to be included as question tests we do not simplify test inputs regardless of the options used in the question. If you have set simplify:true everywhere in your question, and you are only establishing algebraic equivalence of your answers anyway, \"un-simplified\" expressions as inputs to the tests will not matter.","title":"Simplification"},{"location":"en/Authoring/Testing/#next-steps","text":"When you are done testing a question which uses randomization, you need to deploy variants of the question.","title":"Next steps"},{"location":"en/Authoring/Units/","text":"Scientific Units It is quite common in science subjects to need to accept an answer which has units , for example using m/s . Currently STACK only support SI units. See International Bureau of Weights and Measures (2006), (The International System of Units (SI)) PDF (8th ed.), ISBN 92-822-2213-6. Maxima packages for the support of scientific units In Maxima there are a number of separate packages which enable a user to manipulate physical units. load(unit); the code is in ...\\share\\contrib\\unit\\unit.mac load(units); the code is in ...\\share\\physics\\units.mac load(ezunits); the code is in ...\\share\\ezunits\\ezunits.mac WE DO NOT USE THESE PACKAGES as they are too slow to load and have a variety of side effects. Instead we have a lightweight package of our own. By default in Maxima, letters such as k are unbound variables. If you would like to give these prefix values 10^3 so that km literally means 10^3*m then you will need to add the following to the question variables field. stack_unit_si_declare(true); The units input and units answer test automatically execute this command. More details are given below. Internally numbers can be separated from units using the following inert Maxima function. stackunits(num, units) where num is the part interpreted to be the numerical portion, and units is the portion considered to be the units. For example, in the expression 10*m/s the internal value from this input will be stackunits(10,m/s) . Essentially the function stackunits is inert, but does subtly modify the display. However, having STACK split the student's answer this way is more reliable than teachers trying to find the \"numerical part\" themselves on a question by question basis. It essentially creates a single object representing a dimensional numerical quantity. If you are using the units answer tests then you need not worry about these internals. Examples Example 1 Let us assume that the correct answer is 12.1*m/s^2 . Students type this value into STACK exactly as it is above. Note the multiplication sign between the number and units. There are options to condone a missing star, or to accept a space. In entry, the numerical part is bound to the units part with multiplication. Using multiplication in this way is ambiguous. To create, and to disambiguate, a dimensional numerical quantity from a number multiplied by units (a subtle distinction at best) STACK has a mostly inert function stackunits(12.1,m/s^2) . Students do not need to use this, but teachers can use it in question variables etc. STACK converts the student's answer to SI base units only. This function also handles the number coefficients automatically (e.g. 1*km = 1000*m etc.). STACK has answer tests which compare dimensional numbers. These tests use (share code with) one of the existing numerical answer tests, such as NumSigFigs . Input type Stack provides an input type to enable teachers to support students in entering answers with scientific units. This input type is built closely on the algebraic input type with the following differences. The input type will check both the teacher's answer and the student's answer for units. The input will require the student's answer to have units if and only if the teacher's answer also has units. This normally forces the student to use units. Also, students sometimes add units to dimensionless quantities (such as pH) and this input type will also enable a teacher to reject such input as invalid when the teacher does not use units. This input type always accepts floating-point numbers , regardless of the option set on the edit form. The input type should display the same number of significant figures as typed in by the student. Note that all other input types truncate the display of unnecessary trailing zeros in floating point numbers, loosing information about significant figures. If you want to specifically test for significant figures, use this input type, with the teacher's answer having no units. The student must type a number of some kind. Entering units on their own will be invalid. If you want to ask a student for units, then use the algebraic input type. Units on their own are a not valid expression for this input. If the teacher shows the validation, \"with variable list\" this will be displayed as \"the units found in your answer are\"... The student is permitted to use variable names in this input type. The \"insert stars\" option is unchanged. You may or may not want your students to type a * or space between the numbers and units for implied multiplication. You may want the single letter variable names options here. Note that since km literally means k*m=1000*m this is not a problem with most units. The input type checks for units in a case sensitive way. If there is more than one option then STACK suggests a list. E.g. if the student types mhz then STACK suggests MHz or mHz . You can require numerical accuracy at validation by using the mindp , maxdp , minsf and maxsf extra options, as documented in the numerical input . There are surprisingly few ambiguities in the units set up, but there will be some that the developers have missed (correctly dealing with ambiguous input is by definition an impossible problem!). Please contact us with suggestions for improvements. Note, the input does not currently support a situation where you want to accept as valid a purely numerical quantity and then use the PRT to deduct marks for failing to use units, rather than rejecting it as invalid. Extra Options The extra options to the input should be a comma separated list of tags. This input type makes use of the additional options in two ways: Units can be displayed using inline fractions m/s or negative powers m\\,s^{-1} . Add negpow to the Extra Options field to use negative powers. Answer tests STACK provides a number of answer tests for dealing with units. These are designed to accept an answer which is a dimensional numerical quantity, that is a floating-point number with units such as 12.3*m/s . This will not work with sets, lists, matrices, equations, etc. The answer tests require the teacher's answer (second argument to the function) to have units. If the teacher does not specify units then the test will fail. This decision is to help question authors write robust questions e.g. just specifying a number would be problematic. The input will accept an answer as valid if and only if the teacher's answer has units, so you should know in advance if you have units. If you want to compare numbers (i.e. no units), just use the numerical test. The units answer tests will happily accept a stackunits expression. Otherwise, the answer test splits up both arguments into this form first. There are three decisions to be made: Does the written precision matter? I.e. should the student use certain significant figures? If so, should we take a strict interpretation of significant figures ( 100 has 1 sig fig, 1.00e2 has 3) or not ( 100 has somewhere between 1 and 3 sig figs)? See the NumSigFigs and SigFigsStrict answer tests. How does numerical precision matter? A number might be written using significant figures, but is it the right number? See the NumSigFigs , NumRelative and NumAbsolute answer tests. Do we convert to compatible units, or require strict units which match those given by the teacher exactly? Essentially, the teacher has to make three decisions. These could always be done in a potential response tree with three nodes, but this is a common task. For legacy reasons, some of the answer tests (e.g. NumSigFigs , UnitsSigFigs ) combine answering two or more of these questions in one answer test. For scientific units (Q3.) there are two families of answer tests. Units[...] gives feedback if the student has the wrong units, but number is equivalent on conversion, UnitsStrict[...] expects the student's answer to use exactly the units which appear in the teacher's answer. There is no conversion here. However, answer notes will record whether the conversion would have worked. The two issues related to the numerical part are tested with one of the numerical answer tests which are documented elsewhere. Units answer tests share code with these functions. Use the appropriate options for the chosen test. Notes All variables are considered to be units. The numerical part is compared using the one of the three numerical answer tests. Each requires various options, e.g. the number of significant figures, or the numerical accuracy. These answer tests use identical options to the numerical tests. The units system accepts both l and L for litres, and the display respects the way they are typed in. Only abbreviations are accepted, not full names. I.e. students may not use meter , instead they must use m . Currently there is no localisation (i.e. language support) for unit names/spellings. The letter u is the prefix for micro, and is displayed as \\mu when the student validates. The string xi is the Greek letter \\xi . If you assume single variable letter names this might clash with x*i which is a relatively common pattern. Conversion to base units and numerical accuracy This only applies to the \"non-strict\" versions of the tests. If the units in the student's answer do not match those of the teacher, then both the student's and teacher's answer is converted to base scientific units and the numerical test applied again. Note, the student's answer is not converted to the units used by the teacher. For example, in order to make a numerical comparison between 1.1*Mg/10^6 and 1.2*kN*ns/(mm*Hz) both expressions are converted to base units of kg . The numerical test is then applied. For the NumRelative test the option gives the required percentage tolerance within which a student's answer should be. Literally we test the following |sa-ta| < |ta*tol| . Here sa and ta are the numerical value of the student's and teacher's answer respectively. The same tol is used both when the units match and once they have been converted to base units . Similarly, for NumAbsolute the option is an absolute difference, (expressed in units). Literally we test |sa-ta| < |tol| . Here sa and ta are the numerical value of the student's and teacher's answer respectively once they have been converted to base units . If tol has no units, then STACK will use the units supplied by the teacher. If the teacher uses units in the option then the option units must be identical to the units in the teacher's answer. Dealing with units in Maxima functions, e.g. question variables and PRTs STACK uses an inert function to represent dimensional numerical quantities. stackunits(num, units) In particular, if we just represented scientific units as a product there would be no way to distinguish between stackunits(0, m) and stackunits(0, s) . As a product both would evaluate to 0 , which would appear dimensionless. A teacher is still likely to want to make comments on units when the numerical part is zero. The function stack_unit_si_declare(true) declares variables as units. (Note the argument to this function is not used.) For example, this changes the TeX output of m to Roman \\mathrm{m} and not the normal m . (That units are displayed in Roman is lost to most students!). Note that the symbols are only declared to be units by using stack_unit_si_declare(true) first somewhere else in the question, or feedback variables. unitsp(ex) is a predicate which decides if STACK considers the expression to represent a dimensional numerical quantity stackunits . listofnonunits(ex) lists all variables in the expression ex considered not to be units however they appear. Use of this function auto-loads stack_unit_si_declare(true) . listofunits(ex) lists all variables in the expression ex considered to be units however they appear. Use of this function auto-loads stack_unit_si_declare(true) . If you do not declare stack_unit_si_declare(true) in the question variables you may need to do so in the feedback text itself. The function stackunits_make(ex) takes the expression ex and, if this is a product of numbers and units, it returns an inert function stackunits with arguments stackunits(numbers, symbols) . Note, symbols will include a mix of variables, and symbols which are considered to be units. Use of this function autoloads stack_unit_si_declare(true) . The function stackunits_to_product(ex) turns a stackunits object into a product of number and units. It might be helpful in the feedback variables field to separate units from numerical parts prior to building your own potential response tree. However, do not do the following. n:float(100+rand(300)/10); u:m/s ta:stackunits_make(n*u) Instead just call stackunits directly n:float(100+rand(300)/10); u:m/s ta:stackunits(n,u) If you regularly find yourself building a particular tree to test for some property please contact the developers who will consider adding this functionality to the core. The functions stack_units_units(ex); stack_units_nums(ex); try to split the expression into units and numbers, and the return the units and numbers found. If there are no numbers, stack_units_nums(ex) returns NULLNUM . If there are no numbers, stack_units_units(ex) returns NULLUNITS . These are special tags, but note they are displayed by LaTeX as empty strings. (You could also use first(args(ans1)) or second(args(ans1)) respectively to access the numerical and units parts.) The function stack_units_split is deprecated. DO NOT USE. Custom units The teacher may want to use their own units. For example, the core unit package in Maxima does not include mm (millimetre), it is defined there as a word millimetre . This is one reason for creating our own custom units package. For advanced users and developers only Currently there is no way to create custom sets of units. This feature may be added in the future. The following may be helpful for now, but this does not fully work and the mechanism will change in the future when proper support is added for custom units. Add the following to the question variables and feedback variables. stack_unit_si_declare(true) declare(diamonds, units) texput(diamonds, \"\\\\diamond\") The symbol diamonds will then be treated as units in code such as unitsp(ex) and displayed with the TeX \\diamond symbol. You will need to put diamonds in the allow words of the input in the question. However, the input validation code is independent of the question variables, and hence the student's answer will not be displayed using the TeX \\diamond symbol. If we add better support for custom units in the future, this may change. If your units are something like lb and you are happy with italic fonts, this might be fine for now. Note, the feedback created within potential response trees will not respect the above code. Tips for dealing with units in STACK CAS variables are tricky. When creating worked solutions etc. try 12.3m*s^(-1) not 12.3m/s . The display is better. The answer test accepts either as equivalent. Which units are supported? It is probably best to look at the code. This is contained in qtype_stack\\stack\\cas\\casstring_units_class.php . Comments and additions are welcome.","title":"Scientific Units"},{"location":"en/Authoring/Units/#scientific-units","text":"It is quite common in science subjects to need to accept an answer which has units , for example using m/s . Currently STACK only support SI units. See International Bureau of Weights and Measures (2006), (The International System of Units (SI)) PDF (8th ed.), ISBN 92-822-2213-6.","title":"Scientific Units"},{"location":"en/Authoring/Units/#maxima-packages-for-the-support-of-scientific-units","text":"In Maxima there are a number of separate packages which enable a user to manipulate physical units. load(unit); the code is in ...\\share\\contrib\\unit\\unit.mac load(units); the code is in ...\\share\\physics\\units.mac load(ezunits); the code is in ...\\share\\ezunits\\ezunits.mac WE DO NOT USE THESE PACKAGES as they are too slow to load and have a variety of side effects. Instead we have a lightweight package of our own. By default in Maxima, letters such as k are unbound variables. If you would like to give these prefix values 10^3 so that km literally means 10^3*m then you will need to add the following to the question variables field. stack_unit_si_declare(true); The units input and units answer test automatically execute this command. More details are given below. Internally numbers can be separated from units using the following inert Maxima function. stackunits(num, units) where num is the part interpreted to be the numerical portion, and units is the portion considered to be the units. For example, in the expression 10*m/s the internal value from this input will be stackunits(10,m/s) . Essentially the function stackunits is inert, but does subtly modify the display. However, having STACK split the student's answer this way is more reliable than teachers trying to find the \"numerical part\" themselves on a question by question basis. It essentially creates a single object representing a dimensional numerical quantity. If you are using the units answer tests then you need not worry about these internals.","title":"Maxima packages for the support of scientific units"},{"location":"en/Authoring/Units/#examples","text":"","title":"Examples"},{"location":"en/Authoring/Units/#example-1","text":"Let us assume that the correct answer is 12.1*m/s^2 . Students type this value into STACK exactly as it is above. Note the multiplication sign between the number and units. There are options to condone a missing star, or to accept a space. In entry, the numerical part is bound to the units part with multiplication. Using multiplication in this way is ambiguous. To create, and to disambiguate, a dimensional numerical quantity from a number multiplied by units (a subtle distinction at best) STACK has a mostly inert function stackunits(12.1,m/s^2) . Students do not need to use this, but teachers can use it in question variables etc. STACK converts the student's answer to SI base units only. This function also handles the number coefficients automatically (e.g. 1*km = 1000*m etc.). STACK has answer tests which compare dimensional numbers. These tests use (share code with) one of the existing numerical answer tests, such as NumSigFigs .","title":"Example 1"},{"location":"en/Authoring/Units/#Input_type","text":"Stack provides an input type to enable teachers to support students in entering answers with scientific units. This input type is built closely on the algebraic input type with the following differences. The input type will check both the teacher's answer and the student's answer for units. The input will require the student's answer to have units if and only if the teacher's answer also has units. This normally forces the student to use units. Also, students sometimes add units to dimensionless quantities (such as pH) and this input type will also enable a teacher to reject such input as invalid when the teacher does not use units. This input type always accepts floating-point numbers , regardless of the option set on the edit form. The input type should display the same number of significant figures as typed in by the student. Note that all other input types truncate the display of unnecessary trailing zeros in floating point numbers, loosing information about significant figures. If you want to specifically test for significant figures, use this input type, with the teacher's answer having no units. The student must type a number of some kind. Entering units on their own will be invalid. If you want to ask a student for units, then use the algebraic input type. Units on their own are a not valid expression for this input. If the teacher shows the validation, \"with variable list\" this will be displayed as \"the units found in your answer are\"... The student is permitted to use variable names in this input type. The \"insert stars\" option is unchanged. You may or may not want your students to type a * or space between the numbers and units for implied multiplication. You may want the single letter variable names options here. Note that since km literally means k*m=1000*m this is not a problem with most units. The input type checks for units in a case sensitive way. If there is more than one option then STACK suggests a list. E.g. if the student types mhz then STACK suggests MHz or mHz . You can require numerical accuracy at validation by using the mindp , maxdp , minsf and maxsf extra options, as documented in the numerical input . There are surprisingly few ambiguities in the units set up, but there will be some that the developers have missed (correctly dealing with ambiguous input is by definition an impossible problem!). Please contact us with suggestions for improvements. Note, the input does not currently support a situation where you want to accept as valid a purely numerical quantity and then use the PRT to deduct marks for failing to use units, rather than rejecting it as invalid.","title":"Input type"},{"location":"en/Authoring/Units/#extra-options","text":"The extra options to the input should be a comma separated list of tags. This input type makes use of the additional options in two ways: Units can be displayed using inline fractions m/s or negative powers m\\,s^{-1} . Add negpow to the Extra Options field to use negative powers.","title":"Extra Options"},{"location":"en/Authoring/Units/#answer-tests","text":"STACK provides a number of answer tests for dealing with units. These are designed to accept an answer which is a dimensional numerical quantity, that is a floating-point number with units such as 12.3*m/s . This will not work with sets, lists, matrices, equations, etc. The answer tests require the teacher's answer (second argument to the function) to have units. If the teacher does not specify units then the test will fail. This decision is to help question authors write robust questions e.g. just specifying a number would be problematic. The input will accept an answer as valid if and only if the teacher's answer has units, so you should know in advance if you have units. If you want to compare numbers (i.e. no units), just use the numerical test. The units answer tests will happily accept a stackunits expression. Otherwise, the answer test splits up both arguments into this form first. There are three decisions to be made: Does the written precision matter? I.e. should the student use certain significant figures? If so, should we take a strict interpretation of significant figures ( 100 has 1 sig fig, 1.00e2 has 3) or not ( 100 has somewhere between 1 and 3 sig figs)? See the NumSigFigs and SigFigsStrict answer tests. How does numerical precision matter? A number might be written using significant figures, but is it the right number? See the NumSigFigs , NumRelative and NumAbsolute answer tests. Do we convert to compatible units, or require strict units which match those given by the teacher exactly? Essentially, the teacher has to make three decisions. These could always be done in a potential response tree with three nodes, but this is a common task. For legacy reasons, some of the answer tests (e.g. NumSigFigs , UnitsSigFigs ) combine answering two or more of these questions in one answer test. For scientific units (Q3.) there are two families of answer tests. Units[...] gives feedback if the student has the wrong units, but number is equivalent on conversion, UnitsStrict[...] expects the student's answer to use exactly the units which appear in the teacher's answer. There is no conversion here. However, answer notes will record whether the conversion would have worked. The two issues related to the numerical part are tested with one of the numerical answer tests which are documented elsewhere. Units answer tests share code with these functions. Use the appropriate options for the chosen test. Notes All variables are considered to be units. The numerical part is compared using the one of the three numerical answer tests. Each requires various options, e.g. the number of significant figures, or the numerical accuracy. These answer tests use identical options to the numerical tests. The units system accepts both l and L for litres, and the display respects the way they are typed in. Only abbreviations are accepted, not full names. I.e. students may not use meter , instead they must use m . Currently there is no localisation (i.e. language support) for unit names/spellings. The letter u is the prefix for micro, and is displayed as \\mu when the student validates. The string xi is the Greek letter \\xi . If you assume single variable letter names this might clash with x*i which is a relatively common pattern.","title":"Answer tests"},{"location":"en/Authoring/Units/#conversion-to-base-units-and-numerical-accuracy","text":"This only applies to the \"non-strict\" versions of the tests. If the units in the student's answer do not match those of the teacher, then both the student's and teacher's answer is converted to base scientific units and the numerical test applied again. Note, the student's answer is not converted to the units used by the teacher. For example, in order to make a numerical comparison between 1.1*Mg/10^6 and 1.2*kN*ns/(mm*Hz) both expressions are converted to base units of kg . The numerical test is then applied. For the NumRelative test the option gives the required percentage tolerance within which a student's answer should be. Literally we test the following |sa-ta| < |ta*tol| . Here sa and ta are the numerical value of the student's and teacher's answer respectively. The same tol is used both when the units match and once they have been converted to base units . Similarly, for NumAbsolute the option is an absolute difference, (expressed in units). Literally we test |sa-ta| < |tol| . Here sa and ta are the numerical value of the student's and teacher's answer respectively once they have been converted to base units . If tol has no units, then STACK will use the units supplied by the teacher. If the teacher uses units in the option then the option units must be identical to the units in the teacher's answer.","title":"Conversion to base units and numerical accuracy"},{"location":"en/Authoring/Units/#dealing-with-units-in-maxima-functions-eg-question-variables-and-prts","text":"STACK uses an inert function to represent dimensional numerical quantities. stackunits(num, units) In particular, if we just represented scientific units as a product there would be no way to distinguish between stackunits(0, m) and stackunits(0, s) . As a product both would evaluate to 0 , which would appear dimensionless. A teacher is still likely to want to make comments on units when the numerical part is zero. The function stack_unit_si_declare(true) declares variables as units. (Note the argument to this function is not used.) For example, this changes the TeX output of m to Roman \\mathrm{m} and not the normal m . (That units are displayed in Roman is lost to most students!). Note that the symbols are only declared to be units by using stack_unit_si_declare(true) first somewhere else in the question, or feedback variables. unitsp(ex) is a predicate which decides if STACK considers the expression to represent a dimensional numerical quantity stackunits . listofnonunits(ex) lists all variables in the expression ex considered not to be units however they appear. Use of this function auto-loads stack_unit_si_declare(true) . listofunits(ex) lists all variables in the expression ex considered to be units however they appear. Use of this function auto-loads stack_unit_si_declare(true) . If you do not declare stack_unit_si_declare(true) in the question variables you may need to do so in the feedback text itself. The function stackunits_make(ex) takes the expression ex and, if this is a product of numbers and units, it returns an inert function stackunits with arguments stackunits(numbers, symbols) . Note, symbols will include a mix of variables, and symbols which are considered to be units. Use of this function autoloads stack_unit_si_declare(true) . The function stackunits_to_product(ex) turns a stackunits object into a product of number and units. It might be helpful in the feedback variables field to separate units from numerical parts prior to building your own potential response tree. However, do not do the following. n:float(100+rand(300)/10); u:m/s ta:stackunits_make(n*u) Instead just call stackunits directly n:float(100+rand(300)/10); u:m/s ta:stackunits(n,u) If you regularly find yourself building a particular tree to test for some property please contact the developers who will consider adding this functionality to the core. The functions stack_units_units(ex); stack_units_nums(ex); try to split the expression into units and numbers, and the return the units and numbers found. If there are no numbers, stack_units_nums(ex) returns NULLNUM . If there are no numbers, stack_units_units(ex) returns NULLUNITS . These are special tags, but note they are displayed by LaTeX as empty strings. (You could also use first(args(ans1)) or second(args(ans1)) respectively to access the numerical and units parts.) The function stack_units_split is deprecated. DO NOT USE.","title":"Dealing with units in Maxima functions, e.g. question variables and PRTs"},{"location":"en/Authoring/Units/#custom-units","text":"The teacher may want to use their own units. For example, the core unit package in Maxima does not include mm (millimetre), it is defined there as a word millimetre . This is one reason for creating our own custom units package. For advanced users and developers only Currently there is no way to create custom sets of units. This feature may be added in the future. The following may be helpful for now, but this does not fully work and the mechanism will change in the future when proper support is added for custom units. Add the following to the question variables and feedback variables. stack_unit_si_declare(true) declare(diamonds, units) texput(diamonds, \"\\\\diamond\") The symbol diamonds will then be treated as units in code such as unitsp(ex) and displayed with the TeX \\diamond symbol. You will need to put diamonds in the allow words of the input in the question. However, the input validation code is independent of the question variables, and hence the student's answer will not be displayed using the TeX \\diamond symbol. If we add better support for custom units in the future, this may change. If your units are something like lb and you are happy with italic fonts, this might be fine for now. Note, the feedback created within potential response trees will not respect the above code.","title":"Custom units"},{"location":"en/Authoring/Units/#tips-for-dealing-with-units-in-stack","text":"CAS variables are tricky. When creating worked solutions etc. try 12.3m*s^(-1) not 12.3m/s . The display is better. The answer test accepts either as equivalent. Which units are supported? It is probably best to look at the code. This is contained in qtype_stack\\stack\\cas\\casstring_units_class.php . Comments and additions are welcome.","title":"Tips for dealing with units in STACK"},{"location":"en/Authoring/Variables/","text":"Defining variables There are two fields which allow you to define and manipulate computer algebra system variables. These are called the Question Variables and Answer Variables. The field is a string which contains a list of assignments of the form key : value; for example p : (x-1)^3; Each key is the name of a variable local to the question, and value is an expression in Maxima's language. When evaluated, this list is passed to the CAS, and evaluated in order. The value obtained for each key will be stored and used later, for example in the question marking routines. The keys need not be unique, although only the last value will be available for use later. These fields are known as KeyVal fields. Maxima's assignments a:3 Computer algebra systems each use a different syntax to denote the assignment of a value to a variable. For example, Maple and Derive use := . Mathematica uses = or := , depending on when the assignment is to take place. Maxima uses the form key:value , which is unusual and not intuitive. Maxima reserves := to denote function definition, e.g. f(x):=x^2 . STACK uses Maxima's assignment rules. Notes Items are separated by either a newline or ; . Adding ; at the end of each statement is optional, but makes it easier to cut and paste into a Maxima session. Please add these. If you type a string not in the form key : value , a variable name such as dumvar3 will be assigned automatically to keep track of the command in the list of question variables. The key must be a simple variable name. It must start with letters, and can contain numbers and underscore characters. If a student uses a variable which has been assigned a value in the question variables then the attempt will be rejected as invalid. You can use the \"allowed words\" to enable students' expressions with question variables to be considered valid. Hence, it is a sensible idea to use variable names which are not used as parameters in the question, or likely to occur in the student's answer. For example if you set an integration question then you should avoid using the variable c , otherwise students won't be able to write +c in the normal way to indicate a constant of integration. You can include C-style block comments for increased clarity, and these may appear on separate lines e.g. dice : rand(6) + 1; /* roll it! */ Do not define a feedback variable with the same name as an input. For example, if your input is ans1 then you cannot define a feedback variable ans1:exdowncase(ans1) . Choose something different, e.g. ansmod1:exdowncase(ans1) Question variables The question variables are evaluated when a variant of a question is created. The displayed forms are available to all other CASText fields and the values to other parts of the question, e.g. Teacher's answers in inputs are defined in terms of question variables. Question note . All fields in each of the potential response tree . Each input when testing the item. Feedback variables The feedback variables form one field in the potential response tree . When using the potential response tree it is often very useful to manipulate the student's answer before applying any of the Answer tests . This gives the opportunity to perform sophisticated mathematical operations. Before each answer test is applied the following list of variables is assembled and evaluated The values of the question variables. The values of each inputs . The feedback variables. The values of the evaluated feedback variables can be used as expressions in the answer tests and in the feedback. Note, you cannot redefine the value of an input as a key in the feedback variables. e.g. you cannot have something like ans1:ans1+1 . You must use a new variable name. When an answer test is evaluated, if the SA or TA field is exactly the name of an input then the raw student's value is used, and not the value from the feedback variables. This is because some of the answer tests require exactly what is typed (e.g. trailing zeros) and not the value through the CAS. To avoid this problem authors must use new variable names to distinguish between the actual input typed by the student and any calculated value. Creating variable names Teachers may not use the Maxima 'concat' command, so you cannot create variable names of your own using code of the following form. vars:makelist(concat(x,k),k,1,5); Instead use vars0:stack_var_makelist(k, 5); If you want to start numbering at 1 instead of 0, use vars1:rest(stack_var_makelist(k, 6));","title":"Defining variables"},{"location":"en/Authoring/Variables/#defining-variables","text":"There are two fields which allow you to define and manipulate computer algebra system variables. These are called the Question Variables and Answer Variables. The field is a string which contains a list of assignments of the form key : value; for example p : (x-1)^3; Each key is the name of a variable local to the question, and value is an expression in Maxima's language. When evaluated, this list is passed to the CAS, and evaluated in order. The value obtained for each key will be stored and used later, for example in the question marking routines. The keys need not be unique, although only the last value will be available for use later. These fields are known as KeyVal fields.","title":"Defining variables"},{"location":"en/Authoring/Variables/#maximas-assignments-a3","text":"Computer algebra systems each use a different syntax to denote the assignment of a value to a variable. For example, Maple and Derive use := . Mathematica uses = or := , depending on when the assignment is to take place. Maxima uses the form key:value , which is unusual and not intuitive. Maxima reserves := to denote function definition, e.g. f(x):=x^2 . STACK uses Maxima's assignment rules.","title":"Maxima's assignments a:3"},{"location":"en/Authoring/Variables/#notes","text":"Items are separated by either a newline or ; . Adding ; at the end of each statement is optional, but makes it easier to cut and paste into a Maxima session. Please add these. If you type a string not in the form key : value , a variable name such as dumvar3 will be assigned automatically to keep track of the command in the list of question variables. The key must be a simple variable name. It must start with letters, and can contain numbers and underscore characters. If a student uses a variable which has been assigned a value in the question variables then the attempt will be rejected as invalid. You can use the \"allowed words\" to enable students' expressions with question variables to be considered valid. Hence, it is a sensible idea to use variable names which are not used as parameters in the question, or likely to occur in the student's answer. For example if you set an integration question then you should avoid using the variable c , otherwise students won't be able to write +c in the normal way to indicate a constant of integration. You can include C-style block comments for increased clarity, and these may appear on separate lines e.g. dice : rand(6) + 1; /* roll it! */ Do not define a feedback variable with the same name as an input. For example, if your input is ans1 then you cannot define a feedback variable ans1:exdowncase(ans1) . Choose something different, e.g. ansmod1:exdowncase(ans1)","title":"Notes"},{"location":"en/Authoring/Variables/#Question_variables","text":"The question variables are evaluated when a variant of a question is created. The displayed forms are available to all other CASText fields and the values to other parts of the question, e.g. Teacher's answers in inputs are defined in terms of question variables. Question note . All fields in each of the potential response tree . Each input when testing the item.","title":"Question variables"},{"location":"en/Authoring/Variables/#Feedback_variables","text":"The feedback variables form one field in the potential response tree . When using the potential response tree it is often very useful to manipulate the student's answer before applying any of the Answer tests . This gives the opportunity to perform sophisticated mathematical operations. Before each answer test is applied the following list of variables is assembled and evaluated The values of the question variables. The values of each inputs . The feedback variables. The values of the evaluated feedback variables can be used as expressions in the answer tests and in the feedback. Note, you cannot redefine the value of an input as a key in the feedback variables. e.g. you cannot have something like ans1:ans1+1 . You must use a new variable name. When an answer test is evaluated, if the SA or TA field is exactly the name of an input then the raw student's value is used, and not the value from the feedback variables. This is because some of the answer tests require exactly what is typed (e.g. trailing zeros) and not the value through the CAS. To avoid this problem authors must use new variable names to distinguish between the actual input typed by the student and any calculated value.","title":"Feedback variables"},{"location":"en/Authoring/Variables/#creating-variable-names","text":"Teachers may not use the Maxima 'concat' command, so you cannot create variable names of your own using code of the following form. vars:makelist(concat(x,k),k,1,5); Instead use vars0:stack_var_makelist(k, 5); If you want to start numbering at 1 instead of 0, use vars1:rest(stack_var_makelist(k, 6));","title":"Creating variable names"},{"location":"en/CAS/","text":"Maxima and computer algebra use in STACK STACK uses the computer algebra system (CAS) Maxima . We have also provided some background to CAS in general. Computer algebra systems are most often designed for either the research mathematician, or the student to do calculations . For the purposes of assessment our calculation establish some relevant properties of the students' answers. Establishing properties in this way, and on the basis of this creating outcomes such as feedback, is something particular to assessment systems. Such properties include things like is the expression algebraically equivalent to the correct answer? is the expression fully simplified? is the expression written a particular conventional form, (e.g. factored, partial fraction)? are all the numbers in the expression written as fractions in the lowest terms? We assume a certain amount of knowledge about Maxima when writing STACK questions. Tutorials for STACK users The documentation includes basic information on using Maxima with STACK. A graphical Maxima interface like wxMaxima can be helpful for learning Maxima syntax and function names. Documentation on using Maxima in STACK Information on specific mathematical topics are found below. Predicate functions , which are useful to test expressions. Numbers , including floating point and complex numbers. Simplification can be switched on and off in Maxima. Inequalities . Matrices and vectors . Differential equations . Statistics . Randomly generated objects . Plots and graphics. Buggy rules implements rules which are not always valid! Developer information, and other topics Setting up a STACK-Maxima sandbox for testing code on the desktop. Optimising Maxima .","title":"Maxima and computer algebra use in STACK"},{"location":"en/CAS/#maxima-and-computer-algebra-use-in-stack","text":"STACK uses the computer algebra system (CAS) Maxima . We have also provided some background to CAS in general. Computer algebra systems are most often designed for either the research mathematician, or the student to do calculations . For the purposes of assessment our calculation establish some relevant properties of the students' answers. Establishing properties in this way, and on the basis of this creating outcomes such as feedback, is something particular to assessment systems. Such properties include things like is the expression algebraically equivalent to the correct answer? is the expression fully simplified? is the expression written a particular conventional form, (e.g. factored, partial fraction)? are all the numbers in the expression written as fractions in the lowest terms? We assume a certain amount of knowledge about Maxima when writing STACK questions.","title":"Maxima and computer algebra use in STACK"},{"location":"en/CAS/#tutorial","text":"The documentation includes basic information on using Maxima with STACK. A graphical Maxima interface like wxMaxima can be helpful for learning Maxima syntax and function names.","title":"Tutorials for STACK users"},{"location":"en/CAS/#reference","text":"Information on specific mathematical topics are found below. Predicate functions , which are useful to test expressions. Numbers , including floating point and complex numbers. Simplification can be switched on and off in Maxima. Inequalities . Matrices and vectors . Differential equations . Statistics . Randomly generated objects . Plots and graphics. Buggy rules implements rules which are not always valid!","title":"Documentation on using Maxima in STACK"},{"location":"en/CAS/#developer","text":"Setting up a STACK-Maxima sandbox for testing code on the desktop. Optimising Maxima .","title":"Developer information, and other topics"},{"location":"en/CAS/Buggy_rules/","text":"Buggy rules In order to establish that the student has done something particular but wrong, it is useful for us to be able to apply wrong or buggy rules to expressions. A typical example would be to expand out powers in the wrong way, e.g. (x+y)^2=x^2+y^2. Powers obey linearity buggy_pow(ex) Implements the buggy linearity rule for exponentiation, i.e. (a+b)^n \\rightarrow a^n+b^n. This is useful if we want to compare a student's answer to the result of having done something wrong. Naive addition of fractions mediant(ex1,ex2) calculates the mediant of two rational expressions. The mediant of two fractions \\mbox{mediant}\\left(\\frac{p_1}{q_1} , \\frac{p_2}{q_2}\\right) := \\frac{p_1+p_2}{q_1+q_2}. Note that both denom and num work on non-rational expressions, assuming the expression to be \"over one\" by implication. Hence mediant will also assume the denominator is also one in such cases. This is not always a buggy rule. It is used, for example, in connection with Farey sequences, but it is included here as in assessment this function is useful for checking a common mistake when adding fractions. There is scope for further examples of such rules. See also Maxima reference topics","title":"Buggy rules"},{"location":"en/CAS/Buggy_rules/#buggy-rules","text":"In order to establish that the student has done something particular but wrong, it is useful for us to be able to apply wrong or buggy rules to expressions. A typical example would be to expand out powers in the wrong way, e.g. (x+y)^2=x^2+y^2.","title":"Buggy rules"},{"location":"en/CAS/Buggy_rules/#powers-obey-linearity","text":"buggy_pow(ex) Implements the buggy linearity rule for exponentiation, i.e. (a+b)^n \\rightarrow a^n+b^n. This is useful if we want to compare a student's answer to the result of having done something wrong.","title":"Powers obey linearity"},{"location":"en/CAS/Buggy_rules/#naive-addition-of-fractions","text":"mediant(ex1,ex2) calculates the mediant of two rational expressions. The mediant of two fractions \\mbox{mediant}\\left(\\frac{p_1}{q_1} , \\frac{p_2}{q_2}\\right) := \\frac{p_1+p_2}{q_1+q_2}. Note that both denom and num work on non-rational expressions, assuming the expression to be \"over one\" by implication. Hence mediant will also assume the denominator is also one in such cases. This is not always a buggy rule. It is used, for example, in connection with Farey sequences, but it is included here as in assessment this function is useful for checking a common mistake when adding fractions. There is scope for further examples of such rules.","title":"Naive addition of fractions"},{"location":"en/CAS/Buggy_rules/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/CAS/","text":"Computer Algebra Systems A computer algebra system (CAS) is software that allows the manipulation of mathematical expressions in symbolic form. Most commonly, this is to allow the user to perform some computation. For the purposes of assessment our calculation establishes some relevant properties of the students' answers. These properties include using a predicate function to find if a single expression has a property. For example, are any of the numbers floating points? comparing two expressions using an answer test to compare two expressions. For example, is the student's expression equivalent to the teacher's? A CAS is also useful for randomly generating structured mathematical objects which become parts of a question and plotting graphs of functions. External links CAS on Wikipedia Maxima (the CAS used by STACK)","title":"Computer Algebra Systems"},{"location":"en/CAS/CAS/#computer-algebra-systems","text":"A computer algebra system (CAS) is software that allows the manipulation of mathematical expressions in symbolic form. Most commonly, this is to allow the user to perform some computation. For the purposes of assessment our calculation establishes some relevant properties of the students' answers. These properties include using a predicate function to find if a single expression has a property. For example, are any of the numbers floating points? comparing two expressions using an answer test to compare two expressions. For example, is the student's expression equivalent to the teacher's? A CAS is also useful for randomly generating structured mathematical objects which become parts of a question and plotting graphs of functions.","title":"Computer Algebra Systems"},{"location":"en/CAS/CAS/#external-links","text":"CAS on Wikipedia Maxima (the CAS used by STACK)","title":"External links"},{"location":"en/CAS/Differential_equations/","text":"Differential Equations This page provides examples of how to represent and manipulate ordinary differential equations (ODEs) in Maxima when writing STACK questions. Representing ODEs In a Maxima session we can represent an ODE as ODE: x^2*'diff(y,x) + 3*y*x = sin(x)/x; Notice the use of the ' character in front of the diff function to prevent evaluation. Applied to a function call, such as diff , the single quote prevents evaluation of the function call, although the arguments of the function are still evaluated (if evaluation is not otherwise prevented). The result is the noun form of the function call. Displaying ODEs Maxima has two notations to display ODEs. If derivabbrev:false then 'diff(y,x) is displayed in STACK as \\frac{\\mathrm{d}y}{\\mathrm{d}x} . Note this differs from Maxima's normal notation of \\frac{\\mathrm{d}}{\\mathrm{d}x}y . If derivabbrev:true then 'diff(y,x) is displayed in STACK and Maxima as y_x . Extra brackets are sometimes produced around the differential. You must have simp:true otherwise the display routines will not work. Manipulating ODEs in Maxima This can be solved with Maxima's ode2 command and initial conditions specified. Below is an example of Maxima's output. (%i1) ODE: x^2*'diff(y,x) + 3*y*x = sin(x)/x; 2 dy sin(x) (%o1) x -- + 3 x y = ------ dx x (%i2) ode2(ODE,y,x); %c - cos(x) (%o2) y = ----------- 3 x (%i3) ic1(%o2,x=%pi,y=0); cos(x) + 1 (%o3) y = - ---------- 3 x Further examples and documentation are given in the Maxima manual Note that by default STACK changes the value of Maxima's logabs variable. This changes the way 1/x is integrated. If you want the default behaviour of Maxima you will need to restore logabs:false in the question variables. Randomly generating ODE problems When randomly generating questions we could easily generate an ODE which cannot be solved in closed form, so that in particular using ode2 may be problematic. It is much better when setting any kind of STACK question to start with the method and work backwards to generate the question. This ensures the question remains valid over a whole range of parameters. It also provides many intermediate steps which are useful for a worked solution. % characters from solve and ode2 Maxima functions such as solve and ode2 add arbitrary constants, such as constants of integration. In Maxima these are indicated adding constants which begin with percentage characters. For example, assume(x>0); eq1:x^2*'diff(y,x) + 3*y*x = sin(x)/x; sol:ode2(eq1,y,x); results in y = (%c-cos(x))/x^3; Notice the %c in this example. We need a function to strip out the variables starting with % , especially as these are sometimes numbered and we want to use a definite letter, or sequence for the constants. The function stack_strip_percent(ex,var) replaces all variable names starting with % with those in var . There are two ways to use this. if var is a list then take the variables in the list in order. if var is a variable name, then Maxima returns unevaluated list entries, For example stack_strip_percent(y = (%c-cos(x))/x^3,k); returns y = (k[1]-cos(x))/x^3; This is displayed in STACK using subscripts, which is natural. The unevaluated list method also does not need to know how many % signs appear in the expression. The other usage is to provide explicit names for each variable, but the list must be longer than the number of constants in ex , e.g. stack_strip_percent(y = (%c-cos(x))/x^3,[c1,c2]); which returns y = (c1-cos(x))/x^3; The following example question variables can be used within STACK. assume(x>0); ode : x^2*'diff(y,x) + 3*y*x = sin(x)/x; sol : stack_strip_percent(ode2(ode,y,x),[k]); ta : rhs(ev(sol,nouns)); Note, you may need to use the Option \"assume positive\" to get ODE to evaluate the integrals formally and hence \"solve correctly\". If you need to create a list of numbered variables use vars0:stack_var_makelist(k, 5); vars1:rest(stack_var_makelist(k, 6)); Assessing answers ODEs provide a good example of the principle that we should articulate the properties we are looking for in ordinary differential equations. These properties are The answer satisfies the differential equation. The answer satisfies any initial/boundary conditions. The answer is general. The answer is in the required form. Hence, for ODE questions we need a potential response tree which establishes a number of separate properties. On the basis of the properties satisfied, we then need to generate outcomes. Satisfying the differential equation When marking this kind of question, it is probably best to take the student's answer and substitute this into the ODE. The student's answer should satisfy the equation. Just \"looking like the model answer\" isn't as robust. How else does the teacher avoid the problem of knowing which letter the student used to represent an arbitrary constant? E.g. in Maxima code ode:x^2*'diff(y,x) + 3*y*x = sin(x)/x; ans: (c - cos(x))/x^3; /* The student's (correct) answer */ sa1:subst(y=ans,ode); sa2:ev(sa1,nouns); sa3:fullratsimp(expand(sa2)); sa1 , sa2 and sa2 can be used as part of the feedback when a student doesn't get the right answer. Satisfying any initial/boundary conditions If the student's answer is ans then we can check initial/boundary conditions at a point x=x0 simply by using ev(ans,x=x0); block([ds],ds:diff(ans,x),ev(ds,x=x0)); Notice in the second example the need to calculate the derivative of the student's answer before it is evaluated at the point x=x0 . These values can be compared with answer tests in the usual way. Arbitrary constants Further tests are needed to ensure the student's solution is non-trivial, satisfies any initial conditions, or is suitably general. To find which constants are present in an expression use Maxima's listofvars command. In particular, to find if c appears in an expression ans we can use the predicate member member(c,listofvars(ans)) However, it is unusual to want to specify the name of a constant. A student may choose another name. The example below may be helpful here. Second order linear differential equations with constant coefficients One important class of ODEs are the second order linear differential equations with constant coefficients. Generating these kinds of problems is relatively simple: we just need to create a quadratic with the correct sort of roots. Let us assume we have two real roots. We might expect an answer Ae^{\\lambda_1 t}+Be^{\\lambda_2 t} . We might have an unusual, but correct, answer such as Ae^{\\lambda_1 t}\\left(1+Be^{\\lambda_2 t}\\right) . Hence, we can't just \"look at the answer\". A sample question of this type is provided by STACK, in which we have the following question variables. sa1 : subst(y(t)=ans1,ode); sa2 : ev(sa1,nouns); sa3 : fullratsimp(expand(sa2)); l : delete(t,listofvars(ans1)); lv : length(l); b1 : ev(ans1,t=0,fullratsimp); b2 : ev(ans1,t=1,fullratsimp); m : float(if b2#0 then fullratsimp(b1/b2) else 0); Here sa1 , sa2 and sa3 are used to ensure the answer satisfies the ODE and if not to provide feedback. To ensure we have two constants we count the number of variables using listofvars , not including t . We are looking for two constants. To ensure the solution is suitably general, we confirm y(1)\\neq 0 and calculate y(0)/y(1) . If this simplifies to a number then the constants have cancelled out and we don't have a general solution consisting of two linearly independent parts. These are the properties a correct answer should have. If the teacher has a preference for the form, then a separate test is required to enforce it. For example, you might like the top operation to be a + , i.e. sum. This can be confirmed by aop : is(equal(op(ans1),\"+\")); Then test aop is true with another answer test. Note that the arguments to answer tests cannot contain double quotes, so a question variable is needed here. Next, let us assume we have complex root, e.g. in the equation \\ddot{y}+2\\dot{y}+5=0 we have \\lambda = -1 \\pm 2i . We potentially have quite a variety of solutions. y=e^{-t}(A\\sin(2t)+B\\cos(2t)) y=Ae^{-t}\\sin(2t+B) y=Ae^{(-1+2i)t}+Be^{(-1-2i)t} The advantage is that the same code correctly assesses all these forms of the answer. Separating the general from particular solution. Consider the differential equation \\ddot{y}+4\\dot{y}=8\\tan(t) with corresponding general solution ode:'diff(y,t,2)+4*y-8*tan(t); ans1:-2*sin(2*t)-4*t*cos(2*t)+4*log(cos(t))*sin(2*t)+c_1*cos(2*t)+c_2*sin(2*t); The solution of such an equation consists of the sum y(t) = c_1\\ y_1(t)+c_2\\ y_2(t)+y_p(t) . The general solution is the term c_1\\ y_1(t)+c_2\\ y_2(t) and the particular solution is the part y_p(t) . It is useful to separate these. Run the above code, which should work. Then we execute the following, which checks the general solution part is made up of two linearly independent parts. /* Calculate the \"Particular integral\", (by setting both constants to zero) and then separate out the \"general solution\".*/ ansPI:ev(ans1,maplist(lambda([ex],ex=0), l)); ansGS:ans1-ansPI; g1 : ev(ansGS,t=0,fullratsimp); g2 : ev(ansGS,t=1,fullratsimp); m : float(if g2#0 then fullratsimp(g1/g2) else 0); Notice to calculate y_p(t) we set the constants c_1=c_2=0 , but using the variables in the list l which is defined above as the list of constants without t . First order exact differential equations An important class of differential equations are the so-called first order exact differential equations of the form p(x,y)\\cdot \\dot{y}(x) + q(x,y) =0. Assume that h(x,y)=c gives an implicit function, which satisfies this equation. Then \\frac{\\mathrm{d}h}{\\mathrm{d}x}=\\frac{\\partial h}{\\partial y}\\cdot \\frac{\\mathrm{d}y}{\\mathrm{d}x}+\\frac{\\partial h}{\\partial x}=0 and so \\frac{\\partial h}{\\partial y} = p(x,y), \\quad \\frac{\\partial h}{\\partial x}=q(x,y). Differentiating once further (and assuming sufficient regularity of h ) we have \\frac{\\partial p}{\\partial x} = \\frac{\\partial^2 h}{\\partial x\\partial y}=\\frac{\\partial q}{\\partial y}. Note that this condition on p and q is necessary and sufficient for the ODE to be exact. In search of such a function h(x,y) we may define h_1 = \\int q(x,y)\\mathrm{d}x + c_1(y), h_2 = \\int p(x,y)\\mathrm{d}y + c_2(x). Notice here that c_1 and c_2 are arbitrary functions of integration. To evaluate these we differentiate again, for example taking the first of these we find \\frac{\\mathrm{d}h_1}{\\mathrm{d}y}=\\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right) + \\frac{\\mathrm{d}c_1}{\\mathrm{d}y} = p(x,y) where this last equality arises from the differential equation. Rearranging this and solving we have c_1(y) = \\int\\left( p(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right)\\right) \\mathrm{d}y. Similarly we may solve for c_2(x) = \\int\\left( q(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int p(x,y)\\mathrm{d}y \\right)\\right) \\mathrm{d}x. If h_1=h_2 then we have an exact differential equation, and h=h_1=h_2 given the integral of our ODE. Example x\\dot{y}+y+4=0 As an example consider x\\dot{y}+y+4=0. Then p=x and q=y+4 . c_1(y) = \\int\\left( p(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right)\\right) \\mathrm{d}y = \\int\\left( x- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int y+4\\mathrm{d}x \\right)\\right) \\mathrm{d}y = \\int\\left( x- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(xy+4x\\right)\\right) \\mathrm{d}y=0 And so h_1 = \\int q(x,y)\\mathrm{d}x + c_1(y) = \\int y+4 \\mathrm{d}x = x(y+4)+c. Now, c_2(x) = \\int\\left( q(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int p(x,y)\\mathrm{d}y \\right)\\right) \\mathrm{d}x = \\int (y+4) - \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int x\\mathrm{d}y \\right) \\mathrm{d}x = \\int (y+4) - y \\mathrm{d}x = 4x. And so, h_2 = \\int p(x,y)\\mathrm{d}y + c_2(x) = \\int x \\mathrm{d}y +4x = xy+4x+c In both cases we obtain the same answer for h(x,y)=xy+4x . Maxima code The following Maxima code implements this method, and provides further examples of how to manipulate ODEs. /* Solving exact differential equations in Maxima */ (kill(all),load(\"format\"))$ ODE:x*'diff(y,x)+y+4$ /* Ensure we have an expression, not an equation */ if op(ODE)=\"=\" then ODE:lhs(ODE)-rhs(ODE); /* This should write the ODE in the form p*'diff(y,x)+q which we can then sort out to get the coefficients*/ ODE:format(ODE,%poly('diff(y,x)))$ ODEc:coeffs(ODE,'diff(y,x)); q:ODEc[2][1]; p:ODEc[3][1]; /* Check our condition for an exact ODE */ if fullratsimp(diff(p,x)-diff(q,y))=0 then print(\"EXACT\") else print(\"NOT EXACT\")$ /* Next we need to solve [diff(h,x)=q,diff(h,y)=p] to find the integral of our ODE */ h1:integrate(q,x); h2:integrate(p,y); H1:h1+integrate(p-diff(h1,y),y); H2:h2+integrate(q-diff(h2,x),x); /* Note, H1 and H2 should be the same! */ /* Hence the solution is, in terms of y=...+c*/ solve(H1=c,y); Further examples are / Non-exact equations / ODE:y=x*'diff(y,x); /* Exact equations */ ODE:2*y*x*'diff(y,x)+y^2-2*x=0$ ODE:sin(x)*cosh(y)-'diff(y,x)*cos(x)*sinh(y)=0$ ODE:(3*x^2*cos(3*y)+2*y)*'diff(y,x)=-2*x*sin(3*y)$ ODE:x*'diff(y,x)+y+4$ Modelling with differential equations. It is sometimes necessary for the student's answer to be a differential equation. Student's answers are always automatically converted to noun forms. That is a student's answer diff(y,x) is converted internally to noundiff(y,x) to prevent evaluation to zero. However, the AlgEquiv answer test does evaluate all nouns! So, a student's answer diff(y,x) will be found algebraically equivalent to 0 . In Maxima diff(y(x),x) is not evaluated further. Getting students to type diff(y(x),x) and not diff(y,x) will be a challange. Hence, if you want to condone the difference, it is probably best to evaluate the student's answer in the feedback variables as follows to ensure all occurances of y become y(x) . ans1:'diff(y(x),x)+1 = 0; ansyx:subst(y,y(x),ans1); Trying to substitute y(x) for y will throw an error. Don't use the following, as if the student has used y(x) then it will become y(x)(x) ! ans1:'diff(y,x)+1 = 0; ansyx:ev(ans1,y=y(x)); The ATEqualComAss also evaluates its arguments but does not \"simplify\" them. So, counter-intuatively perhaps, we currently do have ATEqualComAss(diff(x^2,x), 2*x); as true. Student's answers always have noun forms added to diff , so if a student types in (literally) diff(y,x,1)+1 = 0 this will end up being sent to answer test as 'diff(y,x,1)+1 = 0 . Note the spostrophie at the start protects the student's diff from evaluation. Note that postfix apostrophies are not supported, i.e. y'(x) or y' is not currently permitted as input syntax. See also Maxima reference topics","title":"Differential Equations"},{"location":"en/CAS/Differential_equations/#differential-equations","text":"This page provides examples of how to represent and manipulate ordinary differential equations (ODEs) in Maxima when writing STACK questions.","title":"Differential Equations"},{"location":"en/CAS/Differential_equations/#representing-odes","text":"In a Maxima session we can represent an ODE as ODE: x^2*'diff(y,x) + 3*y*x = sin(x)/x; Notice the use of the ' character in front of the diff function to prevent evaluation. Applied to a function call, such as diff , the single quote prevents evaluation of the function call, although the arguments of the function are still evaluated (if evaluation is not otherwise prevented). The result is the noun form of the function call.","title":"Representing ODEs"},{"location":"en/CAS/Differential_equations/#displaying-odes","text":"Maxima has two notations to display ODEs. If derivabbrev:false then 'diff(y,x) is displayed in STACK as \\frac{\\mathrm{d}y}{\\mathrm{d}x} . Note this differs from Maxima's normal notation of \\frac{\\mathrm{d}}{\\mathrm{d}x}y . If derivabbrev:true then 'diff(y,x) is displayed in STACK and Maxima as y_x . Extra brackets are sometimes produced around the differential. You must have simp:true otherwise the display routines will not work.","title":"Displaying ODEs"},{"location":"en/CAS/Differential_equations/#manipulating-odes-in-maxima","text":"This can be solved with Maxima's ode2 command and initial conditions specified. Below is an example of Maxima's output. (%i1) ODE: x^2*'diff(y,x) + 3*y*x = sin(x)/x; 2 dy sin(x) (%o1) x -- + 3 x y = ------ dx x (%i2) ode2(ODE,y,x); %c - cos(x) (%o2) y = ----------- 3 x (%i3) ic1(%o2,x=%pi,y=0); cos(x) + 1 (%o3) y = - ---------- 3 x Further examples and documentation are given in the Maxima manual Note that by default STACK changes the value of Maxima's logabs variable. This changes the way 1/x is integrated. If you want the default behaviour of Maxima you will need to restore logabs:false in the question variables.","title":"Manipulating ODEs in Maxima"},{"location":"en/CAS/Differential_equations/#randomly-generating-ode-problems","text":"When randomly generating questions we could easily generate an ODE which cannot be solved in closed form, so that in particular using ode2 may be problematic. It is much better when setting any kind of STACK question to start with the method and work backwards to generate the question. This ensures the question remains valid over a whole range of parameters. It also provides many intermediate steps which are useful for a worked solution.","title":"Randomly generating ODE problems"},{"location":"en/CAS/Differential_equations/#Solve_and_ode2","text":"Maxima functions such as solve and ode2 add arbitrary constants, such as constants of integration. In Maxima these are indicated adding constants which begin with percentage characters. For example, assume(x>0); eq1:x^2*'diff(y,x) + 3*y*x = sin(x)/x; sol:ode2(eq1,y,x); results in y = (%c-cos(x))/x^3; Notice the %c in this example. We need a function to strip out the variables starting with % , especially as these are sometimes numbered and we want to use a definite letter, or sequence for the constants. The function stack_strip_percent(ex,var) replaces all variable names starting with % with those in var . There are two ways to use this. if var is a list then take the variables in the list in order. if var is a variable name, then Maxima returns unevaluated list entries, For example stack_strip_percent(y = (%c-cos(x))/x^3,k); returns y = (k[1]-cos(x))/x^3; This is displayed in STACK using subscripts, which is natural. The unevaluated list method also does not need to know how many % signs appear in the expression. The other usage is to provide explicit names for each variable, but the list must be longer than the number of constants in ex , e.g. stack_strip_percent(y = (%c-cos(x))/x^3,[c1,c2]); which returns y = (c1-cos(x))/x^3; The following example question variables can be used within STACK. assume(x>0); ode : x^2*'diff(y,x) + 3*y*x = sin(x)/x; sol : stack_strip_percent(ode2(ode,y,x),[k]); ta : rhs(ev(sol,nouns)); Note, you may need to use the Option \"assume positive\" to get ODE to evaluate the integrals formally and hence \"solve correctly\". If you need to create a list of numbered variables use vars0:stack_var_makelist(k, 5); vars1:rest(stack_var_makelist(k, 6));","title":"% characters from solve and ode2"},{"location":"en/CAS/Differential_equations/#assessing-answers","text":"ODEs provide a good example of the principle that we should articulate the properties we are looking for in ordinary differential equations. These properties are The answer satisfies the differential equation. The answer satisfies any initial/boundary conditions. The answer is general. The answer is in the required form. Hence, for ODE questions we need a potential response tree which establishes a number of separate properties. On the basis of the properties satisfied, we then need to generate outcomes.","title":"Assessing answers"},{"location":"en/CAS/Differential_equations/#satisfying-the-differential-equation","text":"When marking this kind of question, it is probably best to take the student's answer and substitute this into the ODE. The student's answer should satisfy the equation. Just \"looking like the model answer\" isn't as robust. How else does the teacher avoid the problem of knowing which letter the student used to represent an arbitrary constant? E.g. in Maxima code ode:x^2*'diff(y,x) + 3*y*x = sin(x)/x; ans: (c - cos(x))/x^3; /* The student's (correct) answer */ sa1:subst(y=ans,ode); sa2:ev(sa1,nouns); sa3:fullratsimp(expand(sa2)); sa1 , sa2 and sa2 can be used as part of the feedback when a student doesn't get the right answer.","title":"Satisfying the differential equation"},{"location":"en/CAS/Differential_equations/#satisfying-any-initialboundary-conditions","text":"If the student's answer is ans then we can check initial/boundary conditions at a point x=x0 simply by using ev(ans,x=x0); block([ds],ds:diff(ans,x),ev(ds,x=x0)); Notice in the second example the need to calculate the derivative of the student's answer before it is evaluated at the point x=x0 . These values can be compared with answer tests in the usual way.","title":"Satisfying any initial/boundary conditions"},{"location":"en/CAS/Differential_equations/#arbitrary-constants","text":"Further tests are needed to ensure the student's solution is non-trivial, satisfies any initial conditions, or is suitably general. To find which constants are present in an expression use Maxima's listofvars command. In particular, to find if c appears in an expression ans we can use the predicate member member(c,listofvars(ans)) However, it is unusual to want to specify the name of a constant. A student may choose another name. The example below may be helpful here.","title":"Arbitrary constants"},{"location":"en/CAS/Differential_equations/#second-order-linear-differential-equations-with-constant-coefficients","text":"One important class of ODEs are the second order linear differential equations with constant coefficients. Generating these kinds of problems is relatively simple: we just need to create a quadratic with the correct sort of roots. Let us assume we have two real roots. We might expect an answer Ae^{\\lambda_1 t}+Be^{\\lambda_2 t} . We might have an unusual, but correct, answer such as Ae^{\\lambda_1 t}\\left(1+Be^{\\lambda_2 t}\\right) . Hence, we can't just \"look at the answer\". A sample question of this type is provided by STACK, in which we have the following question variables. sa1 : subst(y(t)=ans1,ode); sa2 : ev(sa1,nouns); sa3 : fullratsimp(expand(sa2)); l : delete(t,listofvars(ans1)); lv : length(l); b1 : ev(ans1,t=0,fullratsimp); b2 : ev(ans1,t=1,fullratsimp); m : float(if b2#0 then fullratsimp(b1/b2) else 0); Here sa1 , sa2 and sa3 are used to ensure the answer satisfies the ODE and if not to provide feedback. To ensure we have two constants we count the number of variables using listofvars , not including t . We are looking for two constants. To ensure the solution is suitably general, we confirm y(1)\\neq 0 and calculate y(0)/y(1) . If this simplifies to a number then the constants have cancelled out and we don't have a general solution consisting of two linearly independent parts. These are the properties a correct answer should have. If the teacher has a preference for the form, then a separate test is required to enforce it. For example, you might like the top operation to be a + , i.e. sum. This can be confirmed by aop : is(equal(op(ans1),\"+\")); Then test aop is true with another answer test. Note that the arguments to answer tests cannot contain double quotes, so a question variable is needed here. Next, let us assume we have complex root, e.g. in the equation \\ddot{y}+2\\dot{y}+5=0 we have \\lambda = -1 \\pm 2i . We potentially have quite a variety of solutions. y=e^{-t}(A\\sin(2t)+B\\cos(2t)) y=Ae^{-t}\\sin(2t+B) y=Ae^{(-1+2i)t}+Be^{(-1-2i)t} The advantage is that the same code correctly assesses all these forms of the answer.","title":"Second order linear differential equations with constant coefficients"},{"location":"en/CAS/Differential_equations/#separating-the-general-from-particular-solution","text":"Consider the differential equation \\ddot{y}+4\\dot{y}=8\\tan(t) with corresponding general solution ode:'diff(y,t,2)+4*y-8*tan(t); ans1:-2*sin(2*t)-4*t*cos(2*t)+4*log(cos(t))*sin(2*t)+c_1*cos(2*t)+c_2*sin(2*t); The solution of such an equation consists of the sum y(t) = c_1\\ y_1(t)+c_2\\ y_2(t)+y_p(t) . The general solution is the term c_1\\ y_1(t)+c_2\\ y_2(t) and the particular solution is the part y_p(t) . It is useful to separate these. Run the above code, which should work. Then we execute the following, which checks the general solution part is made up of two linearly independent parts. /* Calculate the \"Particular integral\", (by setting both constants to zero) and then separate out the \"general solution\".*/ ansPI:ev(ans1,maplist(lambda([ex],ex=0), l)); ansGS:ans1-ansPI; g1 : ev(ansGS,t=0,fullratsimp); g2 : ev(ansGS,t=1,fullratsimp); m : float(if g2#0 then fullratsimp(g1/g2) else 0); Notice to calculate y_p(t) we set the constants c_1=c_2=0 , but using the variables in the list l which is defined above as the list of constants without t .","title":"Separating the general from particular solution."},{"location":"en/CAS/Differential_equations/#first-order-exact-differential-equations","text":"An important class of differential equations are the so-called first order exact differential equations of the form p(x,y)\\cdot \\dot{y}(x) + q(x,y) =0. Assume that h(x,y)=c gives an implicit function, which satisfies this equation. Then \\frac{\\mathrm{d}h}{\\mathrm{d}x}=\\frac{\\partial h}{\\partial y}\\cdot \\frac{\\mathrm{d}y}{\\mathrm{d}x}+\\frac{\\partial h}{\\partial x}=0 and so \\frac{\\partial h}{\\partial y} = p(x,y), \\quad \\frac{\\partial h}{\\partial x}=q(x,y). Differentiating once further (and assuming sufficient regularity of h ) we have \\frac{\\partial p}{\\partial x} = \\frac{\\partial^2 h}{\\partial x\\partial y}=\\frac{\\partial q}{\\partial y}. Note that this condition on p and q is necessary and sufficient for the ODE to be exact. In search of such a function h(x,y) we may define h_1 = \\int q(x,y)\\mathrm{d}x + c_1(y), h_2 = \\int p(x,y)\\mathrm{d}y + c_2(x). Notice here that c_1 and c_2 are arbitrary functions of integration. To evaluate these we differentiate again, for example taking the first of these we find \\frac{\\mathrm{d}h_1}{\\mathrm{d}y}=\\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right) + \\frac{\\mathrm{d}c_1}{\\mathrm{d}y} = p(x,y) where this last equality arises from the differential equation. Rearranging this and solving we have c_1(y) = \\int\\left( p(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right)\\right) \\mathrm{d}y. Similarly we may solve for c_2(x) = \\int\\left( q(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int p(x,y)\\mathrm{d}y \\right)\\right) \\mathrm{d}x. If h_1=h_2 then we have an exact differential equation, and h=h_1=h_2 given the integral of our ODE.","title":"First order exact differential equations"},{"location":"en/CAS/Differential_equations/#example-xdotyy40","text":"As an example consider x\\dot{y}+y+4=0. Then p=x and q=y+4 . c_1(y) = \\int\\left( p(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right)\\right) \\mathrm{d}y = \\int\\left( x- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int y+4\\mathrm{d}x \\right)\\right) \\mathrm{d}y = \\int\\left( x- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(xy+4x\\right)\\right) \\mathrm{d}y=0 And so h_1 = \\int q(x,y)\\mathrm{d}x + c_1(y) = \\int y+4 \\mathrm{d}x = x(y+4)+c. Now, c_2(x) = \\int\\left( q(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int p(x,y)\\mathrm{d}y \\right)\\right) \\mathrm{d}x = \\int (y+4) - \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int x\\mathrm{d}y \\right) \\mathrm{d}x = \\int (y+4) - y \\mathrm{d}x = 4x. And so, h_2 = \\int p(x,y)\\mathrm{d}y + c_2(x) = \\int x \\mathrm{d}y +4x = xy+4x+c In both cases we obtain the same answer for h(x,y)=xy+4x .","title":"Example x\\dot{y}+y+4=0"},{"location":"en/CAS/Differential_equations/#maxima-code","text":"The following Maxima code implements this method, and provides further examples of how to manipulate ODEs. /* Solving exact differential equations in Maxima */ (kill(all),load(\"format\"))$ ODE:x*'diff(y,x)+y+4$ /* Ensure we have an expression, not an equation */ if op(ODE)=\"=\" then ODE:lhs(ODE)-rhs(ODE); /* This should write the ODE in the form p*'diff(y,x)+q which we can then sort out to get the coefficients*/ ODE:format(ODE,%poly('diff(y,x)))$ ODEc:coeffs(ODE,'diff(y,x)); q:ODEc[2][1]; p:ODEc[3][1]; /* Check our condition for an exact ODE */ if fullratsimp(diff(p,x)-diff(q,y))=0 then print(\"EXACT\") else print(\"NOT EXACT\")$ /* Next we need to solve [diff(h,x)=q,diff(h,y)=p] to find the integral of our ODE */ h1:integrate(q,x); h2:integrate(p,y); H1:h1+integrate(p-diff(h1,y),y); H2:h2+integrate(q-diff(h2,x),x); /* Note, H1 and H2 should be the same! */ /* Hence the solution is, in terms of y=...+c*/ solve(H1=c,y); Further examples are / Non-exact equations / ODE:y=x*'diff(y,x); /* Exact equations */ ODE:2*y*x*'diff(y,x)+y^2-2*x=0$ ODE:sin(x)*cosh(y)-'diff(y,x)*cos(x)*sinh(y)=0$ ODE:(3*x^2*cos(3*y)+2*y)*'diff(y,x)=-2*x*sin(3*y)$ ODE:x*'diff(y,x)+y+4$","title":"Maxima code"},{"location":"en/CAS/Differential_equations/#modelling-with-differential-equations","text":"It is sometimes necessary for the student's answer to be a differential equation. Student's answers are always automatically converted to noun forms. That is a student's answer diff(y,x) is converted internally to noundiff(y,x) to prevent evaluation to zero. However, the AlgEquiv answer test does evaluate all nouns! So, a student's answer diff(y,x) will be found algebraically equivalent to 0 . In Maxima diff(y(x),x) is not evaluated further. Getting students to type diff(y(x),x) and not diff(y,x) will be a challange. Hence, if you want to condone the difference, it is probably best to evaluate the student's answer in the feedback variables as follows to ensure all occurances of y become y(x) . ans1:'diff(y(x),x)+1 = 0; ansyx:subst(y,y(x),ans1); Trying to substitute y(x) for y will throw an error. Don't use the following, as if the student has used y(x) then it will become y(x)(x) ! ans1:'diff(y,x)+1 = 0; ansyx:ev(ans1,y=y(x)); The ATEqualComAss also evaluates its arguments but does not \"simplify\" them. So, counter-intuatively perhaps, we currently do have ATEqualComAss(diff(x^2,x), 2*x); as true. Student's answers always have noun forms added to diff , so if a student types in (literally) diff(y,x,1)+1 = 0 this will end up being sent to answer test as 'diff(y,x,1)+1 = 0 . Note the spostrophie at the start protects the student's diff from evaluation. Note that postfix apostrophies are not supported, i.e. y'(x) or y' is not currently permitted as input syntax.","title":"Modelling with differential equations."},{"location":"en/CAS/Differential_equations/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Discrete_mathematics/","text":"Discrete mathematics and graph theory. A graph in discrete mathematics is a set of edges and vertices. Maxima has a \"graphs\" package, which we do not currently support (see github issue #572 for a discussion of why). Generating points for a graph The following question variables produce the complete graph on m vertices. /* Choose the number of points. */ m:7; /* Distribute the points around a circle. */ pts:makelist([decimalplaces(float(cos(2*%pi*k/m)),4),decimalplaces(float(sin(2*%pi*k/m)),4)],k,0,m-1); /* Create the complete graph of m elements. */ every_pair(ex):=block( if length(ex)<2 then return([]), if length(ex)=2 then return([ex]), append(maplist(lambda([ex2],[first(ex),ex2]),rest(ex)), every_pair(rest(ex))) ); edges:every_pair(makelist(k,k,0,m-1)); Displaying graphs with plot() It is possible to plot simple discrete graphs directly using STACK's plot command by building a combination of discrete and line plots. If you want to do this, we strongly recommend you work offline first in Maxima using plot2d to ensure your Maxima code works. In general it is better to (1) separate connections of points from the coordinates of points, and (2) deal with lists of coordinates. That way we can pass a connection, or the coordinates of a point into a function more easily. Create a list of coordinates, where each coordinate is a point [x,y]. nk:5; /* Position nk coordinates evenly round the unit circle. */ pc1:float(makelist([cos(%pi/(2*nk)+2*k*%pi/nk), sin(%pi/(2*nk)+2*k*%pi/nk)], k, 0, nk)); /* Extract individual coordinates. */ x1:maplist(first, pc1); y1:maplist(second, pc1); p1:[discrete,x1,y1]; Plot must have floating point numbers to deal with. Now use the CASText: {@plot([p1,p1],[x,-1,1],[y,-1,1],[style,points,lines],[box,false],[axes,false])@} Notice we plot a list, containing p1 twice, once with style points and once with lines . The following takes a list of edge connections, [a,b] , and a list of co-ordinate points of the form [x,y] and produces the discrete plots of the edge connections. Note the two stage process. Turn the list of edge connections ( edgel ) into lists of points to connect. (The inner maplist ) Turn two points to connect into a discrete plot of the form [discrete [x1, x2], [y1, y2]] . The following code could be combined, but two separate maplist applications separate out the processes with more clarity. pedges(edgel, pts):= maplist(lambda([ex], [discrete, maplist(first, ex), maplist(second, ex)]), maplist(lambda([ex], [pts[first(ex)], pts[second(ex)]]), edgel)); As an example we will create a simple (disconnected) graph as follows. g1:[[2,3], [3,4], [4,2], [1,5]]; /* Plot this graph, using points in positions pc1. */ p2:pedges(g1, pc1); /* Set colours. */ pcols2:makelist(red, k, 1, length(p2)); /* Set Style */ pstyle2:makelist(lines, k, 1, length(p2)); /* Add in points, as before. */ p2:append([p1], p2); pstyle2:append([points], pstyle2); pcols2:append([blue], pcols2); /* Create a single plot. */ pcols2:append([color], pcols2); pstyle2:append([style], pstyle2); And add in the castext {@plot(p2,[x,-1,1],[y,-1,1], pstyle2, pcols2, [box,false], [axes,false])@} To create a complete graph, we need code to create every pair of edges [a,b], as follows. /* Return a list of edge pairs n1 to a list of points. */ pedgesto(n1, nl) := maplist(lambda([ex], [n1, ex]), nl); /* Return every pair of points in nl. */ palledges(nl) := if is(length(nl)=1) then [] else append(pedgesto(first(nl), rest(nl)), palledges(rest(nl))); /* The complete graph on nk edges. */ knk:palledges(makelist(k,k,1,nk)); /* Plot this graph, using points in positions pc1. */ p3:pedges(knk, pc1); /* Set colours. */ pcols3:makelist(red, k, 1, length(p3)); /* Set Style */ pstyle3:makelist(lines, k, 1, length(p3)); /* Add in points, as before. */ p3:append([p1], p3); pstyle3:append([points], pstyle3); pcols3:append([blue], pcols3); /* Create a single plot. */ pcols3:append([color], pcols3); pstyle3:append([style], pstyle3); And add in the castext {@plot(p3,[x,-1,1],[y,-1,1], pstyle3, pcols3, [box,false], [axes,false])@} In the above code I have tried to separate out all the issues into individual steps. Clearly there is significant scope here for utility/convenience functions. Displaying graphs with JSXGraph JSXGraph can be used to display discrete graphs. In the question variables define your points and edges. /* A list of points, which are lists of coordinates.*/ pts:[[1.0,0.0],[0.623,0.782],[-0.223,0.975],[-0.901,0.434],[-0.901,-0.434],[-0.223,-0.975],[0.623,-0.782]]; /* A list of edge connections. */ edges:[[0,1],[0,2],[0,3],[4,5],[4,6],[4,0]]; Then, you can use this JSXGraph block to create your vertices and edges. Note, this code uses board.create('arrow', [...]) , but you could as well use segment not arrow for an un-directed graph. [[jsxgraph]] /* boundingbox:[left, top, right, bottom] */ var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1.2, 1.2, 1.2, -1.2], axis: false, showCopyright: false}); /* Notice the syntax STACK uses for putting the _value_ of a variable into the text before display. */ var pts = {#pts#}; var boardpts = new Array(); var arrayLength = pts.length; for (var i = 0; i < arrayLength; i++) { boardpts.push(board.create('point', pts[i])); } var edges = {#edges#}; var boardedges = new Array(); var arrayLength = edges.length; for (var i = 0; i < arrayLength; i++) { boardedges.push(board.create('arrow', [boardpts[edges[i][0]], boardpts[edges[i][1]]])); } [[/jsxgraph]]","title":"Discrete mathematics and graph theory."},{"location":"en/CAS/Discrete_mathematics/#discrete-mathematics-and-graph-theory","text":"A graph in discrete mathematics is a set of edges and vertices. Maxima has a \"graphs\" package, which we do not currently support (see github issue #572 for a discussion of why).","title":"Discrete mathematics and graph theory."},{"location":"en/CAS/Discrete_mathematics/#generating-points-for-a-graph","text":"The following question variables produce the complete graph on m vertices. /* Choose the number of points. */ m:7; /* Distribute the points around a circle. */ pts:makelist([decimalplaces(float(cos(2*%pi*k/m)),4),decimalplaces(float(sin(2*%pi*k/m)),4)],k,0,m-1); /* Create the complete graph of m elements. */ every_pair(ex):=block( if length(ex)<2 then return([]), if length(ex)=2 then return([ex]), append(maplist(lambda([ex2],[first(ex),ex2]),rest(ex)), every_pair(rest(ex))) ); edges:every_pair(makelist(k,k,0,m-1));","title":"Generating points for a graph"},{"location":"en/CAS/Discrete_mathematics/#displaying-graphs-with-plot","text":"It is possible to plot simple discrete graphs directly using STACK's plot command by building a combination of discrete and line plots. If you want to do this, we strongly recommend you work offline first in Maxima using plot2d to ensure your Maxima code works. In general it is better to (1) separate connections of points from the coordinates of points, and (2) deal with lists of coordinates. That way we can pass a connection, or the coordinates of a point into a function more easily. Create a list of coordinates, where each coordinate is a point [x,y]. nk:5; /* Position nk coordinates evenly round the unit circle. */ pc1:float(makelist([cos(%pi/(2*nk)+2*k*%pi/nk), sin(%pi/(2*nk)+2*k*%pi/nk)], k, 0, nk)); /* Extract individual coordinates. */ x1:maplist(first, pc1); y1:maplist(second, pc1); p1:[discrete,x1,y1]; Plot must have floating point numbers to deal with. Now use the CASText: {@plot([p1,p1],[x,-1,1],[y,-1,1],[style,points,lines],[box,false],[axes,false])@} Notice we plot a list, containing p1 twice, once with style points and once with lines . The following takes a list of edge connections, [a,b] , and a list of co-ordinate points of the form [x,y] and produces the discrete plots of the edge connections. Note the two stage process. Turn the list of edge connections ( edgel ) into lists of points to connect. (The inner maplist ) Turn two points to connect into a discrete plot of the form [discrete [x1, x2], [y1, y2]] . The following code could be combined, but two separate maplist applications separate out the processes with more clarity. pedges(edgel, pts):= maplist(lambda([ex], [discrete, maplist(first, ex), maplist(second, ex)]), maplist(lambda([ex], [pts[first(ex)], pts[second(ex)]]), edgel)); As an example we will create a simple (disconnected) graph as follows. g1:[[2,3], [3,4], [4,2], [1,5]]; /* Plot this graph, using points in positions pc1. */ p2:pedges(g1, pc1); /* Set colours. */ pcols2:makelist(red, k, 1, length(p2)); /* Set Style */ pstyle2:makelist(lines, k, 1, length(p2)); /* Add in points, as before. */ p2:append([p1], p2); pstyle2:append([points], pstyle2); pcols2:append([blue], pcols2); /* Create a single plot. */ pcols2:append([color], pcols2); pstyle2:append([style], pstyle2); And add in the castext {@plot(p2,[x,-1,1],[y,-1,1], pstyle2, pcols2, [box,false], [axes,false])@} To create a complete graph, we need code to create every pair of edges [a,b], as follows. /* Return a list of edge pairs n1 to a list of points. */ pedgesto(n1, nl) := maplist(lambda([ex], [n1, ex]), nl); /* Return every pair of points in nl. */ palledges(nl) := if is(length(nl)=1) then [] else append(pedgesto(first(nl), rest(nl)), palledges(rest(nl))); /* The complete graph on nk edges. */ knk:palledges(makelist(k,k,1,nk)); /* Plot this graph, using points in positions pc1. */ p3:pedges(knk, pc1); /* Set colours. */ pcols3:makelist(red, k, 1, length(p3)); /* Set Style */ pstyle3:makelist(lines, k, 1, length(p3)); /* Add in points, as before. */ p3:append([p1], p3); pstyle3:append([points], pstyle3); pcols3:append([blue], pcols3); /* Create a single plot. */ pcols3:append([color], pcols3); pstyle3:append([style], pstyle3); And add in the castext {@plot(p3,[x,-1,1],[y,-1,1], pstyle3, pcols3, [box,false], [axes,false])@} In the above code I have tried to separate out all the issues into individual steps. Clearly there is significant scope here for utility/convenience functions.","title":"Displaying graphs with plot()"},{"location":"en/CAS/Discrete_mathematics/#displaying-graphs-with-jsxgraph","text":"JSXGraph can be used to display discrete graphs. In the question variables define your points and edges. /* A list of points, which are lists of coordinates.*/ pts:[[1.0,0.0],[0.623,0.782],[-0.223,0.975],[-0.901,0.434],[-0.901,-0.434],[-0.223,-0.975],[0.623,-0.782]]; /* A list of edge connections. */ edges:[[0,1],[0,2],[0,3],[4,5],[4,6],[4,0]]; Then, you can use this JSXGraph block to create your vertices and edges. Note, this code uses board.create('arrow', [...]) , but you could as well use segment not arrow for an un-directed graph. [[jsxgraph]] /* boundingbox:[left, top, right, bottom] */ var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1.2, 1.2, 1.2, -1.2], axis: false, showCopyright: false}); /* Notice the syntax STACK uses for putting the _value_ of a variable into the text before display. */ var pts = {#pts#}; var boardpts = new Array(); var arrayLength = pts.length; for (var i = 0; i < arrayLength; i++) { boardpts.push(board.create('point', pts[i])); } var edges = {#edges#}; var boardedges = new Array(); var arrayLength = edges.length; for (var i = 0; i < arrayLength; i++) { boardedges.push(board.create('arrow', [boardpts[edges[i][0]], boardpts[edges[i][1]]])); } [[/jsxgraph]]","title":"Displaying graphs with JSXGraph"},{"location":"en/CAS/Equations/","text":"Asking students to solve equations It is quite common to ask students to solve an algebraic equation. The student's answer may be a list (or set) of numbers. We need to check that this list is Correct: every element of the list satisfies the equation. Complete: every solution of the equation is in the list. The best way to do (1) is not to check algebraic equivalence with the list/set of correct answers! Instead, substitute the student's answer into the equation and see if it works. We proceed by example. Imagine the teacher has asked the student to solve the following equation defined in the \"question variables\". p:2*x^2+11*x-5/4; ta:solve(p,x); /* Solve gives a list of equations, we want a set of numbers. */ ta:setify(maplist(rhs,ta)); For solutions we are not interested in order, but we need multiplicity. Therefore a \"bag\" is what we need logically. However, Maxima only has sets and lists. If the student enters a set or list, the AlgEquiv answer test can be used to compare sets and lists, but it does so element-wise. We need to do something different. In the feedback variables we create a new list called \"listans\" as follows, assuming the student's answer is assigned to ans1 . /* Need a *LIST* from this point on, so we have a definite order. */ sans:listify(ans1); /* Substitute into the equation. */ listans:maplist(lambda([ex],ev(p,x=ex)), listify(ans1)); The values of listans are what we get when we substitute in each of the students' answers into the equation. We could also simplify this, but it isn't strictly necessary. /* \"Simplify\" the result (not strictly necessary) */ listans:maplist(fullratsimp, listans); Now we have a list of numbers. We need to compare this with something, but the student's list may have a different number of entries than of the teacher's solution! /* Generate something to compare this list with. */ zl:makelist(0,length(listans)); setify(append(first(ta)+1, rest(ta)) In the potential response tree, compare listans with zl using the AlgEquiv answer test and the quiet=yes option to suppress all feedback. Now we want to work out which answers are wrong. /* To decide which answers in a list are equivalent. */ /* Pick out the wrong answers. */ we:sublist(sans, lambda([ex], not(algebraic_equivalence(ev(p,x=ex),0)))); To use this, we could put the following in the false branch feedback. The following answers you entered do not satisfy the equation \\[ {@we@}. \\] To check (2) you need to make sure that the length of the student's answer is the same as the length of the teacher's. This can be done with the following two tests, one with numerical GE. If the student has too many they have repeated solutions. If they have too few they have missed some. length(fullratsimp(sans)) length(ta) Randomly generated variables In the above example, we may have created a randomly generated variable. E.g. v:rand([x,y,z,t]); p:a*v^2+b*v+c; In this case, to make the substitution you need to put in an extra evaluation. listans:maplist(lambda([ex],ev(p,ev(v=ex))), listify(ans1)); Repeated roots! If the teacher asks a student to enter the answer as a set, then by default STACK does not remove duplicates because validation, etc. is done with simp:false . If you want the student to enter repeated roots you must set Auto-simplify to no in the PRT to avoid losing solutions from the student. You can then check that each answer satisfies the equation and the student has the correct number of answers using length(ans1) being equivalent to the correct number using EqualComAss to avoid simplification. Note, that if you \"simplify\" ans1 you are likely to lose answers as sets automatically lose duplicates. Alternatively, you may want to simplify the student's answer to make sure they have the right number of different solutions. This is a separate test. length(fullratsimp(ans1)) Exact circumstances of the question will dictate what to do, and whether the teacher expects students to enter duplicate roots the right number of times.","title":"Asking students to solve equations"},{"location":"en/CAS/Equations/#asking-students-to-solve-equations","text":"It is quite common to ask students to solve an algebraic equation. The student's answer may be a list (or set) of numbers. We need to check that this list is Correct: every element of the list satisfies the equation. Complete: every solution of the equation is in the list. The best way to do (1) is not to check algebraic equivalence with the list/set of correct answers! Instead, substitute the student's answer into the equation and see if it works. We proceed by example. Imagine the teacher has asked the student to solve the following equation defined in the \"question variables\". p:2*x^2+11*x-5/4; ta:solve(p,x); /* Solve gives a list of equations, we want a set of numbers. */ ta:setify(maplist(rhs,ta)); For solutions we are not interested in order, but we need multiplicity. Therefore a \"bag\" is what we need logically. However, Maxima only has sets and lists. If the student enters a set or list, the AlgEquiv answer test can be used to compare sets and lists, but it does so element-wise. We need to do something different. In the feedback variables we create a new list called \"listans\" as follows, assuming the student's answer is assigned to ans1 . /* Need a *LIST* from this point on, so we have a definite order. */ sans:listify(ans1); /* Substitute into the equation. */ listans:maplist(lambda([ex],ev(p,x=ex)), listify(ans1)); The values of listans are what we get when we substitute in each of the students' answers into the equation. We could also simplify this, but it isn't strictly necessary. /* \"Simplify\" the result (not strictly necessary) */ listans:maplist(fullratsimp, listans); Now we have a list of numbers. We need to compare this with something, but the student's list may have a different number of entries than of the teacher's solution! /* Generate something to compare this list with. */ zl:makelist(0,length(listans)); setify(append(first(ta)+1, rest(ta)) In the potential response tree, compare listans with zl using the AlgEquiv answer test and the quiet=yes option to suppress all feedback. Now we want to work out which answers are wrong. /* To decide which answers in a list are equivalent. */ /* Pick out the wrong answers. */ we:sublist(sans, lambda([ex], not(algebraic_equivalence(ev(p,x=ex),0)))); To use this, we could put the following in the false branch feedback. The following answers you entered do not satisfy the equation \\[ {@we@}. \\] To check (2) you need to make sure that the length of the student's answer is the same as the length of the teacher's. This can be done with the following two tests, one with numerical GE. If the student has too many they have repeated solutions. If they have too few they have missed some. length(fullratsimp(sans)) length(ta)","title":"Asking students to solve equations"},{"location":"en/CAS/Equations/#randomly-generated-variables","text":"In the above example, we may have created a randomly generated variable. E.g. v:rand([x,y,z,t]); p:a*v^2+b*v+c; In this case, to make the substitution you need to put in an extra evaluation. listans:maplist(lambda([ex],ev(p,ev(v=ex))), listify(ans1));","title":"Randomly generated variables"},{"location":"en/CAS/Equations/#repeated-roots","text":"If the teacher asks a student to enter the answer as a set, then by default STACK does not remove duplicates because validation, etc. is done with simp:false . If you want the student to enter repeated roots you must set Auto-simplify to no in the PRT to avoid losing solutions from the student. You can then check that each answer satisfies the equation and the student has the correct number of answers using length(ans1) being equivalent to the correct number using EqualComAss to avoid simplification. Note, that if you \"simplify\" ans1 you are likely to lose answers as sets automatically lose duplicates. Alternatively, you may want to simplify the student's answer to make sure they have the right number of different solutions. This is a separate test. length(fullratsimp(ans1)) Exact circumstances of the question will dictate what to do, and whether the teacher expects students to enter duplicate roots the right number of times.","title":"Repeated roots!"},{"location":"en/CAS/Equivalence_reasoning/","text":"Reasoning by equivalence NOTE: Reasoning by equivalence was introduced in STACK 3.6. This area of STACK is still under active development, and features and behaviour may change significantly in future versions, subject to trials with students and feedback from colleagues. We currently provide support for basic single variable polynomials, very simple inequalities, simple simultaneous equations. There is no support for algebraic manipulations involving logarithms and trig functions although individual examples may work. Wider support is intended for future versions. A simple getting started with equivalence reasoning guide can be found elsewhere. What is reasoning by equivalence and this input type? Reasoning by equivalence is a particularly important activity in elementary algebra. It is an iterative formal symbolic procedure where algebraic expressions, or terms within an expression, are replaced by an equivalent until a \"solved\" form is reached. An example of solving a quadratic equation is shown below. \\begin{array}{cc} \\ & x^2-x=30 & \\\\ \\color{green}{\\Leftrightarrow} & x^2-x-30=0 & \\\\ \\color{green}{\\Leftrightarrow} & \\left(x-6\\right)\\cdot \\left(x+5\\right)=0 \\\\ \\color{green}{\\Leftrightarrow} & x-6=0\\lor x+5=0 \\\\ \\color{green}{\\Leftrightarrow} & x=6\\lor x=-5 \\end{array} The point is that replacing an expression or a sub-expression in a problem by an equivalent expression provides a new problem having the same solutions. This input type enables us to capture and evaluate student's line-by-line reasoning, i.e. their steps in working, during this kind of activity. Reasoning by equivalence is very common in elementary mathematics. It is either the entire task (such as when solving a quadratic) or it is an important part of a bigger problem. E.g. proving the induction step is often achieved by reasoning by equivalence. How do students use this input? Instructions for students . In traditional practice students work line by line rewriting an equation until it is solved. This input type is designed to capture this kind of working and evaluate it based on the assumption that each line should be equivalent to the previous one. Instructions for students are here . Some common observations about this form of reasoning are Students often use no logical connectives between lines. Students ignore the natural domain of an expression, e.g. in \\frac{1}{x} the value x=0 is excluded from the domain of definition. Operations which do not result in equivalence are often used, e.g. squaring both sides of an equation. This input type mirrors current common practice and does not expect students to indicate either logic or domains. The input type itself will give students feedback on these issues. Note that students must use correct propositional logic connectives or and and . E.g. their answer must be something correct such as x=1 or x=2 , not something sloppy like x=1 or 2 or x=1,2 . It certainly can't be something wrong such as x=1 and x=2 which is often seen in written answers! Note that students may not take square roots of both sides of an equation. This will be rejected because it is not equivalent! Similarly, students may not cancel terms from both sides which may be zero. As we require equivalence, students may not multiply either. This will probably not correspond to students' expectations, and may take a bit of getting used to. But should students really use logical connectives? Yes, I (CJS) believe they should but to require this from the input type now would be too big a step for students and their teachers. Students are already being expected to use connectives such as and and or correctly. The input type uses these connectives and in the future options may be added to this input type which require students to be explicit about logical connectives, especially when we add support for implication in addition to equivalence. As we gain confidence in teaching with equivalence reasoning, we will add more options to this input type. If you have strong views on how this input type should behave, please contact the developers. Validation and correctness STACK carefully separates out validation of a student's answer from the correctness . This idea is encapsulated in the separation of validation feedback via the tags [[validation]] which is tied to inputs, from the potential response trees which establish the mathematical properties. Each line of a student's answer must be a valid expression, just as with the algebraic input type. However, sets, lists and matrices are not permitted in this input type. The internal result is a list of expressions (equations or inequalities). Example use cases for this input type Reasoning by equivalence is the entire task. The argument must be correct and the last line is the final answer. In a formative setting, we want immediate feedback on whether the argument consists of equivalent lines. This feedback can be given as the student types line by line, or at the end when they press \"check\". The ability to give feedback on the equivalence of adjacent lines as the student types their answer somewhat blurs the distinction between validation and correctness, but in a way which is probably very useful to students. Notes for question authors The position of the validation tags, e.g. [[validation:ans1]] are ignored for this input type. Validation feedback is always displayed next to the TextArea into which students type their answer. The teacher's answer and any syntax hint must be a list. If you just pass in an expression strange behaviour may result. The input type works very much like the TextArea input type. Internally, the student's lines are turned into a list. If you want to use the \"final answer\" then use code such as last(ans1) in your potential response tree. If students type in an expression rather than an equation, the system will assume they forgot to add =0 at the end and act accordingly. This is displayed to the student. If the student starts their line with an = sign, this is accepted. Teachers cannot use a prefix = . In a worked solution the teacher must use the prefix function stackeq . For example, ta:[(x-1)^2,stackeq(x^2-2*x+1)] Teachers must explicitly use the nounor and nounand commands, not the and and or logic. For more details see the section on simplification . For example, a worked solution might be ta:[p=0,(v-n1)*(v-n2)=0,v-n1=0 nounor v-n2=0,v=n1 nounor v=n2] Input type options To enter options for this input use the \"extra options field\". Options should be a comma separated list of values only from the following list. hideequiv does not display whether each line is equivalent to the next at validation time. hidedomain does not display natural domain information. comments allows students to include comments in their answer. By default comments are not permitted as it breaks up the argument and stops automatic marking. firstline takes the first line of the teacher's answer and forces the student to have this as the first line of the student's answer. The test used is equality up to commutativity and associativity (EqualComAss answer test). assume_pos sets the value of Maxima's assume_pos variable to be true. If we assume_pos they any negative solutions will be ignored, whether or not they exist. So x=\\pm 2 will now be equivalent to x=2 . You might not want this equivalence. In particular, this also has the effect of condoning squaring or rooting both sides of an equation. For example x^4=2 will now be equivalent to x=2 (rather than x=2 \\vee x=-2 ). This is not the default, but is useful in situations where a student is rearranging an equation to a given subject, and all the variables are assumed to be positive. Note, this option is only for the input type. You will also need to set this in the question options to also affect the answer test. assume_real sets an internal flag to work over the real numbers. If true then x=1 will be considered equivalent to x^3=1 . Note, this option is only for the input type. You will also need to set this in the question options to also affect the answer test. calculus allows calculus operations in an argument. Note, this option is only for the input type. You will also need to set this in the answer test options to also affect the answer test. This is at a very early stage of development. For example, constants of integration are not currently checked by this currently. If the syntax hint is just the keyword firstline then the first line of the value of the teacher's answer will appear as a syntax hint. This enables a randomly generated syntax hint to appear in the box. Answer tests There are a number of answer tests which seek to establish whether a student's list of expressions are all equivalent. In these tests there is no concept of \"step size\" or any test that a student has worked in a sensible order. The tests share code with the input type, and feedback from the test will be identical to that from the input when this is shown. You will also need to set options, as in the input type above, to get the answer tests to reflect the options set. The options supported are assume_pos , assume_real , and calculus . EquivReasoning This test establishes that all the items in the list are equivalent, using algebraic equivalence. EquivFirst This test establishes that all the items in the list are equivalent, using algebraic equivalence. Test that the first line of the student's answer is equivalent to the first line of the teacher's answer up to commutativity and associativity (using the answer test EqualComAss.) To test the last line of an argument is in the correct form will require a separate node in the potential response tree. To add this to the answer test gives too many possibilities. Natural domains The equivalence reasoning input tracks natural domains of expressions. This is via the STACK's natural_domain(ex) function. Natural domains are shown to students in the validation feedback. \\begin{array}{lll} &\\frac{5\\,x}{2\\,x+1}-\\frac{3}{x+1}=1&{\\color{blue}{{x \\not\\in {\\left \\{-1 , -\\frac{1}{2} \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&5\\,x\\,\\left(x+1\\right)-3\\,\\left(2\\,x+1\\right)=\\left(x+1\\right)\\,\\left(2\\,x+1\\right)& \\end{array} At the moment STACK quietly condones silent domain enlargements such as in the above example. Repeated roots There is general ambiguity about how to express multiplicity of roots. If (x-1)^2=0 is not equivalent to x=1 then students need to indicate multiplicity of roots, but there appears to be no consensus on how this should be notated. The equation (x-3)^2 = 0 and the expression x=3 \\mbox{ or } x=3 are considered to be equivalent, because they have the same roots with the same multiplicity. The expressions x=3 \\mbox{ or } x=3 and x=3 have the same variety, but are not identical. This is, of course, slightly awkward since logical ``or'' is idempotent, and so x=3 \\mbox{ or } x=3 and x=3 would be equivalent at a symbolic level. For this reason, STACK accepts x=3 as equivalent to (x-3)^2=0 , but with an acknowledgement. \\begin{array}{lll} &\\left(x-3\\right)^3=0& \\cr \\color{green}{\\mbox{(Same roots)}}&x=3& \\cr \\end{array} Other functions The maxima function stack_disp_arg(ex, [showlogic, showdomain]) can be used to display a list of expressions ex in the same form as used in the input and answer tests. This is useful for displaying the teacher's worked solution in the general feedback. The second two arguments are optional. 1. The boolean variable showlogic determines whether the equivalence symbols are shown. For a worked solution you probably need to use the following: 2. The boolean variable showdomain determines whether the natural domains are shown. For a worked solution you probably need to use the function \\[ {@stack_disp_arg(ta)@} \\] Without the equivalence symbols you use \\[ {@stack_disp_arg(ta, false)@} \\] With the equivalence symbols but without natural domains you use \\[ {@stack_disp_arg(ta, true, false)@} \\] Finding a step in working It is relatively common to want students to take a \"particular step\" in their argument. That is to say, to expect a particular intermediate expression to appear explicitly in their list of answers. For example, imagine you want students to \"simplify\" \\log_5(25) to 2 . It is important to see evidence of the expression \\log_5(5^2) in their answer. The teacher's answer is, e.g. ta:[lg(25,5),stackeq(lg(5^2,5)),stackeq(2*lg(5,5)),stackeq(2*1),stackeq(2)] We want to accept sa1:[lg(25,5),stackeq(lg(5^2,5)),stackeq(2)] But reject sa0:[lg(25,5),stackeq(2)] Both of these are correct reasoning arguments, but the second is missing the desired step. To facilitate this search we provide the function stack_equiv_find_step(ex, exl) . This looks for expression ex in the list exl using ATEqualComAss . It returns the list of indices of the position. If you just want to know if the expression is missing use the predicate emptyp . Note, this function strips off stackeq before testing, so this function will find \\log_5(5^2) in both sa1 and sa2 below. sa2:[lg(25,5),lg(5^2,5),2] Longer term plans Define x\\neq a operator. Needed to exclude single numbers from the domain. Define x\\in X operator, for student use. Provide better tools for dealing with assessment, such as checking for particular steps. Provide better feedback to students about which steps they have taken and what goes wrong. In the long term, we may fully implement the ideas in the paper Sangwin, C.J. An Audited Elementary Algebra The Mathematical Gazette, July 2015. In the future students might also be expected to say what they are doing, e.g. ``add a to both sides\", as well as just do it. Quite how it does this, and the options available to the teacher is what is most likely to change. We would like to introduce the idea of a model answer . STACK will then establish the extent to which the student's answer follows this model solution.","title":"Reasoning by equivalence"},{"location":"en/CAS/Equivalence_reasoning/#reasoning-by-equivalence","text":"NOTE: Reasoning by equivalence was introduced in STACK 3.6. This area of STACK is still under active development, and features and behaviour may change significantly in future versions, subject to trials with students and feedback from colleagues. We currently provide support for basic single variable polynomials, very simple inequalities, simple simultaneous equations. There is no support for algebraic manipulations involving logarithms and trig functions although individual examples may work. Wider support is intended for future versions. A simple getting started with equivalence reasoning guide can be found elsewhere.","title":"Reasoning by equivalence"},{"location":"en/CAS/Equivalence_reasoning/#what-is-reasoning-by-equivalence-and-this-input-type","text":"Reasoning by equivalence is a particularly important activity in elementary algebra. It is an iterative formal symbolic procedure where algebraic expressions, or terms within an expression, are replaced by an equivalent until a \"solved\" form is reached. An example of solving a quadratic equation is shown below. \\begin{array}{cc} \\ & x^2-x=30 & \\\\ \\color{green}{\\Leftrightarrow} & x^2-x-30=0 & \\\\ \\color{green}{\\Leftrightarrow} & \\left(x-6\\right)\\cdot \\left(x+5\\right)=0 \\\\ \\color{green}{\\Leftrightarrow} & x-6=0\\lor x+5=0 \\\\ \\color{green}{\\Leftrightarrow} & x=6\\lor x=-5 \\end{array} The point is that replacing an expression or a sub-expression in a problem by an equivalent expression provides a new problem having the same solutions. This input type enables us to capture and evaluate student's line-by-line reasoning, i.e. their steps in working, during this kind of activity. Reasoning by equivalence is very common in elementary mathematics. It is either the entire task (such as when solving a quadratic) or it is an important part of a bigger problem. E.g. proving the induction step is often achieved by reasoning by equivalence.","title":"What is reasoning by equivalence and this input type?"},{"location":"en/CAS/Equivalence_reasoning/#how-do-students-use-this-input","text":"Instructions for students . In traditional practice students work line by line rewriting an equation until it is solved. This input type is designed to capture this kind of working and evaluate it based on the assumption that each line should be equivalent to the previous one. Instructions for students are here . Some common observations about this form of reasoning are Students often use no logical connectives between lines. Students ignore the natural domain of an expression, e.g. in \\frac{1}{x} the value x=0 is excluded from the domain of definition. Operations which do not result in equivalence are often used, e.g. squaring both sides of an equation. This input type mirrors current common practice and does not expect students to indicate either logic or domains. The input type itself will give students feedback on these issues. Note that students must use correct propositional logic connectives or and and . E.g. their answer must be something correct such as x=1 or x=2 , not something sloppy like x=1 or 2 or x=1,2 . It certainly can't be something wrong such as x=1 and x=2 which is often seen in written answers! Note that students may not take square roots of both sides of an equation. This will be rejected because it is not equivalent! Similarly, students may not cancel terms from both sides which may be zero. As we require equivalence, students may not multiply either. This will probably not correspond to students' expectations, and may take a bit of getting used to. But should students really use logical connectives? Yes, I (CJS) believe they should but to require this from the input type now would be too big a step for students and their teachers. Students are already being expected to use connectives such as and and or correctly. The input type uses these connectives and in the future options may be added to this input type which require students to be explicit about logical connectives, especially when we add support for implication in addition to equivalence. As we gain confidence in teaching with equivalence reasoning, we will add more options to this input type. If you have strong views on how this input type should behave, please contact the developers.","title":"How do students use this input?"},{"location":"en/CAS/Equivalence_reasoning/#validation-and-correctness","text":"STACK carefully separates out validation of a student's answer from the correctness . This idea is encapsulated in the separation of validation feedback via the tags [[validation]] which is tied to inputs, from the potential response trees which establish the mathematical properties. Each line of a student's answer must be a valid expression, just as with the algebraic input type. However, sets, lists and matrices are not permitted in this input type. The internal result is a list of expressions (equations or inequalities).","title":"Validation and correctness"},{"location":"en/CAS/Equivalence_reasoning/#example-use-cases-for-this-input-type","text":"Reasoning by equivalence is the entire task. The argument must be correct and the last line is the final answer. In a formative setting, we want immediate feedback on whether the argument consists of equivalent lines. This feedback can be given as the student types line by line, or at the end when they press \"check\". The ability to give feedback on the equivalence of adjacent lines as the student types their answer somewhat blurs the distinction between validation and correctness, but in a way which is probably very useful to students.","title":"Example use cases for this input type"},{"location":"en/CAS/Equivalence_reasoning/#notes-for-question-authors","text":"The position of the validation tags, e.g. [[validation:ans1]] are ignored for this input type. Validation feedback is always displayed next to the TextArea into which students type their answer. The teacher's answer and any syntax hint must be a list. If you just pass in an expression strange behaviour may result. The input type works very much like the TextArea input type. Internally, the student's lines are turned into a list. If you want to use the \"final answer\" then use code such as last(ans1) in your potential response tree. If students type in an expression rather than an equation, the system will assume they forgot to add =0 at the end and act accordingly. This is displayed to the student. If the student starts their line with an = sign, this is accepted. Teachers cannot use a prefix = . In a worked solution the teacher must use the prefix function stackeq . For example, ta:[(x-1)^2,stackeq(x^2-2*x+1)] Teachers must explicitly use the nounor and nounand commands, not the and and or logic. For more details see the section on simplification . For example, a worked solution might be ta:[p=0,(v-n1)*(v-n2)=0,v-n1=0 nounor v-n2=0,v=n1 nounor v=n2]","title":"Notes for question authors"},{"location":"en/CAS/Equivalence_reasoning/#input-type-options","text":"To enter options for this input use the \"extra options field\". Options should be a comma separated list of values only from the following list. hideequiv does not display whether each line is equivalent to the next at validation time. hidedomain does not display natural domain information. comments allows students to include comments in their answer. By default comments are not permitted as it breaks up the argument and stops automatic marking. firstline takes the first line of the teacher's answer and forces the student to have this as the first line of the student's answer. The test used is equality up to commutativity and associativity (EqualComAss answer test). assume_pos sets the value of Maxima's assume_pos variable to be true. If we assume_pos they any negative solutions will be ignored, whether or not they exist. So x=\\pm 2 will now be equivalent to x=2 . You might not want this equivalence. In particular, this also has the effect of condoning squaring or rooting both sides of an equation. For example x^4=2 will now be equivalent to x=2 (rather than x=2 \\vee x=-2 ). This is not the default, but is useful in situations where a student is rearranging an equation to a given subject, and all the variables are assumed to be positive. Note, this option is only for the input type. You will also need to set this in the question options to also affect the answer test. assume_real sets an internal flag to work over the real numbers. If true then x=1 will be considered equivalent to x^3=1 . Note, this option is only for the input type. You will also need to set this in the question options to also affect the answer test. calculus allows calculus operations in an argument. Note, this option is only for the input type. You will also need to set this in the answer test options to also affect the answer test. This is at a very early stage of development. For example, constants of integration are not currently checked by this currently. If the syntax hint is just the keyword firstline then the first line of the value of the teacher's answer will appear as a syntax hint. This enables a randomly generated syntax hint to appear in the box.","title":"Input type options"},{"location":"en/CAS/Equivalence_reasoning/#answer-tests","text":"There are a number of answer tests which seek to establish whether a student's list of expressions are all equivalent. In these tests there is no concept of \"step size\" or any test that a student has worked in a sensible order. The tests share code with the input type, and feedback from the test will be identical to that from the input when this is shown. You will also need to set options, as in the input type above, to get the answer tests to reflect the options set. The options supported are assume_pos , assume_real , and calculus .","title":"Answer tests"},{"location":"en/CAS/Equivalence_reasoning/#equivreasoning","text":"This test establishes that all the items in the list are equivalent, using algebraic equivalence.","title":"EquivReasoning"},{"location":"en/CAS/Equivalence_reasoning/#equivfirst","text":"This test establishes that all the items in the list are equivalent, using algebraic equivalence. Test that the first line of the student's answer is equivalent to the first line of the teacher's answer up to commutativity and associativity (using the answer test EqualComAss.) To test the last line of an argument is in the correct form will require a separate node in the potential response tree. To add this to the answer test gives too many possibilities.","title":"EquivFirst"},{"location":"en/CAS/Equivalence_reasoning/#natural-domains","text":"The equivalence reasoning input tracks natural domains of expressions. This is via the STACK's natural_domain(ex) function. Natural domains are shown to students in the validation feedback. \\begin{array}{lll} &\\frac{5\\,x}{2\\,x+1}-\\frac{3}{x+1}=1&{\\color{blue}{{x \\not\\in {\\left \\{-1 , -\\frac{1}{2} \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&5\\,x\\,\\left(x+1\\right)-3\\,\\left(2\\,x+1\\right)=\\left(x+1\\right)\\,\\left(2\\,x+1\\right)& \\end{array} At the moment STACK quietly condones silent domain enlargements such as in the above example.","title":"Natural domains"},{"location":"en/CAS/Equivalence_reasoning/#repeated-roots","text":"There is general ambiguity about how to express multiplicity of roots. If (x-1)^2=0 is not equivalent to x=1 then students need to indicate multiplicity of roots, but there appears to be no consensus on how this should be notated. The equation (x-3)^2 = 0 and the expression x=3 \\mbox{ or } x=3 are considered to be equivalent, because they have the same roots with the same multiplicity. The expressions x=3 \\mbox{ or } x=3 and x=3 have the same variety, but are not identical. This is, of course, slightly awkward since logical ``or'' is idempotent, and so x=3 \\mbox{ or } x=3 and x=3 would be equivalent at a symbolic level. For this reason, STACK accepts x=3 as equivalent to (x-3)^2=0 , but with an acknowledgement. \\begin{array}{lll} &\\left(x-3\\right)^3=0& \\cr \\color{green}{\\mbox{(Same roots)}}&x=3& \\cr \\end{array}","title":"Repeated roots"},{"location":"en/CAS/Equivalence_reasoning/#other-functions","text":"The maxima function stack_disp_arg(ex, [showlogic, showdomain]) can be used to display a list of expressions ex in the same form as used in the input and answer tests. This is useful for displaying the teacher's worked solution in the general feedback. The second two arguments are optional. 1. The boolean variable showlogic determines whether the equivalence symbols are shown. For a worked solution you probably need to use the following: 2. The boolean variable showdomain determines whether the natural domains are shown. For a worked solution you probably need to use the function \\[ {@stack_disp_arg(ta)@} \\] Without the equivalence symbols you use \\[ {@stack_disp_arg(ta, false)@} \\] With the equivalence symbols but without natural domains you use \\[ {@stack_disp_arg(ta, true, false)@} \\]","title":"Other functions"},{"location":"en/CAS/Equivalence_reasoning/#finding-a-step-in-working","text":"It is relatively common to want students to take a \"particular step\" in their argument. That is to say, to expect a particular intermediate expression to appear explicitly in their list of answers. For example, imagine you want students to \"simplify\" \\log_5(25) to 2 . It is important to see evidence of the expression \\log_5(5^2) in their answer. The teacher's answer is, e.g. ta:[lg(25,5),stackeq(lg(5^2,5)),stackeq(2*lg(5,5)),stackeq(2*1),stackeq(2)] We want to accept sa1:[lg(25,5),stackeq(lg(5^2,5)),stackeq(2)] But reject sa0:[lg(25,5),stackeq(2)] Both of these are correct reasoning arguments, but the second is missing the desired step. To facilitate this search we provide the function stack_equiv_find_step(ex, exl) . This looks for expression ex in the list exl using ATEqualComAss . It returns the list of indices of the position. If you just want to know if the expression is missing use the predicate emptyp . Note, this function strips off stackeq before testing, so this function will find \\log_5(5^2) in both sa1 and sa2 below. sa2:[lg(25,5),lg(5^2,5),2]","title":"Finding a step in working"},{"location":"en/CAS/Equivalence_reasoning/#longer-term-plans","text":"Define x\\neq a operator. Needed to exclude single numbers from the domain. Define x\\in X operator, for student use. Provide better tools for dealing with assessment, such as checking for particular steps. Provide better feedback to students about which steps they have taken and what goes wrong. In the long term, we may fully implement the ideas in the paper Sangwin, C.J. An Audited Elementary Algebra The Mathematical Gazette, July 2015. In the future students might also be expected to say what they are doing, e.g. ``add a to both sides\", as well as just do it. Quite how it does this, and the options available to the teacher is what is most likely to change. We would like to introduce the idea of a model answer . STACK will then establish the extent to which the student's answer follows this model solution.","title":"Longer term plans"},{"location":"en/CAS/Greek/","text":"The Greek Alphabet Greek letters are transliterated using their English names. I.e. [alpha,beta,gamma,delta,epsilon,zeta,eta,theta,iota,kappa,lambda,mu,nu,xi,omicron,pi,rho,sigma,tau,upsilon,phi,chi,psi,omega] Upper case Greek letters have an upper-case English first letter. I.e. [Alpha,Beta,Gamma,Delta,Epsilon,Zeta,Eta,Theta,Iota,Kappa,Lambda,Mu,Nu,Xi,Omicron,Pi,Rho,Sigma,Tau,Upsilon,Phi,Chi,Psi,Omega] Many of the Greek letters already have a meaning in Maxima. beta : The beta function is defined as \\gamma(a) \\gamma(b)/\\gamma(a+b) . gamma : The gamma function. delta : This is the Dirac Delta function (only defined in Laplace). zeta : This is the Riemann zeta function. lambda : Defines and returns a lambda expression, i.e. an unnamed function. psi : The derivative of 'log (gamma ( ))' of order ' +1', which has a strange syntax psi[n](x) . It is also defined in the tensor package. Note that by default, psi requires arguments and any attempt to use this variable name without arguments will result in an error. For this reason we delete this function in STACK, and psi becomes an unnamed variable. The following are given a specific value by STACK. pi is defined to be the numeric constant which is the ratio of the diameter to the circumference of a circle. In Maxima this is normally %pi , but STACK also defines the letter pi to have this value. In Maxima the numeric constant which represents the so-called golden mean, (1 + \\sqrt{5})/2 is %phi . \"Undefine\" Maxima defaults It is currently not possible to \"undefine\" function names and return them to variables.","title":"The Greek Alphabet"},{"location":"en/CAS/Greek/#the-greek-alphabet","text":"Greek letters are transliterated using their English names. I.e. [alpha,beta,gamma,delta,epsilon,zeta,eta,theta,iota,kappa,lambda,mu,nu,xi,omicron,pi,rho,sigma,tau,upsilon,phi,chi,psi,omega] Upper case Greek letters have an upper-case English first letter. I.e. [Alpha,Beta,Gamma,Delta,Epsilon,Zeta,Eta,Theta,Iota,Kappa,Lambda,Mu,Nu,Xi,Omicron,Pi,Rho,Sigma,Tau,Upsilon,Phi,Chi,Psi,Omega] Many of the Greek letters already have a meaning in Maxima. beta : The beta function is defined as \\gamma(a) \\gamma(b)/\\gamma(a+b) . gamma : The gamma function. delta : This is the Dirac Delta function (only defined in Laplace). zeta : This is the Riemann zeta function. lambda : Defines and returns a lambda expression, i.e. an unnamed function. psi : The derivative of 'log (gamma ( ))' of order ' +1', which has a strange syntax psi[n](x) . It is also defined in the tensor package. Note that by default, psi requires arguments and any attempt to use this variable name without arguments will result in an error. For this reason we delete this function in STACK, and psi becomes an unnamed variable. The following are given a specific value by STACK. pi is defined to be the numeric constant which is the ratio of the diameter to the circumference of a circle. In Maxima this is normally %pi , but STACK also defines the letter pi to have this value. In Maxima the numeric constant which represents the so-called golden mean, (1 + \\sqrt{5})/2 is %phi .","title":"The Greek Alphabet"},{"location":"en/CAS/Greek/#undefine-maxima-defaults","text":"It is currently not possible to \"undefine\" function names and return them to variables.","title":"\"Undefine\" Maxima defaults"},{"location":"en/CAS/Inequalities/","text":"Inequalities The non-strict inequalities \\geq and \\leq are created as infix operators with the respective syntax >=, <= Maxima allows single inequalities, such as x-1>y , and also support for inequalities connected by logical operators, e.g. x>1 \\mbox{ and } x<=5 . You can test if two inequalities are the same using the algebraic equivalence test, see the comments on this below. Chained inequalities, for example 1\\leq x \\leq2\\mbox{,} are not permitted. They must be joined by logical connectives, e.g. \" x>1 and x<7 \". From version 3.6, support for inequalities in Maxima (particularly single variable real inequalities) was substantially improved. Functions to support inequalities ineqprepare(ex) This function ensures an inequality is written in the form ex>0 or ex>=0 where ex is always simplified. This is designed for use with the algebraic equivalence answer test in mind. ineqorder(ex) This function takes an expression, applies ineqprepare() , and then orders the parts. For example, ineqorder(x>1 and x<5); returns 5-x > 0 and x-1 > 0 It also removes duplicate inequalities. Operating at this syntactic level will enable a relatively strict form of equivalence to be established, simply manipulating the form of the inequalities. It will respect commutativity and associativity and and and or , and will also apply not to chains of inequalities. If the algebraic equivalence test detects inequalities, or systems of inequalities, then this function is automatically applied. make_less_ineq(ex) Reverses the order of any inequalities so that we have A<B or A<=B . It does no other transformations. This is useful because when testing equality up to commutativity and associativity we don't perform this transformation. We need to put all inequalities a particular way around. See the EqualComAss test examples for usage. See also Maxima reference topics","title":"Inequalities"},{"location":"en/CAS/Inequalities/#inequalities","text":"The non-strict inequalities \\geq and \\leq are created as infix operators with the respective syntax >=, <= Maxima allows single inequalities, such as x-1>y , and also support for inequalities connected by logical operators, e.g. x>1 \\mbox{ and } x<=5 . You can test if two inequalities are the same using the algebraic equivalence test, see the comments on this below. Chained inequalities, for example 1\\leq x \\leq2\\mbox{,} are not permitted. They must be joined by logical connectives, e.g. \" x>1 and x<7 \". From version 3.6, support for inequalities in Maxima (particularly single variable real inequalities) was substantially improved.","title":"Inequalities"},{"location":"en/CAS/Inequalities/#functions-to-support-inequalities","text":"ineqprepare(ex) This function ensures an inequality is written in the form ex>0 or ex>=0 where ex is always simplified. This is designed for use with the algebraic equivalence answer test in mind. ineqorder(ex) This function takes an expression, applies ineqprepare() , and then orders the parts. For example, ineqorder(x>1 and x<5); returns 5-x > 0 and x-1 > 0 It also removes duplicate inequalities. Operating at this syntactic level will enable a relatively strict form of equivalence to be established, simply manipulating the form of the inequalities. It will respect commutativity and associativity and and and or , and will also apply not to chains of inequalities. If the algebraic equivalence test detects inequalities, or systems of inequalities, then this function is automatically applied. make_less_ineq(ex) Reverses the order of any inequalities so that we have A<B or A<=B . It does no other transformations. This is useful because when testing equality up to commutativity and associativity we don't perform this transformation. We need to put all inequalities a particular way around. See the EqualComAss test examples for usage.","title":"Functions to support inequalities"},{"location":"en/CAS/Inequalities/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Linear_algebra/","text":"Setting linear algebra questions in STACK Linear algebra, next to calculus, is one of the pillars of modern mathematics and an important application in STACK is testing linear algebra questions. Often there will be many equivalent answers, especially when asking for students to find the basis for a subspace, etc. This document provides some tips and hints for writing STACK questions. Please see also the file on matrix manipulations . Random questions The paper Setting linear algebra problems by John Steele (2003) is very useful. Lines and planes Problem: the student has been asked to represent a subspace in parametric form; we want to decide if these spaces are equivalent. Converting from parametric form to vector form Let us start with an answer such as ta:transpose(matrix([s+2*t,3+t,w])); ta:expand(ta); lv:listofvars(ta); /* Sanity check: make sure the student's answer is linear in its parameters. */ deg:apply(max, maplist(lambda([ex], hipow(ta, ex)), lv)); The first thing is to note Maxima's cm:coefmatrix(flatten(args(ta)), lv); am:augcoefmatrix(flatten(args(ta)), lv); We will turn this into vector form explicitly as follows. /* Remove any constant vectors (setting all parameters to zero). */ cv:ev(ta, maplist(lambda([ex], ex=0), lv), simp); /* Calculate the direction vectors. */ dvs:maplist(lambda([ex], col(cm,ex)), makelist(k,k,1,length(lv))); /* Create vector form. */ simp:false; vf:apply(\"+\", zip_with(\"*\", lv, dvs))+cv; Note, this last line assumes simp:false (otherwise we simplify back to the original ta !), and uses STACK's zip_with function which is not a core part of Maxima. Now we have the direction vectors we can answer a number of questions. Turn the direction vectors into a single matrix. simp:true; cm:transpose(apply(matrix, maplist(lambda([ex], first(transpose(ex))), dvs))); /* Takes us back to ta.... */ cm.transpose(matrix(lv))+cv; Does ta pass through the origin? This amounts to solving solve(flatten(args(ta)), lv); But, solve can throw errors when we have dependent equations (as we might well do...). Solving systems of linear equations Using solve can throw errors, so use linsolve instead. For example. /* Decide if a vector is in W */ point_in_space(W, wx):= linsolve(flatten(args(W))-first(args(transpose(wx))), listofvars(W)); If the above is the empty list, there is no solution. Otherwise a solution is returned. /* Calculate the canonical form of a column space of a system. */ cspace(ex):= block([M], M: coefmatrix(flatten(args(ex)), listofvars(ex)), ev(transpose(rref(transpose(M))), simp) );","title":"Setting linear algebra questions in STACK"},{"location":"en/CAS/Linear_algebra/#setting-linear-algebra-questions-in-stack","text":"Linear algebra, next to calculus, is one of the pillars of modern mathematics and an important application in STACK is testing linear algebra questions. Often there will be many equivalent answers, especially when asking for students to find the basis for a subspace, etc. This document provides some tips and hints for writing STACK questions. Please see also the file on matrix manipulations .","title":"Setting linear algebra questions in STACK"},{"location":"en/CAS/Linear_algebra/#random-questions","text":"The paper Setting linear algebra problems by John Steele (2003) is very useful.","title":"Random questions"},{"location":"en/CAS/Linear_algebra/#lines-and-planes","text":"Problem: the student has been asked to represent a subspace in parametric form; we want to decide if these spaces are equivalent.","title":"Lines and planes"},{"location":"en/CAS/Linear_algebra/#converting-from-parametric-form-to-vector-form","text":"Let us start with an answer such as ta:transpose(matrix([s+2*t,3+t,w])); ta:expand(ta); lv:listofvars(ta); /* Sanity check: make sure the student's answer is linear in its parameters. */ deg:apply(max, maplist(lambda([ex], hipow(ta, ex)), lv)); The first thing is to note Maxima's cm:coefmatrix(flatten(args(ta)), lv); am:augcoefmatrix(flatten(args(ta)), lv); We will turn this into vector form explicitly as follows. /* Remove any constant vectors (setting all parameters to zero). */ cv:ev(ta, maplist(lambda([ex], ex=0), lv), simp); /* Calculate the direction vectors. */ dvs:maplist(lambda([ex], col(cm,ex)), makelist(k,k,1,length(lv))); /* Create vector form. */ simp:false; vf:apply(\"+\", zip_with(\"*\", lv, dvs))+cv; Note, this last line assumes simp:false (otherwise we simplify back to the original ta !), and uses STACK's zip_with function which is not a core part of Maxima. Now we have the direction vectors we can answer a number of questions. Turn the direction vectors into a single matrix. simp:true; cm:transpose(apply(matrix, maplist(lambda([ex], first(transpose(ex))), dvs))); /* Takes us back to ta.... */ cm.transpose(matrix(lv))+cv; Does ta pass through the origin? This amounts to solving solve(flatten(args(ta)), lv); But, solve can throw errors when we have dependent equations (as we might well do...).","title":"Converting from parametric form to vector form"},{"location":"en/CAS/Linear_algebra/#solving-systems-of-linear-equations","text":"Using solve can throw errors, so use linsolve instead. For example. /* Decide if a vector is in W */ point_in_space(W, wx):= linsolve(flatten(args(W))-first(args(transpose(wx))), listofvars(W)); If the above is the empty list, there is no solution. Otherwise a solution is returned. /* Calculate the canonical form of a column space of a system. */ cspace(ex):= block([M], M: coefmatrix(flatten(args(ex)), listofvars(ex)), ev(transpose(rref(transpose(M))), simp) );","title":"Solving systems of linear equations"},{"location":"en/CAS/Matrix/","text":"Matrices and vectors in STACK Please see also the file on linear algebra and STACK questions. Matrices Note that in Maxima, the operator . represents noncommutative multiplication and scalar product. The star A*B gives element-wise multiplication. The paper Setting Linear Algebra Problems is rather interesting. The following functions are part of Maxima, but are very useful for us. rowswap(m,i,j) rowadd(m,i,j,k) Where m[i]: m[i] + k * m[j] . rowmul(m,i,k) Where m[i]: k * m[i] . And a function to compute reduced row echelon form rref(m) Assigning individual elements To assign values to individual elements, use the simple syntax such as the following. m:matrix([1,1],[1,2]) m[1,2]:3 Note also Maxima's setelmx function: setelmx (<x>, <i>, <j>, <M>) Assigns <x> to the (<i>, <j>) 'th element of the matrix <M> , and returns the altered matrix. <M> [<i>, <j>]: <x> has the same effect, but returns <x> instead of <M> . Showing working It is quite common to want to show part of a matrix calculation \"un-evaluated\". For example, the following is typical. \\left[\\begin{array}{cc} 1 & 2 \\\\ 4 & 5 \\\\ \\end{array}\\right] + \\left[\\begin{array}{cc} 1 & -1 \\\\ 1 & 2 \\\\ \\end{array}\\right] = \\left[\\begin{array}{cc} 1+1 & 2-1 \\\\ 4+1 & 5+2 \\\\ \\end{array}\\right] = \\left[\\begin{array}{cc} 2 & 1 \\\\ 5 & 7 \\\\ \\end{array}\\right] . This is achieved, by having a question in which simplification is off, and we define the question variables as follows. A:matrix([1,2],[4,5]); B:matrix([1,-1],[1,2]); C:apply(matrix,zip_with(lambda([l1,l2],zip_with(\"+\",l1,l2)),args(A),args(B))); D:ev(C,simp); Notice the use of zip_with which is not a core Maxima function, but is defined by STACK. The above equation is then generated by the CASText \\[ {@A@}+{@B@}={@C@}={@D@}.\\] A similar procedure is needed for showing working when multiplying matrices. Here we need to loop over the matrices, for square matrices we use the following. A:ev(rand(matrix([5,5],[5,5]))+matrix([2,2],[2,2]),simp); B:ev(rand(matrix([5,5],[5,5]))+matrix([2,2],[2,2]),simp); BT:transpose(B); C:zeromatrix (first(matrix_size(A)), second(matrix_size(A))); S:for a:1 thru first(matrix_size(A)) do for b:1 thru second(matrix_size(A)) do C[ev(a,simp),ev(b,simp)]:apply(\"+\",zip_with(\"*\",A[ev(a,simp)],BT[ev(b,simp)])); D:ev(C,simp); Notice we need to simplify the arguments before we take indices of expressions. This is one problem with simp:false . For non-square matrices we can use this. A:ev(rand(matrix([5,5,5],[5,5,5]))+matrix([2,2,2],[2,2,2]),simp); B:transpose(ev(rand(matrix([5,5,5],[5,5,5]))+matrix([2,2,2],[2,2,2]),simp)); TA:ev(A.B,simp); BT:transpose(B); C:zeromatrix (first(matrix_size(A)), second(matrix_size(B))); S:for a:1 thru first(matrix_size(A)) do for b:1 thru second(matrix_size(B)) do C[ev(a,simp),ev(b,simp)]:apply(\"+\",zip_with(\"*\",A[ev(a,simp)],BT[ev(b,simp)])); D:ev(C,simp); Now it makes no sense to include the point wise multiplication of elements as a possible wrong answer. There must be a more elegant way to do this! Display of matrices You can set the type of parentheses used to surround matrices in a number of ways. Firstly, the admin user should set the site default in the qtype_stack options page. For an individual question, the teacher can set the variable lmxchar:\"(\"; in any of the usual places, e.g. in the question variables. To set the display of an individual matrix, m say, in CASText you can use {@(lmxchar:\"|\", m)@} Since lmxchar is a global setting in Maxima, you will have to set it back when you next display a matrix. Not ideal, but there we are. Note, STACK only displays matrices with matching parentheses. If you want something like f(x) = \\left\\{ \\begin{array}{cc} 1, & x<0 \\\\ 0, & x\\geq 0 \\end{array}\\right. then you will have to display the matrix without parentheses and sort out the mismatching parentheses in the CASText at the level of display. Vectors If you are trying to use the vector notation such as 3i+4j you will probably want to redefine i to be an abstract symbol, not a complex number. More information on this is given under Numbers . Another way to do this is to create matrices as follows: ordergreat(i,j,k); p:matrix([-7],[2],[-3]); q:matrix([i],[j],[k]); Now we can use the dot product to create the vector. The STACK function texboldatoms wraps all atomic variable names in the ephemeral function stackvector , which is typeset in bold. v:texboldatoms(dotproduct(p,q)); If you turn the option \"Multiplication sign\" to none, this should display as -7\\,{\\bf{i}}+2\\,{\\bf{j}}-3\\,{\\bf{k}} Notice the use of the function ordergreat . ordergreat can only be used once at the beginning of the question. The vector stackvector(a) and the atom a are different, and are not considered algebraically equivalent. While students may type in stackvector(a) as an answer, they are likely to type in a . The teacher can either (1) add in stackvector ephemeral forms to the student's answer in the feedback variables using texboldatoms or 92) remove all stackvector forms from the teacher's answer by using the destackvector(ex) function on their answer. In the future we may have an option in the input to apply texboldatoms to student's expressions. The display of the ephemeral form of stackvector is controlled by the function stackvectortex , e.g. you can display vectors differently using the following examples. stackvectortex(ex):= block(sconcat(\"{\\\\bf \\\\vec{\", tex1(first(args(ex))), \"}}\")); stackvectortex(ex):= block(sconcat(\"{\\\\bf \\\\underline{\", tex1(first(args(ex))), \"}}\")); which should go in the question variables. Note, in future this may become a question level option. Vector cross product The wedge product operator is denoted by the tilde ~ . This is the itensor package. This package is not normally loaded by STACK, and in any case the package takes lists and not matrices. For convenience, the following function has been added which requires 3*1 matrices. crossproduct(a,b); Another advantage of this function is the ability to return an un-simplified version with simp:false . Student input Students do find typing in matrices very tedious. Some teachers have asked for a convenient notation such as c(1,2,3) for column vectors and v(1,2,3,4) For row vectors. This is not a core part of STACK currently, but in individual questions you can convert such notation easily into mainstream Maxima using code such as the following. ta1:c(1,2,3); ta2:v(1,2,3); vec_convert(sa) := if op(sa)=c then transpose(matrix(args(sa))) elseif op(sa)=v then matrix(args(sa)); vec_convert(ta1); vec_convert(ta2); Once converted into Matrices, the student's answer will be evaluated by PRTs as matrices. Of course, this will not be reflected in the valuation. If there is sufficient demand for this contact the developers. See also Maxima reference topics","title":"Matrices and vectors in STACK"},{"location":"en/CAS/Matrix/#matrices-and-vectors-in-stack","text":"Please see also the file on linear algebra and STACK questions.","title":"Matrices and vectors in STACK"},{"location":"en/CAS/Matrix/#matrices","text":"Note that in Maxima, the operator . represents noncommutative multiplication and scalar product. The star A*B gives element-wise multiplication. The paper Setting Linear Algebra Problems is rather interesting. The following functions are part of Maxima, but are very useful for us. rowswap(m,i,j) rowadd(m,i,j,k) Where m[i]: m[i] + k * m[j] . rowmul(m,i,k) Where m[i]: k * m[i] . And a function to compute reduced row echelon form rref(m)","title":"Matrices"},{"location":"en/CAS/Matrix/#assigning-individual-elements","text":"To assign values to individual elements, use the simple syntax such as the following. m:matrix([1,1],[1,2]) m[1,2]:3 Note also Maxima's setelmx function: setelmx (<x>, <i>, <j>, <M>) Assigns <x> to the (<i>, <j>) 'th element of the matrix <M> , and returns the altered matrix. <M> [<i>, <j>]: <x> has the same effect, but returns <x> instead of <M> .","title":"Assigning individual elements"},{"location":"en/CAS/Matrix/#Showing_working","text":"It is quite common to want to show part of a matrix calculation \"un-evaluated\". For example, the following is typical. \\left[\\begin{array}{cc} 1 & 2 \\\\ 4 & 5 \\\\ \\end{array}\\right] + \\left[\\begin{array}{cc} 1 & -1 \\\\ 1 & 2 \\\\ \\end{array}\\right] = \\left[\\begin{array}{cc} 1+1 & 2-1 \\\\ 4+1 & 5+2 \\\\ \\end{array}\\right] = \\left[\\begin{array}{cc} 2 & 1 \\\\ 5 & 7 \\\\ \\end{array}\\right] . This is achieved, by having a question in which simplification is off, and we define the question variables as follows. A:matrix([1,2],[4,5]); B:matrix([1,-1],[1,2]); C:apply(matrix,zip_with(lambda([l1,l2],zip_with(\"+\",l1,l2)),args(A),args(B))); D:ev(C,simp); Notice the use of zip_with which is not a core Maxima function, but is defined by STACK. The above equation is then generated by the CASText \\[ {@A@}+{@B@}={@C@}={@D@}.\\] A similar procedure is needed for showing working when multiplying matrices. Here we need to loop over the matrices, for square matrices we use the following. A:ev(rand(matrix([5,5],[5,5]))+matrix([2,2],[2,2]),simp); B:ev(rand(matrix([5,5],[5,5]))+matrix([2,2],[2,2]),simp); BT:transpose(B); C:zeromatrix (first(matrix_size(A)), second(matrix_size(A))); S:for a:1 thru first(matrix_size(A)) do for b:1 thru second(matrix_size(A)) do C[ev(a,simp),ev(b,simp)]:apply(\"+\",zip_with(\"*\",A[ev(a,simp)],BT[ev(b,simp)])); D:ev(C,simp); Notice we need to simplify the arguments before we take indices of expressions. This is one problem with simp:false . For non-square matrices we can use this. A:ev(rand(matrix([5,5,5],[5,5,5]))+matrix([2,2,2],[2,2,2]),simp); B:transpose(ev(rand(matrix([5,5,5],[5,5,5]))+matrix([2,2,2],[2,2,2]),simp)); TA:ev(A.B,simp); BT:transpose(B); C:zeromatrix (first(matrix_size(A)), second(matrix_size(B))); S:for a:1 thru first(matrix_size(A)) do for b:1 thru second(matrix_size(B)) do C[ev(a,simp),ev(b,simp)]:apply(\"+\",zip_with(\"*\",A[ev(a,simp)],BT[ev(b,simp)])); D:ev(C,simp); Now it makes no sense to include the point wise multiplication of elements as a possible wrong answer. There must be a more elegant way to do this!","title":"Showing working"},{"location":"en/CAS/Matrix/#matrixparens","text":"You can set the type of parentheses used to surround matrices in a number of ways. Firstly, the admin user should set the site default in the qtype_stack options page. For an individual question, the teacher can set the variable lmxchar:\"(\"; in any of the usual places, e.g. in the question variables. To set the display of an individual matrix, m say, in CASText you can use {@(lmxchar:\"|\", m)@} Since lmxchar is a global setting in Maxima, you will have to set it back when you next display a matrix. Not ideal, but there we are. Note, STACK only displays matrices with matching parentheses. If you want something like f(x) = \\left\\{ \\begin{array}{cc} 1, & x<0 \\\\ 0, & x\\geq 0 \\end{array}\\right. then you will have to display the matrix without parentheses and sort out the mismatching parentheses in the CASText at the level of display.","title":"Display of matrices"},{"location":"en/CAS/Matrix/#vectors","text":"If you are trying to use the vector notation such as 3i+4j you will probably want to redefine i to be an abstract symbol, not a complex number. More information on this is given under Numbers . Another way to do this is to create matrices as follows: ordergreat(i,j,k); p:matrix([-7],[2],[-3]); q:matrix([i],[j],[k]); Now we can use the dot product to create the vector. The STACK function texboldatoms wraps all atomic variable names in the ephemeral function stackvector , which is typeset in bold. v:texboldatoms(dotproduct(p,q)); If you turn the option \"Multiplication sign\" to none, this should display as -7\\,{\\bf{i}}+2\\,{\\bf{j}}-3\\,{\\bf{k}} Notice the use of the function ordergreat . ordergreat can only be used once at the beginning of the question. The vector stackvector(a) and the atom a are different, and are not considered algebraically equivalent. While students may type in stackvector(a) as an answer, they are likely to type in a . The teacher can either (1) add in stackvector ephemeral forms to the student's answer in the feedback variables using texboldatoms or 92) remove all stackvector forms from the teacher's answer by using the destackvector(ex) function on their answer. In the future we may have an option in the input to apply texboldatoms to student's expressions. The display of the ephemeral form of stackvector is controlled by the function stackvectortex , e.g. you can display vectors differently using the following examples. stackvectortex(ex):= block(sconcat(\"{\\\\bf \\\\vec{\", tex1(first(args(ex))), \"}}\")); stackvectortex(ex):= block(sconcat(\"{\\\\bf \\\\underline{\", tex1(first(args(ex))), \"}}\")); which should go in the question variables. Note, in future this may become a question level option.","title":"Vectors"},{"location":"en/CAS/Matrix/#vector-cross-product","text":"The wedge product operator is denoted by the tilde ~ . This is the itensor package. This package is not normally loaded by STACK, and in any case the package takes lists and not matrices. For convenience, the following function has been added which requires 3*1 matrices. crossproduct(a,b); Another advantage of this function is the ability to return an un-simplified version with simp:false .","title":"Vector cross product"},{"location":"en/CAS/Matrix/#student-input","text":"Students do find typing in matrices very tedious. Some teachers have asked for a convenient notation such as c(1,2,3) for column vectors and v(1,2,3,4) For row vectors. This is not a core part of STACK currently, but in individual questions you can convert such notation easily into mainstream Maxima using code such as the following. ta1:c(1,2,3); ta2:v(1,2,3); vec_convert(sa) := if op(sa)=c then transpose(matrix(args(sa))) elseif op(sa)=v then matrix(args(sa)); vec_convert(ta1); vec_convert(ta2); Once converted into Matrices, the student's answer will be evaluated by PRTs as matrices. Of course, this will not be reflected in the valuation. If there is sufficient demand for this contact the developers.","title":"Student input"},{"location":"en/CAS/Matrix/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Maxima/","text":"Introduction to Maxima for STACK users Maxima is a system for the manipulation of symbolic and numerical expressions, including differentiation, integration, Taylor series, Laplace transforms, ordinary differential equations, systems of linear equations, polynomials, sets, lists, vectors, matrices, and tensors. To write more than very simple questions you will need to use some Maxima commands. This documentation does not provide a detailed tutorial on Maxima. A very good introduction is given in Minimal Maxima , which this document assumes you have read. STACK then modifies Maxima in a number of ways. Types of object Maxima is a very weakly typed language. However, in STACK we need the following \"types\" of expression: equations, i.e. an expression in which the top operation is an equality sign; inequalities, for example x<1\\mbox{, or }x\\leq 1 ; sets, for example, \\{1,2,3\\} ; lists, for example, [1,2,3] . In Maxima ordered lists are entered using square brackets, for example as p:[1,1,2,x^2] . An element is accessed using the syntax p[1] . matrices . The basic syntax for a matrix is p:matrix([1,2],[3,4]) . Each row is a list. Elements are accessed as p[1,2] , etc. logical expression. This is a tree of other expressions connected by the logical and and or . This is useful for expressing solutions to equations, such as x=1 or x=2 . Note, the support for these expressions is unique to STACK. expressions. Expressions come last, since they are just counted as being not the others! STACK defines predicate functions to test for each of these types. Numbers Numbers are important in assessment, and there is more specific and detailed documentation on how numbers are treated: Numbers in STACK . Alias STACK defines the following function alias names simplify := fullratsimp int := integrate The absolute value function in Maxima is entered as abs() . STACK also permits you to enter using | symbols, i.e. |x| . This is an alias for abs . Note that abs(x) will be displayed by STACK as |x| . STACK also redefined a small number of functions The plot command plot2d is not used in STACK questions. Use plot instead, which is documented here . This ensures your image files are available on the server. The random number command random is not used in STACK questions. Use the command rand instead, which is documented here . This ensures pseudorandom numbers are generated and a student gets the same version each time they login. Parts of Maxima expressions op(x) - the top operator It is often very useful to take apart a Maxima expression. To help with this Maxima has a number of commands, including op(ex) , args(ex) and part(ex,n) . Maxima has specific documentation on this. In particular, op(ex) returns the main operator of the expression ex . This command has some problems for STACK. calling op(ex) on an atom (see Maxima's documentation on the predicate atom(ex) ) such as numbers or variable names, cause op(ex) to throw an error. op(ex) sometimes returns a string, sometimes not. the unary minus causes problems. E.g. in -1/(1+x) the operation is not \"/\", as you might expect, but it is \"-\" instead! To overcome these problems STACK has a command safe_op(ex) This always returns a string. For an atom this is empty, i.e. \"\" . It also sorts out some unary minus problems. get_ops(ex) - all operators This function returns a set of all operators in an expression. Useful if you want to find if multiplication is used anywhere in an expression. Maxima commands defined by STACK It is very useful when authoring questions to be able to test out Maxima code in the same environment which STACK uses Maxima. That is to say, with the settings and STACK specific functions loaded. To do this see STACK-Maxima sandbox . STACK creates a range of additional functions and restricts those available, many of which are described within this documentation. See also Predicate functions . Command Description factorlist(ex) Returns a list of factors of ex without multiplicities. zip_with(f,a,b) This function applies the binary function f to two lists a and b returning a list. An example is given in adding matrices to show working . coeff_list(ex,v) This function takes an expression ex and returns a list of coefficients of v . coeff_list_nz(ex,v) This function takes an expression ex and returns a list of nonzero coefficients of v . divthru(ex) Takes an algebraic fraction, e.g. (x^4-1)/(x+2) and divides through by the denominator, to leave a polynomial and a proper fraction. Useful in feedback, or steps of a calculation. stack_strip_percent(ex,var) Removes any variable beginning with the % character from ex and replace them with variables from var . Useful for use with solve, ode2 etc. Solve and ode2 . exdowncase(ex) Takes the expression ex and substitutes all variables for their lower case version (cf sdowncase(ex) in Maxima). This is very useful if you don't care if a student uses the wrong case, just apply this function to their answer before using an answer test . Note, of course, that exdowncase(X)-x=0. stack_reset_vars Resets constants, e.g. i , as abstract symbols, see Numbers . safe_op(ex) Returns the operation of the expression as a string. Atoms return an empty string (rather than throwing an error as does op ). comp_square(ex,v) Returns a quadratic ex in the variable v in completed square form. degree(ex,v) Returns the degree of the expanded form of ex in the variable v . See also Maxima's hipow command. unary_minus_sort(ex) Tidies up the way unary minus is represented within expressions when simp:false . See also simplification . texboldatoms(ex) Displays all non-numeric atoms in bold. Useful for vector questions. exdowncase(ex) This function makes a substitution of all variables for their lower case equivalents. Assignment In Maxima the assignment of a value to a variable is very unusual . Input Result a:1 Assignment of the value 1 to a . a=1 An equation, yet to be solved. f(x):=x^2 Definition of a function. In STACK simple assignments are of the more conventional form key : value , for example, n : rand(3)+2; p : (x-1)^n; Of course, these assignments can make use of Maxima's functions to manipulate expressions. p : expand( (x-3)*(x-4) ); Another common task is that of substitution . This can be performed with Maxima's subst command. This is quite useful, for example if we define p as follows, in the then we can use this in response processing to determine if the student's answer is odd. p : ans1 + subst(-x,x,ans1); All sorts of properties can be checked for in this way. For example, interpolates. Another example is a stationary point of f(x) at x=a , which can be checked for using p : subst(a,x,diff(ans1,x)); Here we have assumed a is some point given to the student, ans1 is the answer and that p will be used in the response processing tree. You can use Maxima's looping structures within Question variables, although the syntax requires this to be of the form key = value . In this case, the key will be assigned the value DONE at the end of the process, unless another value is returned. For example n : 1; dum1 : for a:-3 thru 26 step 7 do n:n+a; Note, you must use Maxima's syntax a:-3 here for assignment of -3 to the variable a . The assignment to the dummy variable dum1 is to ensure every command is of the form key : value . Please look at Maxima's documentation for the command do . It is also possible to define functions within the Question Variables for use within a question. This is not recommended, and has not been widely tested. For example dum1 : f(x) := x^2; n : f(4); Logarithms STACK loads the contributed Maxima package log10 . This defines logarithms to base 10 automatically. STACK also creates two aliases ln is an alias for \\log , which are natural logarithms lg is an alias for \\log_{10} , which are logarithms to base 10 . It is not possible to redefine the command log to be to the base 10 . Sets, lists, sequences, n-tuples It is very useful to be able to display expressions such as comma separated lists, and n-tuples 1,2,3,4,\\cdots (1,2,3,4) Maxima has in-built functions for lists, which are displayed with square brackets [1,2,3,4] , and sets with curly braces \\{1,2,3,4\\} . Maxima has no default functions for n-tuples or for sequences. STACK provides an inert function sequence . All this does is display its arguments without brackets. For example sequence(1,2,3,4) is displayed 1,2,3,4 . STACK provides convenience functions. sequenceify , creates a sequence from the arguments of the expression. This turns lists, sets etc. into a sequence. sequencep is a predicate to decide if the expression is a sequence. STACK provides an inert function ntuple . All this does is display its arguments with round brackets. For example ntuple(1,2,3,4) is displayed (1,2,3,4) . ntupleify and ntuplep construct and test for ntuples. The atom dotdotdot is displayed using the tex \\ldots which looks like \\ldots . This atom cannot be entered by students. If you want to use these functions, then you can create question variables as follows L1:[a,b,c,d]; D1:apply(ntuple, L1); L2:args(D1); D2:sequenceify(L2); Then L1 is a list and is displayed with square brackets as normal. D1 has operator ntuple and so is displayed with round brackets. L2 has operator list and is displayed with square brackets. Lastly, D2 is an sequence and is displayed without brackets. You can, of course, apply these functions directly. T1:ntuple(a,b,c); S1:sequence(a,b,c,dotdotdot); If you want to use sequence or ntuple in a PRT comparison, you probably want to turn them back into lists. E.g. ntuple(1,2,3) is not algebraically equivalent to [1,2,3] . To do this use the args function. We may, in the future, give more active meaning to the data types of sequence and ntuple . Matrices have options to control the display of the braces. Matrices are displayed without commas. If you are interacting with javascript do not use sequenceify . If you are interacting with javascript, such ss JSXGraph , then you may want to output a list of values without all the LaTeX and without Maxima's normal bracket symbols. You can use stack_disp_comma_separate([a,b,sin(pi)]); This function turns a list into a string representation of its arguments, without braces. Internally, it applies string to the list of values (not TeX!). However, you might still get things like %pi in the output. You can use this with mathematical input: {@stack_disp_comma_separate([a,b,sin(pi)])@} and you will get the result a, b, sin(%pi/7) (without the string quotes) because when a Maxima variable is a string we strip off the outside quotes and don't typeset this in maths mode. Functions It is sometimes useful for the teacher to define functions as part of a STACK question. This can be done in the normal way in Maxima using the notation. f(x):=x^2; Using Maxima's define() command is forbidden. An alternative is to define f as an \"unnamed function\" using the lambda command. f:lambda([x],x^2); Here we are giving a name to an \"unnamed function\" which seems perverse. Unnamed functions are extremely useful in many situations. For example, a piecewise function can be defined by either of these two commands f(x):=if (x<0) then 6*x-2 else -2*exp(-3*x); f:lambda([x],if (x<0) then 6*x-2 else -2*exp(-3*x)); You can then plot this using {@plot(f(x),[x,-1,1])@} Maxima \"gotcha\"s! See the section above on assignment . Maxima does not have a degree command for polynomials. We define one via the hipow command. Matrix multiplication is the dot, e.g. A.B . The star A*B gives element-wise multiplication. Further information and links Minimal Maxima Maxima on SourceForge See also Maxima reference topics","title":"Introduction to Maxima for STACK users"},{"location":"en/CAS/Maxima/#introduction-to-maxima-for-stack-users","text":"Maxima is a system for the manipulation of symbolic and numerical expressions, including differentiation, integration, Taylor series, Laplace transforms, ordinary differential equations, systems of linear equations, polynomials, sets, lists, vectors, matrices, and tensors. To write more than very simple questions you will need to use some Maxima commands. This documentation does not provide a detailed tutorial on Maxima. A very good introduction is given in Minimal Maxima , which this document assumes you have read. STACK then modifies Maxima in a number of ways.","title":"Introduction to Maxima for STACK users"},{"location":"en/CAS/Maxima/#Types_of_object","text":"Maxima is a very weakly typed language. However, in STACK we need the following \"types\" of expression: equations, i.e. an expression in which the top operation is an equality sign; inequalities, for example x<1\\mbox{, or }x\\leq 1 ; sets, for example, \\{1,2,3\\} ; lists, for example, [1,2,3] . In Maxima ordered lists are entered using square brackets, for example as p:[1,1,2,x^2] . An element is accessed using the syntax p[1] . matrices . The basic syntax for a matrix is p:matrix([1,2],[3,4]) . Each row is a list. Elements are accessed as p[1,2] , etc. logical expression. This is a tree of other expressions connected by the logical and and or . This is useful for expressing solutions to equations, such as x=1 or x=2 . Note, the support for these expressions is unique to STACK. expressions. Expressions come last, since they are just counted as being not the others! STACK defines predicate functions to test for each of these types.","title":"Types of object"},{"location":"en/CAS/Maxima/#Numbers","text":"Numbers are important in assessment, and there is more specific and detailed documentation on how numbers are treated: Numbers in STACK .","title":"Numbers"},{"location":"en/CAS/Maxima/#alias","text":"STACK defines the following function alias names simplify := fullratsimp int := integrate The absolute value function in Maxima is entered as abs() . STACK also permits you to enter using | symbols, i.e. |x| . This is an alias for abs . Note that abs(x) will be displayed by STACK as |x| . STACK also redefined a small number of functions The plot command plot2d is not used in STACK questions. Use plot instead, which is documented here . This ensures your image files are available on the server. The random number command random is not used in STACK questions. Use the command rand instead, which is documented here . This ensures pseudorandom numbers are generated and a student gets the same version each time they login.","title":"Alias"},{"location":"en/CAS/Maxima/#Parts_of_Maxima_expressions","text":"","title":"Parts of Maxima expressions"},{"location":"en/CAS/Maxima/#opx-the-top-operator","text":"It is often very useful to take apart a Maxima expression. To help with this Maxima has a number of commands, including op(ex) , args(ex) and part(ex,n) . Maxima has specific documentation on this. In particular, op(ex) returns the main operator of the expression ex . This command has some problems for STACK. calling op(ex) on an atom (see Maxima's documentation on the predicate atom(ex) ) such as numbers or variable names, cause op(ex) to throw an error. op(ex) sometimes returns a string, sometimes not. the unary minus causes problems. E.g. in -1/(1+x) the operation is not \"/\", as you might expect, but it is \"-\" instead! To overcome these problems STACK has a command safe_op(ex) This always returns a string. For an atom this is empty, i.e. \"\" . It also sorts out some unary minus problems.","title":"op(x) - the top operator"},{"location":"en/CAS/Maxima/#get_opsex-all-operators","text":"This function returns a set of all operators in an expression. Useful if you want to find if multiplication is used anywhere in an expression.","title":"get_ops(ex) - all operators"},{"location":"en/CAS/Maxima/#Maxima_commands_defined_by_STACK","text":"It is very useful when authoring questions to be able to test out Maxima code in the same environment which STACK uses Maxima. That is to say, with the settings and STACK specific functions loaded. To do this see STACK-Maxima sandbox . STACK creates a range of additional functions and restricts those available, many of which are described within this documentation. See also Predicate functions . Command Description factorlist(ex) Returns a list of factors of ex without multiplicities. zip_with(f,a,b) This function applies the binary function f to two lists a and b returning a list. An example is given in adding matrices to show working . coeff_list(ex,v) This function takes an expression ex and returns a list of coefficients of v . coeff_list_nz(ex,v) This function takes an expression ex and returns a list of nonzero coefficients of v . divthru(ex) Takes an algebraic fraction, e.g. (x^4-1)/(x+2) and divides through by the denominator, to leave a polynomial and a proper fraction. Useful in feedback, or steps of a calculation. stack_strip_percent(ex,var) Removes any variable beginning with the % character from ex and replace them with variables from var . Useful for use with solve, ode2 etc. Solve and ode2 . exdowncase(ex) Takes the expression ex and substitutes all variables for their lower case version (cf sdowncase(ex) in Maxima). This is very useful if you don't care if a student uses the wrong case, just apply this function to their answer before using an answer test . Note, of course, that exdowncase(X)-x=0. stack_reset_vars Resets constants, e.g. i , as abstract symbols, see Numbers . safe_op(ex) Returns the operation of the expression as a string. Atoms return an empty string (rather than throwing an error as does op ). comp_square(ex,v) Returns a quadratic ex in the variable v in completed square form. degree(ex,v) Returns the degree of the expanded form of ex in the variable v . See also Maxima's hipow command. unary_minus_sort(ex) Tidies up the way unary minus is represented within expressions when simp:false . See also simplification . texboldatoms(ex) Displays all non-numeric atoms in bold. Useful for vector questions. exdowncase(ex) This function makes a substitution of all variables for their lower case equivalents.","title":"Maxima commands defined by STACK"},{"location":"en/CAS/Maxima/#assignment","text":"In Maxima the assignment of a value to a variable is very unusual . Input Result a:1 Assignment of the value 1 to a . a=1 An equation, yet to be solved. f(x):=x^2 Definition of a function. In STACK simple assignments are of the more conventional form key : value , for example, n : rand(3)+2; p : (x-1)^n; Of course, these assignments can make use of Maxima's functions to manipulate expressions. p : expand( (x-3)*(x-4) ); Another common task is that of substitution . This can be performed with Maxima's subst command. This is quite useful, for example if we define p as follows, in the then we can use this in response processing to determine if the student's answer is odd. p : ans1 + subst(-x,x,ans1); All sorts of properties can be checked for in this way. For example, interpolates. Another example is a stationary point of f(x) at x=a , which can be checked for using p : subst(a,x,diff(ans1,x)); Here we have assumed a is some point given to the student, ans1 is the answer and that p will be used in the response processing tree. You can use Maxima's looping structures within Question variables, although the syntax requires this to be of the form key = value . In this case, the key will be assigned the value DONE at the end of the process, unless another value is returned. For example n : 1; dum1 : for a:-3 thru 26 step 7 do n:n+a; Note, you must use Maxima's syntax a:-3 here for assignment of -3 to the variable a . The assignment to the dummy variable dum1 is to ensure every command is of the form key : value . Please look at Maxima's documentation for the command do . It is also possible to define functions within the Question Variables for use within a question. This is not recommended, and has not been widely tested. For example dum1 : f(x) := x^2; n : f(4);","title":"Assignment"},{"location":"en/CAS/Maxima/#logarithms","text":"STACK loads the contributed Maxima package log10 . This defines logarithms to base 10 automatically. STACK also creates two aliases ln is an alias for \\log , which are natural logarithms lg is an alias for \\log_{10} , which are logarithms to base 10 . It is not possible to redefine the command log to be to the base 10 .","title":"Logarithms"},{"location":"en/CAS/Maxima/#sets-lists-sequences-n-tuples","text":"It is very useful to be able to display expressions such as comma separated lists, and n-tuples 1,2,3,4,\\cdots (1,2,3,4) Maxima has in-built functions for lists, which are displayed with square brackets [1,2,3,4] , and sets with curly braces \\{1,2,3,4\\} . Maxima has no default functions for n-tuples or for sequences. STACK provides an inert function sequence . All this does is display its arguments without brackets. For example sequence(1,2,3,4) is displayed 1,2,3,4 . STACK provides convenience functions. sequenceify , creates a sequence from the arguments of the expression. This turns lists, sets etc. into a sequence. sequencep is a predicate to decide if the expression is a sequence. STACK provides an inert function ntuple . All this does is display its arguments with round brackets. For example ntuple(1,2,3,4) is displayed (1,2,3,4) . ntupleify and ntuplep construct and test for ntuples. The atom dotdotdot is displayed using the tex \\ldots which looks like \\ldots . This atom cannot be entered by students. If you want to use these functions, then you can create question variables as follows L1:[a,b,c,d]; D1:apply(ntuple, L1); L2:args(D1); D2:sequenceify(L2); Then L1 is a list and is displayed with square brackets as normal. D1 has operator ntuple and so is displayed with round brackets. L2 has operator list and is displayed with square brackets. Lastly, D2 is an sequence and is displayed without brackets. You can, of course, apply these functions directly. T1:ntuple(a,b,c); S1:sequence(a,b,c,dotdotdot); If you want to use sequence or ntuple in a PRT comparison, you probably want to turn them back into lists. E.g. ntuple(1,2,3) is not algebraically equivalent to [1,2,3] . To do this use the args function. We may, in the future, give more active meaning to the data types of sequence and ntuple . Matrices have options to control the display of the braces. Matrices are displayed without commas. If you are interacting with javascript do not use sequenceify . If you are interacting with javascript, such ss JSXGraph , then you may want to output a list of values without all the LaTeX and without Maxima's normal bracket symbols. You can use stack_disp_comma_separate([a,b,sin(pi)]); This function turns a list into a string representation of its arguments, without braces. Internally, it applies string to the list of values (not TeX!). However, you might still get things like %pi in the output. You can use this with mathematical input: {@stack_disp_comma_separate([a,b,sin(pi)])@} and you will get the result a, b, sin(%pi/7) (without the string quotes) because when a Maxima variable is a string we strip off the outside quotes and don't typeset this in maths mode.","title":"Sets, lists, sequences, n-tuples"},{"location":"en/CAS/Maxima/#functions","text":"It is sometimes useful for the teacher to define functions as part of a STACK question. This can be done in the normal way in Maxima using the notation. f(x):=x^2; Using Maxima's define() command is forbidden. An alternative is to define f as an \"unnamed function\" using the lambda command. f:lambda([x],x^2); Here we are giving a name to an \"unnamed function\" which seems perverse. Unnamed functions are extremely useful in many situations. For example, a piecewise function can be defined by either of these two commands f(x):=if (x<0) then 6*x-2 else -2*exp(-3*x); f:lambda([x],if (x<0) then 6*x-2 else -2*exp(-3*x)); You can then plot this using {@plot(f(x),[x,-1,1])@}","title":"Functions"},{"location":"en/CAS/Maxima/#maxima-gotchas","text":"See the section above on assignment . Maxima does not have a degree command for polynomials. We define one via the hipow command. Matrix multiplication is the dot, e.g. A.B . The star A*B gives element-wise multiplication.","title":"Maxima \"gotcha\"s!"},{"location":"en/CAS/Maxima/#further-information-and-links","text":"Minimal Maxima Maxima on SourceForge","title":"Further information and links"},{"location":"en/CAS/Maxima/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Numbers/","text":"Numbers in STACK Numerical answer tests are documented in a page dedicated to numerical answer tests . Precise Constants In Maxima the special constants are defined to be %i, %e, %pi etc. STACK also uses single letters, e.g. e: %e pi: %pi Optionally, depending on the question settings, you have i: %i j: %i Sometimes you need to use e , or other constants, as an abstract symbol not a number. The Maxima solution is to use the kill() command, but for security reasons users of STACK are not permitted to use this function. Instead use stack_reset_vars(true) in the question variables. This resets all the special constants defined by STACK so the symbols can be redefined in an individual STACK question. Modular arithmetic The function recursemod(ex, n) recurses over an expression tree, and applies the function mod(?, n) to any numbers as identified by numberp . This works on any expression, whereas polymod only applies to polynomials. Internal representation of numbers Maxima has two data types to represent numbers: integers and floats. Rational numbers are expressed as a division of two integers not with a dedicated data type, and surds with fractional powers or the sqrt function. The option Surd for Square Root enables the question author to alter the way surds are displayed in STACK. Similarly, complex numbers are not represented as a single object, but as a sum of real and imaginary parts, or via the exponential function. The input and display of complex numbers is difficult, since differences exist between mathematics, physics and engineering about which symbols to use. The option sqrt(-1) is set in each question to sort out meaning and display. Floating point numbers To convert to a float use Maxima's float(ex) command. To convert a float to an exact representation use rat(x) to rationalise the decimal. The variable e has been defined as e:exp(1) . This now potentially conflicts with scientific notation 2e3 which means 2*10^3 . If you expect students to use scientific notation for numbers, e.g. 3e4 (which means 3\\times 10^{4} ), then you may want to use the option for strict syntax . Maxima and floats with trailing zeros For its internal representation, Maxima always truncates trailing zeros from a floating point number. For example, the Maxima expression 0.01000 will be converted internally to 0.01 . Actually this is a byproduct of the process of converting a decimal input to an internal binary float, and back again. Similarly, when a number is a \"float\" datatype, Maxima always prints at least one decimal digit to indicate the number is a float. For example, the floating point representation of the number ten is 10.0 . This does not indicate significant figures, rather it indicates data type. In situations where the number of significant figures is crucial this is problematic. Display of numbers in STACK is controlled with LaTeX, and the underlying LISP provides flexible ways to represent numbers. Note, that apart from the units input, all other input types truncate the display of unnecessary trailing zeros in floating point numbers, loosing information about significant figures. So, when the student's answer is a floating point number, trailing zeros will not be displayed. If you want to specifically test for significant figures, use the units input type , with the teacher's answer having no units. The units input type should display the same number of significant figures as typed in by the student. Display of numbers with LaTeX The display of numbers is controlled by Maxima's texnumformat command, which STACK modifies. Stack provides two variables to control the display of integers and floats respectively. The default values are stackintfmt:\"~d\"; stackfltfmt:\"~a\"; These two variables control the output format of integers (identified by the predicate integerp ) and floats (identified by the predicate floatnump ) respectively. These variables persist, so you need to define their values each time you expect them to change. These variables must be assigned a string following Maxima's printf format. These variables can be defined in the question variables, for global effect. They can also be defined inside a Maxima block to control the display on the fly, and for individual expressions. For example, consider the following CASText. The decimal number {@n:73@} is written in base \\(2\\) as {@(stackintfmt:\"~2r\",n)@}, in base \\(7\\) as {@(stackintfmt:\"~7r\",n)@}, in scientific notation as {@(stackintfmt:\"~e\",n)@} and in rhetoric as {@(stackintfmt:\"~r\",n)@}. The result should be \"The decimal number 73 is written in base 2 as 1001001 , in base 7 as 133 , in scientific notation as 7.3E+1 and in rhetoric as seventy-three .\" To force all floating point numbers to scientific notation use stackfltfmt:\"~e\"; To force all floating point numbers to decimal floating point numbers use stackfltfmt:\"~f\"; You can also force all integers to be displayed as floating point decimals or in scientific notation using stackintfmt and the appropriate template. This function calls the LISP format function, which is complex and more example are available online elsewhere. Template Input TeX Output Description/notes \"~,4f\" 0.12349 0.1235 Output four decimal places: floating point. 0.12345 0.1234 Note the rounding. 0.12 0.1200 \"~,5e\" 100.34 1.00340e+2 Output five decimal places: scientific notation. \"~:d\" 10000000 10,000,000 Separate decimal groups of three digits with commas. ~r 9 \\mbox{nine} Rhetoric. ~:r 9 \\mbox{ninth} Ordinal rhetoric. ~7r 9 12 Base 7. ~@r 9 IX Roman numerals. ~:@r 9 VIIII Old style Roman numerals. There are many other options within the LISP format command. Please note with the rhetoric and Roman numerals that the numbers will be in LaTeX mathematics environments. Maxima has a separate system for controlling the number of decimal digits used in calculations and when printing the value of computed results. Trailing zeros will not be printed with the value. This is controlled by Maxima's fpprec and fpprintprec variables. The default for STACK is fpprec:20, /* Work with 20 digits. */ fpprintprec:12, /* Print only 12 digits. */ Notes about numerical rounding There are two ways to round numbers ending in a digit 5 . Always round up, so that 0.5\\rightarrow 1 , 1.5 \\rightarrow 2 , 2.5 \\rightarrow 3 etc. Another common system is to use ``Bankers' Rounding\". Bankers Rounding is an algorithm for rounding quantities to integers, in which numbers which are equidistant from the two nearest integers are rounded to the nearest even integer. 0.5\\rightarrow 0 , 1.5 \\rightarrow 2 , 2.5 \\rightarrow 2 etc. The supposed advantage to bankers rounding is that in the limit it is unbiased, and so produces better results with some statistical processes that involve rounding. Maxima's round(ex) command rounds multiples of 1/2 to the nearest even integer, i.e. Maxima implements Bankers' Rounding. STACK has defined the function significantfigures(x,n) to conform to convention of rounding up. STACK numerical functions and predicates The following commands which are relevant to manipulation of numbers are defined by STACK. Command Description significantfigures(x,n) Truncate x to n significant figures (does perform rounding). decimalplaces(x,n) Truncate x to n decimal places (does perform rounding). commonfaclist(l) Returns the highest common factors of a list of numbers. list_expression_numbers(ex) Create a list with all parts for which numberp(ex)=true . coeff_list(ex,v) This function takes an expression ex and returns a list of coefficients of v . coeff_list_nz(ex,v) This function takes an expression ex and returns a list of nonzero coefficients of v . numabsolutep(sa,ta,tol) Is sa within tol of ta ? I.e. ( numrelativep(sa,ta,tol) Is sa within tol\\times ta of ta ? I.e. ( The following commands generate displayed forms of numbers. These will not be manipulated further automatically, so you will need to use these at the last moment, e.g. only when generating the teacher's answer etc. Command Description dispdp(x,n) Truncate x to n decimal places and display with trailing digits. Note, this always prints as a float (or integer), and not in scientific notation. dispsf(x,n) Truncate x to n significant figures and display with trailing digits. Note, this always prints as a float, and not in scientific notation. scientific_notation(x,n) Write x in the form m10^e . Only works reliably with simp:false (e.g. try 9000). The optional second argument applies displaysci(m,n) to the mantissa to control the display of trailing zeros. displaydp(x,n) An inert internal function to record that x should be displayed to n decimal places with trailing digits. This function does no rounding. displaysci(x,n,expo) An inert internal function to record that x should be displayed to n decimal places with trailing digits, in scientific notation. E.g. x\\times 10^{expo} . Function Predicate simp_numberp(ex) Fixes numberp(ex) for simp:false . real_numberp(ex) Determines if ex is a real number. This includes surds and symbolic numbers such as \\pi . lowesttermsp(ex) Is the rational expression in its lowest terms? anyfloatex(ex) Decides if any floats are in the expression. scientific_notationp(ex) Determines if ex is written in the form a10^n where a is an integer or float, and n is an integer. See also Maxima reference topics","title":"Numbers in STACK"},{"location":"en/CAS/Numbers/#numbers-in-stack","text":"Numerical answer tests are documented in a page dedicated to numerical answer tests .","title":"Numbers in STACK"},{"location":"en/CAS/Numbers/#precise-constants","text":"In Maxima the special constants are defined to be %i, %e, %pi etc. STACK also uses single letters, e.g. e: %e pi: %pi Optionally, depending on the question settings, you have i: %i j: %i Sometimes you need to use e , or other constants, as an abstract symbol not a number. The Maxima solution is to use the kill() command, but for security reasons users of STACK are not permitted to use this function. Instead use stack_reset_vars(true) in the question variables. This resets all the special constants defined by STACK so the symbols can be redefined in an individual STACK question.","title":"Precise Constants"},{"location":"en/CAS/Numbers/#modular-arithmetic","text":"The function recursemod(ex, n) recurses over an expression tree, and applies the function mod(?, n) to any numbers as identified by numberp . This works on any expression, whereas polymod only applies to polynomials.","title":"Modular arithmetic"},{"location":"en/CAS/Numbers/#internal-representation-of-numbers","text":"Maxima has two data types to represent numbers: integers and floats. Rational numbers are expressed as a division of two integers not with a dedicated data type, and surds with fractional powers or the sqrt function. The option Surd for Square Root enables the question author to alter the way surds are displayed in STACK. Similarly, complex numbers are not represented as a single object, but as a sum of real and imaginary parts, or via the exponential function. The input and display of complex numbers is difficult, since differences exist between mathematics, physics and engineering about which symbols to use. The option sqrt(-1) is set in each question to sort out meaning and display.","title":"Internal representation of numbers"},{"location":"en/CAS/Numbers/#Floats","text":"To convert to a float use Maxima's float(ex) command. To convert a float to an exact representation use rat(x) to rationalise the decimal. The variable e has been defined as e:exp(1) . This now potentially conflicts with scientific notation 2e3 which means 2*10^3 . If you expect students to use scientific notation for numbers, e.g. 3e4 (which means 3\\times 10^{4} ), then you may want to use the option for strict syntax .","title":"Floating point numbers"},{"location":"en/CAS/Numbers/#maxima-and-floats-with-trailing-zeros","text":"For its internal representation, Maxima always truncates trailing zeros from a floating point number. For example, the Maxima expression 0.01000 will be converted internally to 0.01 . Actually this is a byproduct of the process of converting a decimal input to an internal binary float, and back again. Similarly, when a number is a \"float\" datatype, Maxima always prints at least one decimal digit to indicate the number is a float. For example, the floating point representation of the number ten is 10.0 . This does not indicate significant figures, rather it indicates data type. In situations where the number of significant figures is crucial this is problematic. Display of numbers in STACK is controlled with LaTeX, and the underlying LISP provides flexible ways to represent numbers. Note, that apart from the units input, all other input types truncate the display of unnecessary trailing zeros in floating point numbers, loosing information about significant figures. So, when the student's answer is a floating point number, trailing zeros will not be displayed. If you want to specifically test for significant figures, use the units input type , with the teacher's answer having no units. The units input type should display the same number of significant figures as typed in by the student.","title":"Maxima and floats with trailing zeros"},{"location":"en/CAS/Numbers/#display-of-numbers-with-latex","text":"The display of numbers is controlled by Maxima's texnumformat command, which STACK modifies. Stack provides two variables to control the display of integers and floats respectively. The default values are stackintfmt:\"~d\"; stackfltfmt:\"~a\"; These two variables control the output format of integers (identified by the predicate integerp ) and floats (identified by the predicate floatnump ) respectively. These variables persist, so you need to define their values each time you expect them to change. These variables must be assigned a string following Maxima's printf format. These variables can be defined in the question variables, for global effect. They can also be defined inside a Maxima block to control the display on the fly, and for individual expressions. For example, consider the following CASText. The decimal number {@n:73@} is written in base \\(2\\) as {@(stackintfmt:\"~2r\",n)@}, in base \\(7\\) as {@(stackintfmt:\"~7r\",n)@}, in scientific notation as {@(stackintfmt:\"~e\",n)@} and in rhetoric as {@(stackintfmt:\"~r\",n)@}. The result should be \"The decimal number 73 is written in base 2 as 1001001 , in base 7 as 133 , in scientific notation as 7.3E+1 and in rhetoric as seventy-three .\" To force all floating point numbers to scientific notation use stackfltfmt:\"~e\"; To force all floating point numbers to decimal floating point numbers use stackfltfmt:\"~f\"; You can also force all integers to be displayed as floating point decimals or in scientific notation using stackintfmt and the appropriate template. This function calls the LISP format function, which is complex and more example are available online elsewhere. Template Input TeX Output Description/notes \"~,4f\" 0.12349 0.1235 Output four decimal places: floating point. 0.12345 0.1234 Note the rounding. 0.12 0.1200 \"~,5e\" 100.34 1.00340e+2 Output five decimal places: scientific notation. \"~:d\" 10000000 10,000,000 Separate decimal groups of three digits with commas. ~r 9 \\mbox{nine} Rhetoric. ~:r 9 \\mbox{ninth} Ordinal rhetoric. ~7r 9 12 Base 7. ~@r 9 IX Roman numerals. ~:@r 9 VIIII Old style Roman numerals. There are many other options within the LISP format command. Please note with the rhetoric and Roman numerals that the numbers will be in LaTeX mathematics environments. Maxima has a separate system for controlling the number of decimal digits used in calculations and when printing the value of computed results. Trailing zeros will not be printed with the value. This is controlled by Maxima's fpprec and fpprintprec variables. The default for STACK is fpprec:20, /* Work with 20 digits. */ fpprintprec:12, /* Print only 12 digits. */","title":"Display of numbers with LaTeX"},{"location":"en/CAS/Numbers/#notes-about-numerical-rounding","text":"There are two ways to round numbers ending in a digit 5 . Always round up, so that 0.5\\rightarrow 1 , 1.5 \\rightarrow 2 , 2.5 \\rightarrow 3 etc. Another common system is to use ``Bankers' Rounding\". Bankers Rounding is an algorithm for rounding quantities to integers, in which numbers which are equidistant from the two nearest integers are rounded to the nearest even integer. 0.5\\rightarrow 0 , 1.5 \\rightarrow 2 , 2.5 \\rightarrow 2 etc. The supposed advantage to bankers rounding is that in the limit it is unbiased, and so produces better results with some statistical processes that involve rounding. Maxima's round(ex) command rounds multiples of 1/2 to the nearest even integer, i.e. Maxima implements Bankers' Rounding. STACK has defined the function significantfigures(x,n) to conform to convention of rounding up.","title":"Notes about numerical rounding"},{"location":"en/CAS/Numbers/#stack-numerical-functions-and-predicates","text":"The following commands which are relevant to manipulation of numbers are defined by STACK. Command Description significantfigures(x,n) Truncate x to n significant figures (does perform rounding). decimalplaces(x,n) Truncate x to n decimal places (does perform rounding). commonfaclist(l) Returns the highest common factors of a list of numbers. list_expression_numbers(ex) Create a list with all parts for which numberp(ex)=true . coeff_list(ex,v) This function takes an expression ex and returns a list of coefficients of v . coeff_list_nz(ex,v) This function takes an expression ex and returns a list of nonzero coefficients of v . numabsolutep(sa,ta,tol) Is sa within tol of ta ? I.e. ( numrelativep(sa,ta,tol) Is sa within tol\\times ta of ta ? I.e. ( The following commands generate displayed forms of numbers. These will not be manipulated further automatically, so you will need to use these at the last moment, e.g. only when generating the teacher's answer etc. Command Description dispdp(x,n) Truncate x to n decimal places and display with trailing digits. Note, this always prints as a float (or integer), and not in scientific notation. dispsf(x,n) Truncate x to n significant figures and display with trailing digits. Note, this always prints as a float, and not in scientific notation. scientific_notation(x,n) Write x in the form m10^e . Only works reliably with simp:false (e.g. try 9000). The optional second argument applies displaysci(m,n) to the mantissa to control the display of trailing zeros. displaydp(x,n) An inert internal function to record that x should be displayed to n decimal places with trailing digits. This function does no rounding. displaysci(x,n,expo) An inert internal function to record that x should be displayed to n decimal places with trailing digits, in scientific notation. E.g. x\\times 10^{expo} . Function Predicate simp_numberp(ex) Fixes numberp(ex) for simp:false . real_numberp(ex) Determines if ex is a real number. This includes surds and symbolic numbers such as \\pi . lowesttermsp(ex) Is the rational expression in its lowest terms? anyfloatex(ex) Decides if any floats are in the expression. scientific_notationp(ex) Determines if ex is written in the form a10^n where a is an integer or float, and n is an integer.","title":"STACK numerical functions and predicates"},{"location":"en/CAS/Numbers/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Optimising_Maxima/","text":"Optimising Maxima There are several ways to reduce the access and execution time of this CAS which can prove useful for scaling. They have the potential to greatly speed up STACK, and are widely used. It is particularly important on a Unix system to compile the Maxima code. Please let us know if you try them. The instructions for both CLISP and SBCL have been tested and work in STACK 3. As of November 2015, these are working with Maxima 5.36.1, but some versions of Maxima do have problems. We now have some code to attempt to automatically generate the LISP images described below. Beware, however, that when regenerating the image you may have to manually delete the old image which may be write-protected. Terminating runaway LISPS It is relatively easy for students to inadvertently generate an answer which takes Maxima a very long time to evaluate. Typically this arises from where Maxima needs to expand out the brackets by comparing (x-a)^59999 with a similar expression. It is very hard to ensure this kind of calculation is impossible so in general this situation will arise from time to time. The PHP scripts have a timeout, but on Linux systems you can also ensure the underlying LISP process is killed off using timeout command in Linux. This is particularly valuable for production systems where stability is essential. Check that your Linux has the timeout command. Because this is not standard we have not included this mechanism by default. Make sure STACK is working. Set the CAS connection timeout variable as normal in the STACK settings. E.g. you might choose 5 seconds Use the following Maxima command timeout --kill-after=6s 6s maxima It is important that the timeout time is longer than the CAS connection timeout. That way, PHP gives up first and degrades gracefully. The OS then kills the process later. If you choose the timeout to be the same or less, PHP may not have gathered enough data to degrade gracefully. The above can be used with either a direct Maxima connection, or with the image created as described below. Compiled Lisp Maxima can be run with a number of different Lisp implementations . Although CLISP is the most portable - due to being interpreted - other Lisps can give faster execution. Create Maxima Image Lisp is able to save a snapshot of its current state to a file. This file can then be used to restart Lisp, and hence Maxima, in exactly that state. This optimization involves creating a snapshot of Lisp with Maxima and all the STACK code loaded, which can speed up launch times by an order of magnitude on Linux. This tip was originally provided Niels Walet. The principle is to save an image of Maxima running with STACK libraries already loaded then run this directly. The healthcheck page contains a link at the bottom \"Create Maxima Image\". We strongly recommend you use the automated option to create a Maxima image. Create Maxima Image by hand These steps should not be needed. Our goal is to do this automatically. If your OS and Maxima version do not work, please contact the developers with details and we will try to automate this process. For reference: Check your Maxima Lisp with maxima --list-avail to see what versions of Maxima and which Lisp you have. This information is available through the healthcheck page. Load Maxima, using switches for the particular version you want, e.g. maxima -l CLISP -u 5.19.2 or maxima --use-version=5.40.1 . GCL This is the default Lisp used by most of the binary distributions, and therefore the Lisp which you are most likely to have. Get STACK working with Platform type set to 'Linux'. Run the health-check. It is important to do this every time you upgrade your version. load(\"<path>/maximalocal.mac\"); :lisp (si::save-system \"/path/to/moodledata/stack/maxima-optimised\") quit(); Go into the STACK settings and set Platform type to 'Linux (Optimised)'. Set Maxima command to. /path/to/moodledata/stack/maxima-optimised -eval '(cl-user::run)' CLISP Save an image in CLISP . Get STACK working with Platform type set to 'Linux'. Run the health-check. It is important to do this every time you upgrade your version. We assume you have CLISP. Type locate lisp.run to find the path(s) for the next step. You might need to run the command as root, and if you get no results try doing a sudo updatedb . Within Maxima, type the following lines to create an image and exit. load(\"<path>/maximalocal.mac\"); load(\"<path>/stackmaxima.mac\"); :lisp (ext:saveinitmem \"/path/to/moodledata/stack/maxima-optimised.mem\" :init-function #'user::run) quit(); Go into the STACK settings and set Platform type to 'Linux (Optimised)'. Set Maxima command to. <path>/lisp.run -q -M <path>/maxima-optimised.mem Click Save changes at the bottom of the settings page. Visit the healthcheck page, and clear the cache (if applicable), to make sure everything is still working. Access speed increases of between 2 and 9.5 times have been reported over the standard CLISP configurations. SBCL If you are using STACK with SBCL (if you are using CentOS/SL5/RHEL with Maxima from EPEL), use the following to generate a standalone executable: Get STACK working with Platform type set to 'Linux'. Run the healthcheck. It is important to do this every time you upgrade your version. Go into your moodledata/stack folder as the current directory, and run Maxima. In Maxima, type the commands: load(\"maximalocal.mac\"); :lisp (sb-ext:save-lisp-and-die \"maxima-optimised\" :toplevel #'run :executable t) Go into the STACK settings and set the Platform to 'Linux (Optimised)'. You should be able to leave Maxima command blank. Click save changes at the bottom of the settings page. Visit the healthcheck page, and clear the cache (if applicable), to make sure everything is still working. Other Lisps The following web pages have more information for a few types of Lisp: http://stackoverflow.com/questions/25046/lisp-executable and http://code.google.com/p/lispbuilder/wiki/StandAloneExecutables#Defining_a_Startup_Function Putting Maxima on other servers Running Maxima on a separate server dedicated to the task is more secure. We believe it also improves performance because the server can start up Maxima processes in advance so they are all ready and waiting to compute some CAS with zero delay. See a Maxima pool has been implemented to do this. See https://github.com/maths/stack_util_maximapool/blob/master/README.md Optimisation results The following data was gathered by CJS on 23/9/2012 using Maxima 5.28.0 with CLISP 2.49 (2010-07-07) on a Linux server. Running the PHP testing suites we have the following data, where all times are in seconds. The second line, in italics, is time per test. CAS setting Answertest (460 tests) Inputs (257 tests) Linux 517.8672 1.1258 208.85655 0.81267 Mature cache (with Linux) 0.92644 0.00201 13.9798 0.0544 Linux (optimised) 95.16954 0.20689 20.89807 0.08132 Mature cache (when optimised) 0.90839 0.00197 1.48648 0.00578 However, not all tests result in a CAS call. So, to estimate this we subtract the overhead time for a mature cache (which is essentially time for database/PHP processing) from the raw time and divide by the number of CAS calls. We have the following time per CAS call estimates. CAS setting Answertest (438 calls) Inputs (204 calls) Linux 1.180 0.955 Linux (optimised) 0.215 0.095 The optimised version saves a considerable amount of time, representing a significant performance improvement in the critical step of just under a second per call. Well worth the effort (& maintenance) to reward ratio. It is likely that using a compiled version of LISP would result in further considerable savings. However, it isn't entirely clear to me at this point why the input tests with a mature cache using the default Linux connection takes over 13 seconds. This seems anomalous. The following data was gathered by CJS on 10/10/2012 using Maxima 5.28.0 with CLISP 2.49 and SBCL 1.0.58-1.el6, both on the same Linux server. The table gives time in seconds to run the answer tests (462 tests). Maxima version Linux Linux optimised CLISP 2.49 652.3 117.76314 SBCL 1.0.58-1.el6 1570.6 118.39215 With both lisp versions, the optimisation gives a significant performance gain and there is very little difference between the times of the optimised versions. CAS on Linux The tests above use Maxima through the PHP interface. To gauge the overhead from the CAS itself we ran the following tests on the same server using Maxima 5.28.0 with CLISP 2.49. model name: Intel(R) Xeon(R) CPU, E3113 @ 3.00GHz Linux Time for 100 cycles (s) Start Maxima and quit 43 Start STACK and quit 124 Process AtAlgEquiv 133 Without optimising Linux, compared to processing one AtAlgEquiv, there is approximately 93% overhead in starting the maxima process. Optimised Linux Time for 100 cycles (s) Start STACK and quit 12 Process AtAlgEquiv 16 Process 100 AtAlgEquiv 104 Process 100 plot 117 The PHP processing time is almost insignificant against the time it takes to initiate and use the CAS. With the optimised Linux we have reduced the loading time, and the loading overhead considerably. A single ATAlgEquiv request takes about 0.04s. Asking for 100 ATAlgEquiv requests in a single session take 0.0092s per request. Asking for 100 plot commands takes 1.05s per plot - which is rather slow (plots undertake a large number of floating point calculations). The overhead times for loading Maxima might be reduced, and smoothed out by using the Maxima pool, see http://github.com/maths/stack_util_maximapool for an implementation of this. The computation times are difficult to reduce. Memory appears to be modest: the optimised Linux takes about 15Mb of memory per process. Compiling a Maxima image The following was tested in March 2016 on CENTOS. It is for compiling a Maxima image. Really this is mostly for developers. sudo yum install sbcl texinfo rpm-build cd ~ wget http://dl.fedoraproject.org/pub/fedora/linux/updates/22/SRPMS/m/maxima-5.36.1-2.fc22.src.rpm rpm -i maxima-5.36.1-2.fc22.src.rpm cd rpmbuild rpmbuild -ba SPECS/maxima.spec cd RPMS/x86_64 sudo yum remove maxima sudo yum install maxima-runtime-sbcl-5.36.1-2.el6.x86_64.rpm maxima-5.36.1-2.el6.x86_64.rpm The following was tested in March 2016 on Ubuntu 14.04.4 LTS (GNU/Linux 3.13.0-79-generic x86_64) (Trusty). Install dependencies: sudo apt-get -y install clisp texinfo Then run: cd ~ wget -O maxima_source.tar.gz http://sourceforge.net/projects/maxima/files/Maxima-source/5.36.1-source/maxima-5.36.1.tar.gz/download tar zxvf maxima_source.tar.gz cd maxima-5.36.1 ./configure --with-clisp make --silent sudo make install --silent maxima --list-avail","title":"Optimising Maxima"},{"location":"en/CAS/Optimising_Maxima/#optimising-maxima","text":"There are several ways to reduce the access and execution time of this CAS which can prove useful for scaling. They have the potential to greatly speed up STACK, and are widely used. It is particularly important on a Unix system to compile the Maxima code. Please let us know if you try them. The instructions for both CLISP and SBCL have been tested and work in STACK 3. As of November 2015, these are working with Maxima 5.36.1, but some versions of Maxima do have problems. We now have some code to attempt to automatically generate the LISP images described below. Beware, however, that when regenerating the image you may have to manually delete the old image which may be write-protected.","title":"Optimising Maxima"},{"location":"en/CAS/Optimising_Maxima/#terminating-runaway-lisps","text":"It is relatively easy for students to inadvertently generate an answer which takes Maxima a very long time to evaluate. Typically this arises from where Maxima needs to expand out the brackets by comparing (x-a)^59999 with a similar expression. It is very hard to ensure this kind of calculation is impossible so in general this situation will arise from time to time. The PHP scripts have a timeout, but on Linux systems you can also ensure the underlying LISP process is killed off using timeout command in Linux. This is particularly valuable for production systems where stability is essential. Check that your Linux has the timeout command. Because this is not standard we have not included this mechanism by default. Make sure STACK is working. Set the CAS connection timeout variable as normal in the STACK settings. E.g. you might choose 5 seconds Use the following Maxima command timeout --kill-after=6s 6s maxima It is important that the timeout time is longer than the CAS connection timeout. That way, PHP gives up first and degrades gracefully. The OS then kills the process later. If you choose the timeout to be the same or less, PHP may not have gathered enough data to degrade gracefully. The above can be used with either a direct Maxima connection, or with the image created as described below.","title":"Terminating runaway LISPS"},{"location":"en/CAS/Optimising_Maxima/#compiled-lisp","text":"Maxima can be run with a number of different Lisp implementations . Although CLISP is the most portable - due to being interpreted - other Lisps can give faster execution.","title":"Compiled Lisp"},{"location":"en/CAS/Optimising_Maxima/#create-maxima-image","text":"Lisp is able to save a snapshot of its current state to a file. This file can then be used to restart Lisp, and hence Maxima, in exactly that state. This optimization involves creating a snapshot of Lisp with Maxima and all the STACK code loaded, which can speed up launch times by an order of magnitude on Linux. This tip was originally provided Niels Walet. The principle is to save an image of Maxima running with STACK libraries already loaded then run this directly. The healthcheck page contains a link at the bottom \"Create Maxima Image\". We strongly recommend you use the automated option to create a Maxima image.","title":"Create Maxima Image"},{"location":"en/CAS/Optimising_Maxima/#create-maxima-image-by-hand","text":"These steps should not be needed. Our goal is to do this automatically. If your OS and Maxima version do not work, please contact the developers with details and we will try to automate this process. For reference: Check your Maxima Lisp with maxima --list-avail to see what versions of Maxima and which Lisp you have. This information is available through the healthcheck page. Load Maxima, using switches for the particular version you want, e.g. maxima -l CLISP -u 5.19.2 or maxima --use-version=5.40.1 .","title":"Create Maxima Image by hand"},{"location":"en/CAS/Optimising_Maxima/#gcl","text":"This is the default Lisp used by most of the binary distributions, and therefore the Lisp which you are most likely to have. Get STACK working with Platform type set to 'Linux'. Run the health-check. It is important to do this every time you upgrade your version. load(\"<path>/maximalocal.mac\"); :lisp (si::save-system \"/path/to/moodledata/stack/maxima-optimised\") quit(); Go into the STACK settings and set Platform type to 'Linux (Optimised)'. Set Maxima command to. /path/to/moodledata/stack/maxima-optimised -eval '(cl-user::run)'","title":"GCL"},{"location":"en/CAS/Optimising_Maxima/#clisp","text":"Save an image in CLISP . Get STACK working with Platform type set to 'Linux'. Run the health-check. It is important to do this every time you upgrade your version. We assume you have CLISP. Type locate lisp.run to find the path(s) for the next step. You might need to run the command as root, and if you get no results try doing a sudo updatedb . Within Maxima, type the following lines to create an image and exit. load(\"<path>/maximalocal.mac\"); load(\"<path>/stackmaxima.mac\"); :lisp (ext:saveinitmem \"/path/to/moodledata/stack/maxima-optimised.mem\" :init-function #'user::run) quit(); Go into the STACK settings and set Platform type to 'Linux (Optimised)'. Set Maxima command to. <path>/lisp.run -q -M <path>/maxima-optimised.mem Click Save changes at the bottom of the settings page. Visit the healthcheck page, and clear the cache (if applicable), to make sure everything is still working. Access speed increases of between 2 and 9.5 times have been reported over the standard CLISP configurations.","title":"CLISP"},{"location":"en/CAS/Optimising_Maxima/#sbcl","text":"If you are using STACK with SBCL (if you are using CentOS/SL5/RHEL with Maxima from EPEL), use the following to generate a standalone executable: Get STACK working with Platform type set to 'Linux'. Run the healthcheck. It is important to do this every time you upgrade your version. Go into your moodledata/stack folder as the current directory, and run Maxima. In Maxima, type the commands: load(\"maximalocal.mac\"); :lisp (sb-ext:save-lisp-and-die \"maxima-optimised\" :toplevel #'run :executable t) Go into the STACK settings and set the Platform to 'Linux (Optimised)'. You should be able to leave Maxima command blank. Click save changes at the bottom of the settings page. Visit the healthcheck page, and clear the cache (if applicable), to make sure everything is still working.","title":"SBCL"},{"location":"en/CAS/Optimising_Maxima/#other-lisps","text":"The following web pages have more information for a few types of Lisp: http://stackoverflow.com/questions/25046/lisp-executable and http://code.google.com/p/lispbuilder/wiki/StandAloneExecutables#Defining_a_Startup_Function","title":"Other Lisps"},{"location":"en/CAS/Optimising_Maxima/#putting-maxima-on-other-servers","text":"Running Maxima on a separate server dedicated to the task is more secure. We believe it also improves performance because the server can start up Maxima processes in advance so they are all ready and waiting to compute some CAS with zero delay. See a Maxima pool has been implemented to do this. See https://github.com/maths/stack_util_maximapool/blob/master/README.md","title":"Putting Maxima on other servers"},{"location":"en/CAS/Optimising_Maxima/#optimisation-results","text":"The following data was gathered by CJS on 23/9/2012 using Maxima 5.28.0 with CLISP 2.49 (2010-07-07) on a Linux server. Running the PHP testing suites we have the following data, where all times are in seconds. The second line, in italics, is time per test. CAS setting Answertest (460 tests) Inputs (257 tests) Linux 517.8672 1.1258 208.85655 0.81267 Mature cache (with Linux) 0.92644 0.00201 13.9798 0.0544 Linux (optimised) 95.16954 0.20689 20.89807 0.08132 Mature cache (when optimised) 0.90839 0.00197 1.48648 0.00578 However, not all tests result in a CAS call. So, to estimate this we subtract the overhead time for a mature cache (which is essentially time for database/PHP processing) from the raw time and divide by the number of CAS calls. We have the following time per CAS call estimates. CAS setting Answertest (438 calls) Inputs (204 calls) Linux 1.180 0.955 Linux (optimised) 0.215 0.095 The optimised version saves a considerable amount of time, representing a significant performance improvement in the critical step of just under a second per call. Well worth the effort (& maintenance) to reward ratio. It is likely that using a compiled version of LISP would result in further considerable savings. However, it isn't entirely clear to me at this point why the input tests with a mature cache using the default Linux connection takes over 13 seconds. This seems anomalous. The following data was gathered by CJS on 10/10/2012 using Maxima 5.28.0 with CLISP 2.49 and SBCL 1.0.58-1.el6, both on the same Linux server. The table gives time in seconds to run the answer tests (462 tests). Maxima version Linux Linux optimised CLISP 2.49 652.3 117.76314 SBCL 1.0.58-1.el6 1570.6 118.39215 With both lisp versions, the optimisation gives a significant performance gain and there is very little difference between the times of the optimised versions.","title":"Optimisation results"},{"location":"en/CAS/Optimising_Maxima/#cas-on-linux","text":"The tests above use Maxima through the PHP interface. To gauge the overhead from the CAS itself we ran the following tests on the same server using Maxima 5.28.0 with CLISP 2.49. model name: Intel(R) Xeon(R) CPU, E3113 @ 3.00GHz Linux Time for 100 cycles (s) Start Maxima and quit 43 Start STACK and quit 124 Process AtAlgEquiv 133 Without optimising Linux, compared to processing one AtAlgEquiv, there is approximately 93% overhead in starting the maxima process. Optimised Linux Time for 100 cycles (s) Start STACK and quit 12 Process AtAlgEquiv 16 Process 100 AtAlgEquiv 104 Process 100 plot 117 The PHP processing time is almost insignificant against the time it takes to initiate and use the CAS. With the optimised Linux we have reduced the loading time, and the loading overhead considerably. A single ATAlgEquiv request takes about 0.04s. Asking for 100 ATAlgEquiv requests in a single session take 0.0092s per request. Asking for 100 plot commands takes 1.05s per plot - which is rather slow (plots undertake a large number of floating point calculations). The overhead times for loading Maxima might be reduced, and smoothed out by using the Maxima pool, see http://github.com/maths/stack_util_maximapool for an implementation of this. The computation times are difficult to reduce. Memory appears to be modest: the optimised Linux takes about 15Mb of memory per process.","title":"CAS on Linux"},{"location":"en/CAS/Optimising_Maxima/#compiling-a-maxima-image","text":"The following was tested in March 2016 on CENTOS. It is for compiling a Maxima image. Really this is mostly for developers. sudo yum install sbcl texinfo rpm-build cd ~ wget http://dl.fedoraproject.org/pub/fedora/linux/updates/22/SRPMS/m/maxima-5.36.1-2.fc22.src.rpm rpm -i maxima-5.36.1-2.fc22.src.rpm cd rpmbuild rpmbuild -ba SPECS/maxima.spec cd RPMS/x86_64 sudo yum remove maxima sudo yum install maxima-runtime-sbcl-5.36.1-2.el6.x86_64.rpm maxima-5.36.1-2.el6.x86_64.rpm The following was tested in March 2016 on Ubuntu 14.04.4 LTS (GNU/Linux 3.13.0-79-generic x86_64) (Trusty). Install dependencies: sudo apt-get -y install clisp texinfo Then run: cd ~ wget -O maxima_source.tar.gz http://sourceforge.net/projects/maxima/files/Maxima-source/5.36.1-source/maxima-5.36.1.tar.gz/download tar zxvf maxima_source.tar.gz cd maxima-5.36.1 ./configure --with-clisp make --silent sudo make install --silent maxima --list-avail","title":"Compiling a Maxima image"},{"location":"en/CAS/Permutations/","text":"Writing a permutation as a product of disjoint cycles Let f= \\left( \\begin{array}{ccccccc} 1 & 2 & 3 & 4 & 5 & 6 & 7 \\\\ 3 & 1 & 5 & 7 & 2 & 6 & 4 \\end{array}\\right) In pure mathematics we might ask students to write a permutation such as this as a product of disjoint cycles. One way to do this is to expect students to write their answer as a list, including the one-cycles. e.g. the permutation (1)(2 \\: 3) is entered as [[1],[2, 3]] . This list can be turned into a set of lists, so that the order of disjoint cycles is not important. However, we need to write each cycle in a particular way. For example, we would want [2, 3, 4] and [3, 4, 2] to be considered as equivalent. One way to do this is to make sure the first element in the list is the minumum element in the list, by cycling through the list. Essentially, we ensure each cycle is re-written in a definite form. The following code does this for one cycle. This function can be used in the question variables. /* Write a cycle with the smallest element at the front. Gives a definite order. */ perm_min_first(ex) := block( if length(ex)<2 then return(ex), if is(first(ex)<apply(min, rest(ex))) then return(ex), return(perm_min_first(append(rest(ex), [first(ex)]))) ); Assume the student's answer ans1 is entered as [[1],[2, 3]] . In the feeback variables make sure each list in ans1 has the smallest element first with the following code. sa1:maplist(perm_min_first, ans1); Then compare setify(sa1) with the teacher's answer (which needs to be processed in a similar way) using algebraic equivalence (quiet). This is a good example of where we do not have a specific data type and corresponding methods for equivalence, but the pre-processing of a student's answer will make sure we can establish the relevant equivalence.","title":"Writing a permutation as a product of disjoint cycles"},{"location":"en/CAS/Permutations/#writing-a-permutation-as-a-product-of-disjoint-cycles","text":"Let f= \\left( \\begin{array}{ccccccc} 1 & 2 & 3 & 4 & 5 & 6 & 7 \\\\ 3 & 1 & 5 & 7 & 2 & 6 & 4 \\end{array}\\right) In pure mathematics we might ask students to write a permutation such as this as a product of disjoint cycles. One way to do this is to expect students to write their answer as a list, including the one-cycles. e.g. the permutation (1)(2 \\: 3) is entered as [[1],[2, 3]] . This list can be turned into a set of lists, so that the order of disjoint cycles is not important. However, we need to write each cycle in a particular way. For example, we would want [2, 3, 4] and [3, 4, 2] to be considered as equivalent. One way to do this is to make sure the first element in the list is the minumum element in the list, by cycling through the list. Essentially, we ensure each cycle is re-written in a definite form. The following code does this for one cycle. This function can be used in the question variables. /* Write a cycle with the smallest element at the front. Gives a definite order. */ perm_min_first(ex) := block( if length(ex)<2 then return(ex), if is(first(ex)<apply(min, rest(ex))) then return(ex), return(perm_min_first(append(rest(ex), [first(ex)]))) ); Assume the student's answer ans1 is entered as [[1],[2, 3]] . In the feeback variables make sure each list in ans1 has the smallest element first with the following code. sa1:maplist(perm_min_first, ans1); Then compare setify(sa1) with the teacher's answer (which needs to be processed in a similar way) using algebraic equivalence (quiet). This is a good example of where we do not have a specific data type and corresponding methods for equivalence, but the pre-processing of a student's answer will make sure we can establish the relevant equivalence.","title":"Writing a permutation as a product of disjoint cycles"},{"location":"en/CAS/Plots/","text":"Plots and graphics in STACK questions. Plots and graphics can be placed into any of the CASText fields. The main way to create plots with the core STACK commands is using Maxima. As of version 4.0, the tags {#...#} provide the possibility to interact with 3rd party scripts. If you have examples of this, please contact the developers. This page is about core supported functionality. plot() In STACK, the plot command has been defined to be a wrapper for Maxima's plot2d command. The wrapper makes sure that an image file is given an appropriate name, file location, and that Maxima returns a URL to the user giving the image. Not all of the features of plot2d are available through plot . Try, for example, the following in the question stem. {@plot(x^2,[x,-1,1])@} You can add a second variable to control the axes. plot(x^2,[x,-1,1],[y,0,2]) However, Maxima will not always allow you to get the axes you want (this is a bug in Maxima). To get many plots in one window, we need to define a list of expressions. plot([x^2,sin(x)],[x,-1,1]) This can be done with Maxima's makelist command (p(k):=x^k,pl:makelist(p(k),k,1,5),plot(pl,[x,-1,1])) Notes: Currently STACK has gnuplot return a basic SVG image. Only a very few of Maxima's plot_options are respected by plot , mainly for security reasons. ( plot calls an external command gnuplot which writes to the server filesystem.) The draw package is currently not supported. To change the size of the image use the Maxima variable size , e.g. plot(x^2,[x,-1,1],[size,250,250]) . By default plots are surrounded by the <div class=\"stack_plot\"> . This puts whitespace around a plot, and places the plot in the centre of the screen. To suppress this div use the option [plottags,false] . Traditional axes Note: this example only works with newer versions of Maxima (and not before 5.31.3). A traditional plot with the axes in the middle can be generated by the following. {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -2, 0.5, 2],[ytics, -2, 0.5, 2])@} Labels The ylabel command rotates its argument through 90 degrees. If you want a horizontal label on the y -axis you will need to use the label command instead. {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [label,[\"y\",-2.5,0.25]])@} Grid The grid is controlled by the maxima command grid2d (newer versions of Maxima only). Compare the following. {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], grid2d)@} {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1])@} Options The following plot options are currently supported by STACK. If you would like to expand the range of options available please contact the developers. [xlabel, ylabel, label, legend, color, style, point_type, nticks, logx, logy, axes, box, plot_realpart, yx_ratio, xtics, ytics, ztic, grid2d], Please see Maxima's documentation for more information on these options. Note that the draw package is currently not supported. Notes on some of the options. The default in Maxima is to include a legend consisting of a string representation of the plot. In STACK this is turned off by default. To switch it back on, use the command [legend, true] . Any other value of the option legend will respect the original command. Alternate text for an image (alt tag) The default alternate text for an image (img alt tag) generated by a plot command such as plot(x^2,[x,-2,2]); is \"STACK auto-generated plot of x^2 with parameters [[x,-2,2]]\". If your question asks students to \"give an algebraic expression which describes this curve\" then you will need to set alternative text which does not include the answer. To set a specific alt tag, pass an equation [alt,\"...\"] as an argument to the plot function. plot(x^2,[x,-2,2],[alt,\"Hello world\"]); If you would like an expression as part of this then try p:sin(x); plot(p,[x,-2,2],[alt,sconcat(\"Here is \",string(p))]); A catalogue of plots The following CASText gives representative examples of the plot2d features supported by STACK's plot command. Cut and paste it into the CASchat script. Beware that these are likely to cause a timeout on the CAS if you try them all at once. <h3>Basic plot</h3> {@plot(x^2,[x,-2,2])@} The following plot tests the option to explicitly test the alt-text. {@plot(x^3,[x,-3,3], [alt,\"What is this function?\"])@} <h3>Multiple graphs, clips the \\(y\\) values</h3> {@plot([x^3,exp(x)],[x,-2,2],[y,-4,4])@} <h3>With and without a grid</h3> {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], grid2d)@} {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1])@} <h3>Discrete plots</h3> Basic discrete plot. {@plot([discrete,[[0,0],[1,1],[0,2]]])@} Combination of discrete plots with normal plots. {@plot([x^2, [discrete,[ [0,0], [1,1], [0,2]]]],[x,-2,2])@} {@plot([[discrete,[[30,7]]], -0.4*x+19],[x,0,60],[y,0,20],[style, points, lines], [color, red, blue],[point_type, asterisk])@} {@plot([[discrete,[[10, 0.6], [20, 0.9], [30, 1.1], [40, 1.3], [50, 1.4]]], 2*%pi*sqrt(l/980)], [l,0,50],[style, points, lines], [color, red, blue],[point_type, asterisk])@} Using different point styles. {@plot([[discrete, [[10, .6], [20, .9], [30, 1.1],[40, 1.3], [50, 1.4]]],[discrete, [[11, .5], [15, .9], [25, 1.2],[40, 1.3], [50, 1.4]]]],[style, points],[point_type,circle,square],[color,black,green])@} <h3>Parametric plots</h3> {@plot([parametric, cos(t), sin(3*t), [t,0,2*%pi]], [nticks, 500])@} <h3>Setting non-trivial options: labels on the axes and legend</h3> {@plot([x^2/(1+x^2),diff(x^2/(1+x^2),x)],[x,-1,2],[legend,true])@} {@plot(x*sin(1/x),[x,-1,2],[xlabel,\"Independent variable\"],[ylabel,\"Dependent variable\"],[legend,\"This is a plot\"])@} <h3>Log scale for y-axis, with red colour</h3> {@plot(exp(3*s),[s, -2, 2],[logy], [color,red])@} <h3>Turn off the box, grid and the axes</h3> Default options {@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100])@} <tt>[axes, false]</tt> {@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100], [axes,false])@} <tt>[box, false]</tt> {@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100], [box,false])@} <h3>Putting the axes in the middle</h3> {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -2, 0.5, 2],[ytics, -2, 0.5, 2])@} Piecewise functions A piecewise function can be defined with if statements. /* Piecewise function at x0, with discontinuity. */ f0:x^3 f1:sin(x) x0:2 pg1:if x<(x0-1/1000) then f0 else if x<x0+1/1000 then 5000 else f1; Notes: Do not use functions, but instead have the conditional statement return an expression . This seems odd, but Maxima's plot command plots expressions not functions. Note the use of a small gap to create a discontinuous graph. If you want a larger gap, that is fine as well. Now use the CASText: {@plot(pg1,[x,(x0-5),(x0+5)],[y,-10,10])@} For a discontinuous function, with the endpoints circled etc. try adding some of the following options. f0:x^3 f1:sin(x) x0:2 pg1:if x<(x0-1/1000) then f0 else if x<x0+1/1000 then 5000 else f1; ps:[style, lines, points, points]; pt:[point_type,circle,circle,bullet]; pc:[color, blue,red,blue]; Now use the CASText: {@plot([pg1, [discrete,[ [x0,ev(f0,x=x0)], [x0,ev(f1,x=x0)]]], [discrete,[ [x0,ev((f0+f1)/2,x=x0)]]] ], [x,(x0-5),(x0+5)], [y,-10,10], ps, pt, pc)@} Graph theory It is possible to plot simple discrete graphs directly using STACK's plot command by building a combination of discrete and line plots. implicit_plot() In Maxima load(\"implicit_plot\"); implicit_plot(x^2+y^2=x^2*y^2+1,[x,-2,2],[y,-2,2]); generates a plot of an implicit function. Maxima's implicit_plot() function does not respect the plot options, and we cannot place the resulting plot files in the correct places. Hence, STACK does not currently support implicit plots. HTML Note also that images can be included as HTML. It is easiest to place your image somewhere on the internet and include a URL in the body of your STACK question. Google charts Note that Google deprecated the API in 2012 with guaranteed availability until April 2015. You can dynamically generate a URL for Google charts and in this way include randomly generated diagrams. An example question is included as test-venn.xml This includes the code in the question variables to create random objects . a : 30 + rand(20); b : 40 + rand(50); anb : 5 + rand(20); aub : a+b-anb; Then, in the question stem we have the HTML which uses this. Note the way the values of variables are inserted here using the {#...#} syntax that outputs raw values instead of LaTeX representations. <img src=\"http://chart.apis.google.com/chart?cht=v&chs=200x100&chd=t:{#a#},{#b#},0,{#anb#},0,0&chdl=A|B\"> This should look like the following, with in this case a=33 , b=65 , a\\cap b=18 . See also Maxima reference topics","title":"Plots and graphics in STACK questions."},{"location":"en/CAS/Plots/#plots-and-graphics-in-stack-questions","text":"Plots and graphics can be placed into any of the CASText fields. The main way to create plots with the core STACK commands is using Maxima. As of version 4.0, the tags {#...#} provide the possibility to interact with 3rd party scripts. If you have examples of this, please contact the developers. This page is about core supported functionality.","title":"Plots and graphics in STACK questions."},{"location":"en/CAS/Plots/#plot","text":"In STACK, the plot command has been defined to be a wrapper for Maxima's plot2d command. The wrapper makes sure that an image file is given an appropriate name, file location, and that Maxima returns a URL to the user giving the image. Not all of the features of plot2d are available through plot . Try, for example, the following in the question stem. {@plot(x^2,[x,-1,1])@} You can add a second variable to control the axes. plot(x^2,[x,-1,1],[y,0,2]) However, Maxima will not always allow you to get the axes you want (this is a bug in Maxima). To get many plots in one window, we need to define a list of expressions. plot([x^2,sin(x)],[x,-1,1]) This can be done with Maxima's makelist command (p(k):=x^k,pl:makelist(p(k),k,1,5),plot(pl,[x,-1,1])) Notes: Currently STACK has gnuplot return a basic SVG image. Only a very few of Maxima's plot_options are respected by plot , mainly for security reasons. ( plot calls an external command gnuplot which writes to the server filesystem.) The draw package is currently not supported. To change the size of the image use the Maxima variable size , e.g. plot(x^2,[x,-1,1],[size,250,250]) . By default plots are surrounded by the <div class=\"stack_plot\"> . This puts whitespace around a plot, and places the plot in the centre of the screen. To suppress this div use the option [plottags,false] .","title":"plot()"},{"location":"en/CAS/Plots/#traditional-axes","text":"Note: this example only works with newer versions of Maxima (and not before 5.31.3). A traditional plot with the axes in the middle can be generated by the following. {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -2, 0.5, 2],[ytics, -2, 0.5, 2])@}","title":"Traditional axes"},{"location":"en/CAS/Plots/#labels","text":"The ylabel command rotates its argument through 90 degrees. If you want a horizontal label on the y -axis you will need to use the label command instead. {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [label,[\"y\",-2.5,0.25]])@}","title":"Labels"},{"location":"en/CAS/Plots/#grid","text":"The grid is controlled by the maxima command grid2d (newer versions of Maxima only). Compare the following. {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], grid2d)@} {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1])@}","title":"Grid"},{"location":"en/CAS/Plots/#options","text":"The following plot options are currently supported by STACK. If you would like to expand the range of options available please contact the developers. [xlabel, ylabel, label, legend, color, style, point_type, nticks, logx, logy, axes, box, plot_realpart, yx_ratio, xtics, ytics, ztic, grid2d], Please see Maxima's documentation for more information on these options. Note that the draw package is currently not supported. Notes on some of the options. The default in Maxima is to include a legend consisting of a string representation of the plot. In STACK this is turned off by default. To switch it back on, use the command [legend, true] . Any other value of the option legend will respect the original command.","title":"Options"},{"location":"en/CAS/Plots/#alttext","text":"The default alternate text for an image (img alt tag) generated by a plot command such as plot(x^2,[x,-2,2]); is \"STACK auto-generated plot of x^2 with parameters [[x,-2,2]]\". If your question asks students to \"give an algebraic expression which describes this curve\" then you will need to set alternative text which does not include the answer. To set a specific alt tag, pass an equation [alt,\"...\"] as an argument to the plot function. plot(x^2,[x,-2,2],[alt,\"Hello world\"]); If you would like an expression as part of this then try p:sin(x); plot(p,[x,-2,2],[alt,sconcat(\"Here is \",string(p))]);","title":"Alternate text for an image (alt tag)"},{"location":"en/CAS/Plots/#a-catalogue-of-plots","text":"The following CASText gives representative examples of the plot2d features supported by STACK's plot command. Cut and paste it into the CASchat script. Beware that these are likely to cause a timeout on the CAS if you try them all at once. <h3>Basic plot</h3> {@plot(x^2,[x,-2,2])@} The following plot tests the option to explicitly test the alt-text. {@plot(x^3,[x,-3,3], [alt,\"What is this function?\"])@} <h3>Multiple graphs, clips the \\(y\\) values</h3> {@plot([x^3,exp(x)],[x,-2,2],[y,-4,4])@} <h3>With and without a grid</h3> {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], grid2d)@} {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1])@} <h3>Discrete plots</h3> Basic discrete plot. {@plot([discrete,[[0,0],[1,1],[0,2]]])@} Combination of discrete plots with normal plots. {@plot([x^2, [discrete,[ [0,0], [1,1], [0,2]]]],[x,-2,2])@} {@plot([[discrete,[[30,7]]], -0.4*x+19],[x,0,60],[y,0,20],[style, points, lines], [color, red, blue],[point_type, asterisk])@} {@plot([[discrete,[[10, 0.6], [20, 0.9], [30, 1.1], [40, 1.3], [50, 1.4]]], 2*%pi*sqrt(l/980)], [l,0,50],[style, points, lines], [color, red, blue],[point_type, asterisk])@} Using different point styles. {@plot([[discrete, [[10, .6], [20, .9], [30, 1.1],[40, 1.3], [50, 1.4]]],[discrete, [[11, .5], [15, .9], [25, 1.2],[40, 1.3], [50, 1.4]]]],[style, points],[point_type,circle,square],[color,black,green])@} <h3>Parametric plots</h3> {@plot([parametric, cos(t), sin(3*t), [t,0,2*%pi]], [nticks, 500])@} <h3>Setting non-trivial options: labels on the axes and legend</h3> {@plot([x^2/(1+x^2),diff(x^2/(1+x^2),x)],[x,-1,2],[legend,true])@} {@plot(x*sin(1/x),[x,-1,2],[xlabel,\"Independent variable\"],[ylabel,\"Dependent variable\"],[legend,\"This is a plot\"])@} <h3>Log scale for y-axis, with red colour</h3> {@plot(exp(3*s),[s, -2, 2],[logy], [color,red])@} <h3>Turn off the box, grid and the axes</h3> Default options {@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100])@} <tt>[axes, false]</tt> {@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100], [axes,false])@} <tt>[box, false]</tt> {@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100], [box,false])@} <h3>Putting the axes in the middle</h3> {@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -2, 0.5, 2],[ytics, -2, 0.5, 2])@}","title":"A catalogue of plots"},{"location":"en/CAS/Plots/#piecewise-functions","text":"A piecewise function can be defined with if statements. /* Piecewise function at x0, with discontinuity. */ f0:x^3 f1:sin(x) x0:2 pg1:if x<(x0-1/1000) then f0 else if x<x0+1/1000 then 5000 else f1; Notes: Do not use functions, but instead have the conditional statement return an expression . This seems odd, but Maxima's plot command plots expressions not functions. Note the use of a small gap to create a discontinuous graph. If you want a larger gap, that is fine as well. Now use the CASText: {@plot(pg1,[x,(x0-5),(x0+5)],[y,-10,10])@} For a discontinuous function, with the endpoints circled etc. try adding some of the following options. f0:x^3 f1:sin(x) x0:2 pg1:if x<(x0-1/1000) then f0 else if x<x0+1/1000 then 5000 else f1; ps:[style, lines, points, points]; pt:[point_type,circle,circle,bullet]; pc:[color, blue,red,blue]; Now use the CASText: {@plot([pg1, [discrete,[ [x0,ev(f0,x=x0)], [x0,ev(f1,x=x0)]]], [discrete,[ [x0,ev((f0+f1)/2,x=x0)]]] ], [x,(x0-5),(x0+5)], [y,-10,10], ps, pt, pc)@}","title":"Piecewise functions"},{"location":"en/CAS/Plots/#graph-theory","text":"It is possible to plot simple discrete graphs directly using STACK's plot command by building a combination of discrete and line plots.","title":"Graph theory"},{"location":"en/CAS/Plots/#implicit","text":"In Maxima load(\"implicit_plot\"); implicit_plot(x^2+y^2=x^2*y^2+1,[x,-2,2],[y,-2,2]); generates a plot of an implicit function. Maxima's implicit_plot() function does not respect the plot options, and we cannot place the resulting plot files in the correct places. Hence, STACK does not currently support implicit plots.","title":"implicit_plot()"},{"location":"en/CAS/Plots/#html","text":"Note also that images can be included as HTML. It is easiest to place your image somewhere on the internet and include a URL in the body of your STACK question.","title":"HTML"},{"location":"en/CAS/Plots/#google","text":"Note that Google deprecated the API in 2012 with guaranteed availability until April 2015. You can dynamically generate a URL for Google charts and in this way include randomly generated diagrams. An example question is included as test-venn.xml This includes the code in the question variables to create random objects . a : 30 + rand(20); b : 40 + rand(50); anb : 5 + rand(20); aub : a+b-anb; Then, in the question stem we have the HTML which uses this. Note the way the values of variables are inserted here using the {#...#} syntax that outputs raw values instead of LaTeX representations. <img src=\"http://chart.apis.google.com/chart?cht=v&chs=200x100&chd=t:{#a#},{#b#},0,{#anb#},0,0&chdl=A|B\"> This should look like the following, with in this case a=33 , b=65 , a\\cap b=18 .","title":"Google charts"},{"location":"en/CAS/Plots/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Predicate_functions/","text":"Predicate functions A predicate function takes an expression and returns Boolean values true or false . The convention in Maxima is to end predicate functions with the letter \"p\". Many predicate functions exist already within Maxima. Some of the more useful to us are listed below. STACK defines an additional range of predicate functions. Some are described here, others are in the relevant specific sections of the documentation, such as numbers . Since establishing mathematical properties are all about predicates they are particularly important for STACK. You can use predicate functions directly in the potential response tree by comparing the result with true using the answer test AlgEquiv. Maxima type predicate functions The following are a core part of Maxima, but there are many others. Notice, predicate functions end in the letter \"p\". Function Predicate floatnump(ex) Determines if ex is a float. numberp(ex) Determines if ex is a number. NOTE numberp returns false if its argument is a symbol, even if the argument is a symbolic number such as \\sqrt{2} , \\pi or i , or declared to be even, odd, integer, rational, irrational, real, imaginary, or complex. This function also does not work when simp:false , so see the dedicated page on numbers . setp(ex) Determines if ex is a set. listp(ex) Determines if ex is a list. matrixp(ex) Determines if ex is a matrix. polynomialp(ex,[v]) Determines if ex is a polynomial in the list of variables v. STACK type predicate functions The following type predicates are defined by STACK. Function Predicate equationp(ex) Determines if ex is an equation. functionp(ex) Determines if ex is a function definition, using the operator := . inequalityp(ex) Determines if ex is an inequality. expressionp(ex) Determines if ex is not a matrix, list, set, equation, function or inequality. polynomialpsimp(ex) Determines if ex is a polynomial in its own variables. simp_numberp(ex) Determines if ex is a number when simp:false . simp_integerp(ex) Determines if ex is an integer when simp:false . real_numberp(ex) Determines if ex is a real number. rational_numberp(ex) Determines if ex is a rational number. lowesttermsp(ex) Determines if a fraction ex is in lowest terms. complex_exponentialp(ex) Determines if ex is written in complex exponential form, r e^{i\\theta} . Needs simp:false . imag_numberp(ex) Determines if ex is a purely imaginary number. STACK general predicates The following are defined by STACK. Function Predicate element_listp(ex,l) true if ex is an element of the list l . (Sets have elementp , but lists don't) all_listp(p,l) true if all elements of l satisfy the predicate p . any_listp(p,l) true if any elements of l satisfy the predicate p . sublist(l,p) Return a list containing only those elements of the list l for which the predicate p is true (The last of these is core Maxima and is not, strictly speaking, a predicate function) STACK other predicate functions Function Predicate expandp(ex) true if ex equals its expanded form. factorp(ex) true if ex equals its factored form. Note, if you would like to know if an expression is factored you need to use the FacForm answer test. See the notes on this for more details. continuousp(ex,v,xp) true if ex is continuous with respect to v at xp (unreliable). diffp(ex,v,xp,[n]) true if ex is (optionally n times) differentiable with respect to v at xp (unreliable). The last two functions rely on Maxima's limit command and hence are not robust. Related functions This is not, strictly speaking, a predicate function. It is common to want to ensure that a student's expression is free of things like \\sqrt{2} , a^{1/2} or 1+\\sqrt[3]{2} in the denominator. This include any complex numbers. rationalized(ex) searches across the whole expression ex and looks in the denominators of any fractions. If the denominators are free of such things the function returns true otherwise the function returns the list of offending expressions. This design allows efficient feedback of the form ``the denominator in your expression should be free of the following: ...\". See also Maxima reference topics","title":"Predicate functions"},{"location":"en/CAS/Predicate_functions/#predicate-functions","text":"A predicate function takes an expression and returns Boolean values true or false . The convention in Maxima is to end predicate functions with the letter \"p\". Many predicate functions exist already within Maxima. Some of the more useful to us are listed below. STACK defines an additional range of predicate functions. Some are described here, others are in the relevant specific sections of the documentation, such as numbers . Since establishing mathematical properties are all about predicates they are particularly important for STACK. You can use predicate functions directly in the potential response tree by comparing the result with true using the answer test AlgEquiv.","title":"Predicate functions"},{"location":"en/CAS/Predicate_functions/#maxima-type-predicate-functions","text":"The following are a core part of Maxima, but there are many others. Notice, predicate functions end in the letter \"p\". Function Predicate floatnump(ex) Determines if ex is a float. numberp(ex) Determines if ex is a number. NOTE numberp returns false if its argument is a symbol, even if the argument is a symbolic number such as \\sqrt{2} , \\pi or i , or declared to be even, odd, integer, rational, irrational, real, imaginary, or complex. This function also does not work when simp:false , so see the dedicated page on numbers . setp(ex) Determines if ex is a set. listp(ex) Determines if ex is a list. matrixp(ex) Determines if ex is a matrix. polynomialp(ex,[v]) Determines if ex is a polynomial in the list of variables v.","title":"Maxima type predicate functions"},{"location":"en/CAS/Predicate_functions/#stack-type-predicate-functions","text":"The following type predicates are defined by STACK. Function Predicate equationp(ex) Determines if ex is an equation. functionp(ex) Determines if ex is a function definition, using the operator := . inequalityp(ex) Determines if ex is an inequality. expressionp(ex) Determines if ex is not a matrix, list, set, equation, function or inequality. polynomialpsimp(ex) Determines if ex is a polynomial in its own variables. simp_numberp(ex) Determines if ex is a number when simp:false . simp_integerp(ex) Determines if ex is an integer when simp:false . real_numberp(ex) Determines if ex is a real number. rational_numberp(ex) Determines if ex is a rational number. lowesttermsp(ex) Determines if a fraction ex is in lowest terms. complex_exponentialp(ex) Determines if ex is written in complex exponential form, r e^{i\\theta} . Needs simp:false . imag_numberp(ex) Determines if ex is a purely imaginary number.","title":"STACK type predicate functions"},{"location":"en/CAS/Predicate_functions/#stack-general-predicates","text":"The following are defined by STACK. Function Predicate element_listp(ex,l) true if ex is an element of the list l . (Sets have elementp , but lists don't) all_listp(p,l) true if all elements of l satisfy the predicate p . any_listp(p,l) true if any elements of l satisfy the predicate p . sublist(l,p) Return a list containing only those elements of the list l for which the predicate p is true (The last of these is core Maxima and is not, strictly speaking, a predicate function)","title":"STACK general predicates"},{"location":"en/CAS/Predicate_functions/#stack-other-predicate-functions","text":"Function Predicate expandp(ex) true if ex equals its expanded form. factorp(ex) true if ex equals its factored form. Note, if you would like to know if an expression is factored you need to use the FacForm answer test. See the notes on this for more details. continuousp(ex,v,xp) true if ex is continuous with respect to v at xp (unreliable). diffp(ex,v,xp,[n]) true if ex is (optionally n times) differentiable with respect to v at xp (unreliable). The last two functions rely on Maxima's limit command and hence are not robust.","title":"STACK other predicate functions"},{"location":"en/CAS/Predicate_functions/#related-functions","text":"This is not, strictly speaking, a predicate function. It is common to want to ensure that a student's expression is free of things like \\sqrt{2} , a^{1/2} or 1+\\sqrt[3]{2} in the denominator. This include any complex numbers. rationalized(ex) searches across the whole expression ex and looks in the denominators of any fractions. If the denominators are free of such things the function returns true otherwise the function returns the list of offending expressions. This design allows efficient feedback of the form ``the denominator in your expression should be free of the following: ...\".","title":"Related functions"},{"location":"en/CAS/Predicate_functions/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Propositional_Logic/","text":"Propositional Logic STACK loads the \"logic\" package from Maxima. Boolean functions Maxima has Boolean operators and , or , and not . These rely on the underlying LISP implementation and as a result the simp:false is ignored. To illustrate the problem, try the following. simp:false$ true and true; x=1 or x=2; The results respectively (of the second two) are true; false; Note, there is no mechanism in Maxima to represent a list of assignments such as x=1 or x=2 , which would be a natural way to express the solution to a quadratic equation. To solve this problem STACK has introduced nounand and nounor which are commutative and associative operators. Students do not need to use nounand and nounor in answers. Any and and or operators occurring in their answers are always automatically converted into these noun forms. Teachers always need to use nounand and nounor in CAS expressions when they want to write non-simplifying expressions. For example, when defining the \"teacher's answer\" they should use the noun forms as appropriate. Teachers often need to use Boolean logic, and so need to consciously separate the difference between these operators and concepts. Note, the answer tests do not convert noun forms to the Maxima forms. Otherwise both x=1 or x=2 and x=1 or x=3 would be evaluated to false and a teacher could not tell that they are different! To replace all nounand (etc) operators and replace them with the Maxima equivalent, use noun_logic_remove(ex) . Operators and notes and This is a lisp function. Teachers should use nounand to prevent evaluation of x=1 and x=0 to false even without simplification. Students type and and this is always converted internally to nounand . or This is a lisp function. Teachers should use nounor to prevent evaluation of x=1 or x=0 to false even without simplification. Students type or and this is always converted internally to nounor . not This is a lisp function. Teachers should use nounnot to prevent evaluation. Students type not and this is always converted internally to nounnot . nand is provided by the logic package, which respects the value of simp . nor is provided by the logic package, which respects the value of simp . xor is provided by the logic package, which respects the value of simp . eq is provided by the logic package, but this input syntax is not supported in STACK. Instead we provide an xnor function. implies is provided by the logic package, which respects the value of simp . Notes There is no support for symbolic logic symbol input currently and students cannot type & , * for and , and similarly + students cannot type for or . There is no existential operator (not that this is propositional logic, but for the record) or an interpretation of '?' as there exits, and there is no universal operator (which some people type in as ! ). The function verb_logic(ex) will remove the noun forms such as nounand and subsitute in the lisp versions, this will enable evaluation of expressions. The function noun_logic(ex) will replace any remaining lisp but beware that any evaluation (even with simp:false ) will evaluate lisp logical expressions. It is best to use noun forms at the outset, e.g. in the question variables, and only use the lisp forms when calculating, e.g. to evaluate in the PRT. Answer tests The answer tests protect the logical operators. This behaviour is to prevent evaluation of expressions such as x=1 as a boolean predicate fuction. I.e. the default behaviour is to give priority to the assumption an arbitary expression is an algebraic expression, or a set of equations, inequalities etc. The other answer tests (e.g. algebraic equivalence) will do there best. The answer test PropLogic replaces all noun logical expressions with the Maxima versions, and then tests two expressions using the function logic_equiv from Maxima's logic package. This answer test does not support sets, lists, etc. The value of the student's answer will always have nounand etc. inserted. Before you manipulate the student's answer, e.g. with the logic package functions, you will need to apply noun_logic_remove(ex) . Truth tables STACK provides various functions for creating and dealing with tables . truth_table(ex) returns the true table of the expression ex . The function will throw an error if the number of variables exceeds 5. The first row of the table is the headings, consisting of a list of variables, and the expression itself. See the documentation on tables for more functionality.","title":"Propositional Logic"},{"location":"en/CAS/Propositional_Logic/#propositional-logic","text":"STACK loads the \"logic\" package from Maxima.","title":"Propositional Logic"},{"location":"en/CAS/Propositional_Logic/#boolean-functions","text":"Maxima has Boolean operators and , or , and not . These rely on the underlying LISP implementation and as a result the simp:false is ignored. To illustrate the problem, try the following. simp:false$ true and true; x=1 or x=2; The results respectively (of the second two) are true; false; Note, there is no mechanism in Maxima to represent a list of assignments such as x=1 or x=2 , which would be a natural way to express the solution to a quadratic equation. To solve this problem STACK has introduced nounand and nounor which are commutative and associative operators. Students do not need to use nounand and nounor in answers. Any and and or operators occurring in their answers are always automatically converted into these noun forms. Teachers always need to use nounand and nounor in CAS expressions when they want to write non-simplifying expressions. For example, when defining the \"teacher's answer\" they should use the noun forms as appropriate. Teachers often need to use Boolean logic, and so need to consciously separate the difference between these operators and concepts. Note, the answer tests do not convert noun forms to the Maxima forms. Otherwise both x=1 or x=2 and x=1 or x=3 would be evaluated to false and a teacher could not tell that they are different! To replace all nounand (etc) operators and replace them with the Maxima equivalent, use noun_logic_remove(ex) .","title":"Boolean functions"},{"location":"en/CAS/Propositional_Logic/#operators-and-notes","text":"and This is a lisp function. Teachers should use nounand to prevent evaluation of x=1 and x=0 to false even without simplification. Students type and and this is always converted internally to nounand . or This is a lisp function. Teachers should use nounor to prevent evaluation of x=1 or x=0 to false even without simplification. Students type or and this is always converted internally to nounor . not This is a lisp function. Teachers should use nounnot to prevent evaluation. Students type not and this is always converted internally to nounnot . nand is provided by the logic package, which respects the value of simp . nor is provided by the logic package, which respects the value of simp . xor is provided by the logic package, which respects the value of simp . eq is provided by the logic package, but this input syntax is not supported in STACK. Instead we provide an xnor function. implies is provided by the logic package, which respects the value of simp . Notes There is no support for symbolic logic symbol input currently and students cannot type & , * for and , and similarly + students cannot type for or . There is no existential operator (not that this is propositional logic, but for the record) or an interpretation of '?' as there exits, and there is no universal operator (which some people type in as ! ). The function verb_logic(ex) will remove the noun forms such as nounand and subsitute in the lisp versions, this will enable evaluation of expressions. The function noun_logic(ex) will replace any remaining lisp but beware that any evaluation (even with simp:false ) will evaluate lisp logical expressions. It is best to use noun forms at the outset, e.g. in the question variables, and only use the lisp forms when calculating, e.g. to evaluate in the PRT.","title":"Operators and notes"},{"location":"en/CAS/Propositional_Logic/#answer-tests","text":"The answer tests protect the logical operators. This behaviour is to prevent evaluation of expressions such as x=1 as a boolean predicate fuction. I.e. the default behaviour is to give priority to the assumption an arbitary expression is an algebraic expression, or a set of equations, inequalities etc. The other answer tests (e.g. algebraic equivalence) will do there best. The answer test PropLogic replaces all noun logical expressions with the Maxima versions, and then tests two expressions using the function logic_equiv from Maxima's logic package. This answer test does not support sets, lists, etc. The value of the student's answer will always have nounand etc. inserted. Before you manipulate the student's answer, e.g. with the logic package functions, you will need to apply noun_logic_remove(ex) .","title":"Answer tests"},{"location":"en/CAS/Propositional_Logic/#truth-tables","text":"STACK provides various functions for creating and dealing with tables . truth_table(ex) returns the true table of the expression ex . The function will throw an error if the number of variables exceeds 5. The first row of the table is the headings, consisting of a list of variables, and the expression itself. See the documentation on tables for more functionality.","title":"Truth tables"},{"location":"en/CAS/Random/","text":"Random objects STACK can generate structured random objects. STACK provides a Maxima function rand() which can be used in the question and answer variables. STACK creates pseudo-random numbers from a definite seed. This ensures that when a particular student returns they see the same variant of the question. (Note to site maintainers: if you upgrade your Maxima version mid-way through an academic cycle, then there is no gurantee that the random numbers will remain the same. It is unlikley Maxima will change its random number generation between versions, but if it important to you please check first!) For the purposes of learning and teaching, we do not need an algorithm which is statistically perfect. We are much more interested in simplicity, efficiency and reproducibility across platforms. Hence, we adopt a linear recurrence method of generating pseudo-random numbers. rand() STACK provides its own function rand() . rand(n) generates an integer between 0 and n-1 . rand(n.0) generates a floating point number between 0 and n . It is probably more useful to use something like a=float(rand(1000)/1000) to obtain an accurate number of decimal places. An alternative is to use the Maxima function round() rand([a,b,...,z]) makes a random selection from a list. rand(matrix(..)) applies rand to each element of the matrix. It is probably much better not to use conditional statements when creating random objects. For example, if you would like to create a random small prime number, try p : rand([2,3,5,7,11,13,17,19]); This might not appear to be the neatest mathematical solution, but it is probably the most reliable. Usually we need to combine rand() with some code to generate objects. For example, if you want a matrix with integer elements in the range -5..5 you need something like A:matrix([5,5],[5,5])-rand(matrix([11,11],[11,11])); There are also Maxima's random functions. For example, to create a random list use random_permutation . Sets STACK provides the following functions for random generation of sets. random_subset(u) returns a random subset of u . random_subset_n(u,n) returns a random subset of u with n elements (if possible). random_ne_subset(u) returns a non-empty random subset of u . rand_with_step(lower,upper,step) Returns a random number from the set {lower, lower+step, lower+2*step, ... , final} . The examples below explain behaviour the best. Examples: rand_with_step(-5,5,1) returns a random number from the set \\{-5,-4,-3,-2,-1,0,1,2,3,4,5\\} . rand_with_step(-5,5,2) returns a random number from the set \\{-5,-3,-1,1,3,5\\} . rand_with_step(-5,3,3) returns a random number from the set \\{-5,-2,1\\} . The function rand_range(lower,upper,step) does the same thing. rand_with_prohib(lower,upper,list) Returns a random integer from the set [lower,upper] such that it cannot be any value in list . This list can include values which are also random variables, for example, generated by rand_with_step . Examples: rand_with_prohib(-5,5,[0]) returns a random number from the set \\{-5,-4,-3,-2,-1,1,2,3,4,5\\} . rand_with_prohib(-5,5,[-1,0,1,sqrt(pi)]) returns a random number from the set \\{-5,-4,-3,-2,2,3,4,5\\} . rand_with_prohib(-5,3,[-5/2,a]) returns a random number from the set \\{-5,-4,-3,-2,-1,0,1,2,3\\}\\backslash\\{a\\} . This can be used with matrices, to generate a matrix with non-zero entries for example. The unnamed function in this example ignores its arguments. matrixmap(lambda([ex],rand_with_prohib(-5,5,[0])),zeromatrix(5,5)); rand_selection(ex, n) Returns a list containing a random selection of n different items from the list ex . If ex contains duplicates, then the result may also contain duplicates. Generating random polynomials Here is an example which generates a random polynomial, of degree 5, with coefficients between 0 and 6. apply(\"+\",makelist(rand(7)*x^(k-1),k,6)); Generating random expressions which needs to be \"gathered and sorted\" It is relatively common to want to be able to generate random expressions which need to be \"gathered and sorted\". For example in 2y-y+3y+1 we need to collect together the y terms. simp:false; p:apply(\"+\",makelist(ev(rand_with_prohib(-5,5,[0])*y^rand(2),simp), ev(rand(6)+2,simp))); p:unary_minus_sort(p); Now, the output from the first expression will be a random expression in constants and y variables. The second line tidies up the unary minus. For more details of this, see simplification . 4*y+5*y+(-2*y) 4*y+5*y-2*y Random objects with corresponding information It is often necessary to generate a random object with a number of separate aspects to it. For example, if you have scientific data and you need to include this in a question. t:rand(5)+3; idx:rand(3)+1; /* Array indexes in Maxima start at 1, rand(n) returns 0,...,n-1. */ l1:[\"Mercury\",\"Earth\",\"Mars\"]; l2:[3.61,9.8,3.75]; p:l1[idx]; ta:t*l2[idx]/(4*%pi^2); The question text can then be A pendulum is located on {@p@}. What length should the pendulum have in order to have a period of {@t@}s? This indexing with the variable idx is quite robust. Note that indexes in Maxima start at 1 , whereas rand(n) could return zero. Random objects satisfying a condition It is often necessary to create random objects which satisfy constraints. For example, if you want to randomly generate a \"small\" prime number, just select one from a list. p:rand([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]); It is much better to (i) enumerate specific cases or (ii) reverse engineer the question to avoid conditional statements than randomly generate examples and \"hope\" one pops up eventually. The reason is that the pseudo-random number generator will repeat the process from a seed every time the question is generated! If you put in loops, this could risk delays and time-outs etc. The following is NOT RECOMMENDED, but enough people have insisted on doing it to document this approach. If you must (and you risk an infinite loop of course....) you can use Maxima's for command. A simple example is as follows. q:1; for k while not(is(primep(q))) do block(q:rand(98)+1); See also Maxima reference topics","title":"Random objects"},{"location":"en/CAS/Random/#random-objects","text":"STACK can generate structured random objects. STACK provides a Maxima function rand() which can be used in the question and answer variables. STACK creates pseudo-random numbers from a definite seed. This ensures that when a particular student returns they see the same variant of the question. (Note to site maintainers: if you upgrade your Maxima version mid-way through an academic cycle, then there is no gurantee that the random numbers will remain the same. It is unlikley Maxima will change its random number generation between versions, but if it important to you please check first!) For the purposes of learning and teaching, we do not need an algorithm which is statistically perfect. We are much more interested in simplicity, efficiency and reproducibility across platforms. Hence, we adopt a linear recurrence method of generating pseudo-random numbers.","title":"Random objects"},{"location":"en/CAS/Random/#rand","text":"STACK provides its own function rand() . rand(n) generates an integer between 0 and n-1 . rand(n.0) generates a floating point number between 0 and n . It is probably more useful to use something like a=float(rand(1000)/1000) to obtain an accurate number of decimal places. An alternative is to use the Maxima function round() rand([a,b,...,z]) makes a random selection from a list. rand(matrix(..)) applies rand to each element of the matrix. It is probably much better not to use conditional statements when creating random objects. For example, if you would like to create a random small prime number, try p : rand([2,3,5,7,11,13,17,19]); This might not appear to be the neatest mathematical solution, but it is probably the most reliable. Usually we need to combine rand() with some code to generate objects. For example, if you want a matrix with integer elements in the range -5..5 you need something like A:matrix([5,5],[5,5])-rand(matrix([11,11],[11,11])); There are also Maxima's random functions. For example, to create a random list use random_permutation .","title":"rand()"},{"location":"en/CAS/Random/#sets","text":"STACK provides the following functions for random generation of sets. random_subset(u) returns a random subset of u . random_subset_n(u,n) returns a random subset of u with n elements (if possible). random_ne_subset(u) returns a non-empty random subset of u .","title":"Sets"},{"location":"en/CAS/Random/#rand_with_steplowerupperstep","text":"Returns a random number from the set {lower, lower+step, lower+2*step, ... , final} . The examples below explain behaviour the best. Examples: rand_with_step(-5,5,1) returns a random number from the set \\{-5,-4,-3,-2,-1,0,1,2,3,4,5\\} . rand_with_step(-5,5,2) returns a random number from the set \\{-5,-3,-1,1,3,5\\} . rand_with_step(-5,3,3) returns a random number from the set \\{-5,-2,1\\} . The function rand_range(lower,upper,step) does the same thing.","title":"rand_with_step(lower,upper,step)"},{"location":"en/CAS/Random/#rand_with_prohiblowerupperlist","text":"Returns a random integer from the set [lower,upper] such that it cannot be any value in list . This list can include values which are also random variables, for example, generated by rand_with_step . Examples: rand_with_prohib(-5,5,[0]) returns a random number from the set \\{-5,-4,-3,-2,-1,1,2,3,4,5\\} . rand_with_prohib(-5,5,[-1,0,1,sqrt(pi)]) returns a random number from the set \\{-5,-4,-3,-2,2,3,4,5\\} . rand_with_prohib(-5,3,[-5/2,a]) returns a random number from the set \\{-5,-4,-3,-2,-1,0,1,2,3\\}\\backslash\\{a\\} . This can be used with matrices, to generate a matrix with non-zero entries for example. The unnamed function in this example ignores its arguments. matrixmap(lambda([ex],rand_with_prohib(-5,5,[0])),zeromatrix(5,5));","title":"rand_with_prohib(lower,upper,list)"},{"location":"en/CAS/Random/#rand_selectionex-n","text":"Returns a list containing a random selection of n different items from the list ex . If ex contains duplicates, then the result may also contain duplicates.","title":"rand_selection(ex, n)"},{"location":"en/CAS/Random/#generating-random-polynomials","text":"Here is an example which generates a random polynomial, of degree 5, with coefficients between 0 and 6. apply(\"+\",makelist(rand(7)*x^(k-1),k,6));","title":"Generating random polynomials"},{"location":"en/CAS/Random/#generating-random-expressions-which-needs-to-be-gathered-and-sorted","text":"It is relatively common to want to be able to generate random expressions which need to be \"gathered and sorted\". For example in 2y-y+3y+1 we need to collect together the y terms. simp:false; p:apply(\"+\",makelist(ev(rand_with_prohib(-5,5,[0])*y^rand(2),simp), ev(rand(6)+2,simp))); p:unary_minus_sort(p); Now, the output from the first expression will be a random expression in constants and y variables. The second line tidies up the unary minus. For more details of this, see simplification . 4*y+5*y+(-2*y) 4*y+5*y-2*y","title":"Generating random expressions which needs to be \"gathered and sorted\""},{"location":"en/CAS/Random/#random-objects-with-corresponding-information","text":"It is often necessary to generate a random object with a number of separate aspects to it. For example, if you have scientific data and you need to include this in a question. t:rand(5)+3; idx:rand(3)+1; /* Array indexes in Maxima start at 1, rand(n) returns 0,...,n-1. */ l1:[\"Mercury\",\"Earth\",\"Mars\"]; l2:[3.61,9.8,3.75]; p:l1[idx]; ta:t*l2[idx]/(4*%pi^2); The question text can then be A pendulum is located on {@p@}. What length should the pendulum have in order to have a period of {@t@}s? This indexing with the variable idx is quite robust. Note that indexes in Maxima start at 1 , whereas rand(n) could return zero.","title":"Random objects with corresponding information"},{"location":"en/CAS/Random/#random-objects-satisfying-a-condition","text":"It is often necessary to create random objects which satisfy constraints. For example, if you want to randomly generate a \"small\" prime number, just select one from a list. p:rand([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]); It is much better to (i) enumerate specific cases or (ii) reverse engineer the question to avoid conditional statements than randomly generate examples and \"hope\" one pops up eventually. The reason is that the pseudo-random number generator will repeat the process from a seed every time the question is generated! If you put in loops, this could risk delays and time-outs etc. The following is NOT RECOMMENDED, but enough people have insisted on doing it to document this approach. If you must (and you risk an infinite loop of course....) you can use Maxima's for command. A simple example is as follows. q:1; for k while not(is(primep(q))) do block(q:rand(98)+1);","title":"Random objects satisfying a condition"},{"location":"en/CAS/Random/#see-also","text":"Maxima reference topics","title":"See also"},{"location":"en/CAS/Real_Intervals/","text":"Real intervals and sets of real numbers STACK has a simple system for representing and dealing with real intervals and sets of real numbers. Simple real intervals may be represented by the inert functions oo(a,b) , oc(a,b) , co(a,b) , and cc(a,b) . Here the character o stands for open end point, and c for a closed end point. So oc(-1,3) is the interval \\{ x\\in\\mathbb{R} | -1 < x \\mbox{ and } x\\leq 3.\\} , and is displayed as (-1,3] with mismatching brackets in the tradition of UK mathematics. The Maxima function union requires its arguments to be sets, and intervals are not sets. You must use the %union function (from the package to_poly_solve ) to join simple intervals and combine them with discrete sets. E.g. %union(oo(-2,-1),oo(1,2)) Note that the %union function sorts its arguments (unless you have simp:false ), and sort puts simple intervals of the form oo(-inf,a) out of order at the right hand end. So, some sorting functions return lists of intervals, not %union as you might expect, to preserve the order. As arguments, the %union command can take both simple intervals and sets of discrete real numbers, e.g. %union(oo(-inf,0),{1},oo(2,3)); Similarly, STACK provides %intersection to represent an intersection of intervals (which the package to_poly_solve does not have). Predicate functions intervalp(ex) returns true if ex is a single simple interval. Does not check ex is variable free, so oo(a,b) is a simple interval. {} , none , all and singleton sets are not considered \"intervals\" by this predicate, use realsetp instead. The primary purpose of this predicate is to detect intervals oo , oc etc within code. inintervalp(x, I) returns true if x is an element of I and false otherwise. x must be a real number. I must be a set of numbers or a simple interval of the form oo(a,b) etc. trivialintervalp(ex) returns true if ex is a trivial interval such as (a,a) . unionp(ex) is the operator a union? intersectionp(ex) is the operator an intersection? realsetp(ex) return true if ex represents a definite set of real numbers, e.g. a union of intervals. All end points and set elements must be real numbers, so oo(a,b) is not a realset . If you want to permit variables in sets and as endpoints use realset_soft_p instead. interval_disjointp(I1, I2) establishes if two simple intervals are disjoint. interval_subsetp(S1, S2) is the real set S1 contained within the real set S2 ? interval_containsp(I1, S2) is the simple interval I1 an explicit sub-interval within the real set S2 ? No proper subsets here, but this is useful for checking which intervals a student has. Basic manipulation of intervals. interval_simple_union(I1, I2) join two simple intervals. interval_sort(I) takes a list of intervals and sorts them into ascending order by their left hand ends. Returns a list. interval_connect(S) Given a %union of intervals, checks whether any intervals are connected, and if so, joins them up and returns the ammended union. interval_tidy(S) Given a union of sets, returns the \"canonical form\" of this union. interval_intersect(S1, S2) intersect two two simple intervals or two real sets, e.g. %union sets. interval_intersect_list(ex) intersect a list of real sets. interval_complement(ex) take a %union of intervals and return its complement. interval_set_complement(ex) Take a set of real numbers, and return the %union of intervals not containing these numbers. interval_count_components(ex) Take a set of real numbers, and return the number of separate connected components in the whole expression. Simple intervals count as one, and sets count as number number of distinct points in the set. Trivial intervals, such as the empty set, count for 0. No simplification is done, so you might need to use interval_tidy(ex) first if you don't want to count just the representation. Natural domains, and real sets with a variable. The function natural_domain(ex) returns the natural domain of a function represented by the expression ex , in the form of the inert function realset . For example natural_domain(1/x) gives realset(x,%union(oo(0,inf),oo(\u2212inf,0))); The inert function realset allows a variable to be passed with a set of numbers. This is mostly for displaying natural domains in a sensible way. For example, where the complement of the intervals is a discrete set, the realset is displayed as x\\not\\in \\cdots rather than x \\in \\cdots which is normally much easier to read and understand. realset(x,%union(oo(0,inf),oo(-inf,0))); is displayed as x \\not\\in\\{0\\} . Validation of students' answers Students must simply type union (not %union ) etc. Validation of students' answer has a very loose sense of \"type\". When we are checking the \"type\" of answer, if the teacher's answer is a \"set\" then the student's answer should also be a \"set\" (see setp ). If the teacher's answer is acually a set in the context where an interval should be considered valid, then the teacher's answer should be the inert function %union , e.g. %union({1,2,3}) , to bump the type of the teacher's answer away from set and into realset . Validation does some simple checks, so that mal-formed intervals such as oo(1) and oo(4,3) are rejected as invalid. Assessment of students' answers The algebraic equivalence answer test will apply interval_tidy as needed and compare the results. Currently the feedback in this situation provided by this answer test is minimal.","title":"Real intervals and sets of real numbers"},{"location":"en/CAS/Real_Intervals/#real-intervals-and-sets-of-real-numbers","text":"STACK has a simple system for representing and dealing with real intervals and sets of real numbers. Simple real intervals may be represented by the inert functions oo(a,b) , oc(a,b) , co(a,b) , and cc(a,b) . Here the character o stands for open end point, and c for a closed end point. So oc(-1,3) is the interval \\{ x\\in\\mathbb{R} | -1 < x \\mbox{ and } x\\leq 3.\\} , and is displayed as (-1,3] with mismatching brackets in the tradition of UK mathematics. The Maxima function union requires its arguments to be sets, and intervals are not sets. You must use the %union function (from the package to_poly_solve ) to join simple intervals and combine them with discrete sets. E.g. %union(oo(-2,-1),oo(1,2)) Note that the %union function sorts its arguments (unless you have simp:false ), and sort puts simple intervals of the form oo(-inf,a) out of order at the right hand end. So, some sorting functions return lists of intervals, not %union as you might expect, to preserve the order. As arguments, the %union command can take both simple intervals and sets of discrete real numbers, e.g. %union(oo(-inf,0),{1},oo(2,3)); Similarly, STACK provides %intersection to represent an intersection of intervals (which the package to_poly_solve does not have). Predicate functions intervalp(ex) returns true if ex is a single simple interval. Does not check ex is variable free, so oo(a,b) is a simple interval. {} , none , all and singleton sets are not considered \"intervals\" by this predicate, use realsetp instead. The primary purpose of this predicate is to detect intervals oo , oc etc within code. inintervalp(x, I) returns true if x is an element of I and false otherwise. x must be a real number. I must be a set of numbers or a simple interval of the form oo(a,b) etc. trivialintervalp(ex) returns true if ex is a trivial interval such as (a,a) . unionp(ex) is the operator a union? intersectionp(ex) is the operator an intersection? realsetp(ex) return true if ex represents a definite set of real numbers, e.g. a union of intervals. All end points and set elements must be real numbers, so oo(a,b) is not a realset . If you want to permit variables in sets and as endpoints use realset_soft_p instead. interval_disjointp(I1, I2) establishes if two simple intervals are disjoint. interval_subsetp(S1, S2) is the real set S1 contained within the real set S2 ? interval_containsp(I1, S2) is the simple interval I1 an explicit sub-interval within the real set S2 ? No proper subsets here, but this is useful for checking which intervals a student has. Basic manipulation of intervals. interval_simple_union(I1, I2) join two simple intervals. interval_sort(I) takes a list of intervals and sorts them into ascending order by their left hand ends. Returns a list. interval_connect(S) Given a %union of intervals, checks whether any intervals are connected, and if so, joins them up and returns the ammended union. interval_tidy(S) Given a union of sets, returns the \"canonical form\" of this union. interval_intersect(S1, S2) intersect two two simple intervals or two real sets, e.g. %union sets. interval_intersect_list(ex) intersect a list of real sets. interval_complement(ex) take a %union of intervals and return its complement. interval_set_complement(ex) Take a set of real numbers, and return the %union of intervals not containing these numbers. interval_count_components(ex) Take a set of real numbers, and return the number of separate connected components in the whole expression. Simple intervals count as one, and sets count as number number of distinct points in the set. Trivial intervals, such as the empty set, count for 0. No simplification is done, so you might need to use interval_tidy(ex) first if you don't want to count just the representation.","title":"Real intervals and sets of real numbers"},{"location":"en/CAS/Real_Intervals/#natural-domains-and-real-sets-with-a-variable","text":"The function natural_domain(ex) returns the natural domain of a function represented by the expression ex , in the form of the inert function realset . For example natural_domain(1/x) gives realset(x,%union(oo(0,inf),oo(\u2212inf,0))); The inert function realset allows a variable to be passed with a set of numbers. This is mostly for displaying natural domains in a sensible way. For example, where the complement of the intervals is a discrete set, the realset is displayed as x\\not\\in \\cdots rather than x \\in \\cdots which is normally much easier to read and understand. realset(x,%union(oo(0,inf),oo(-inf,0))); is displayed as x \\not\\in\\{0\\} .","title":"Natural domains, and real sets with a variable."},{"location":"en/CAS/Real_Intervals/#validation-of-students-answers","text":"Students must simply type union (not %union ) etc. Validation of students' answer has a very loose sense of \"type\". When we are checking the \"type\" of answer, if the teacher's answer is a \"set\" then the student's answer should also be a \"set\" (see setp ). If the teacher's answer is acually a set in the context where an interval should be considered valid, then the teacher's answer should be the inert function %union , e.g. %union({1,2,3}) , to bump the type of the teacher's answer away from set and into realset . Validation does some simple checks, so that mal-formed intervals such as oo(1) and oo(4,3) are rejected as invalid.","title":"Validation of students' answers"},{"location":"en/CAS/Real_Intervals/#assessment-of-students-answers","text":"The algebraic equivalence answer test will apply interval_tidy as needed and compare the results. Currently the feedback in this situation provided by this answer test is minimal.","title":"Assessment of students' answers"},{"location":"en/CAS/STACK-Maxima_sandbox/","text":"STACK Sandbox It is very useful when authoring questions to be able to test out Maxima code in the same environment in which STACK uses Maxima . That is to say, to run a desktop version of Maxima with the local settings and STACK specific functions loaded. This is also used in reporting and analysis of students' responses. To do this you will need to load your local settings, and also the libraries of Maxima functions specific to STACK. Setup Maxima and wxMaxima Install Maxima (http://maxima.sourceforge.net/) and wxMaxima (https://wxmaxima-developers.github.io/wxmaxima/). STACK - Maxima sandbox (without access to a server) If you don't have access to a STACK server then you will need to download the files. Download all the STACK files from GitHub (git or as a .zip). E.g. try https://github.com/maths/moodle-qtype_stack/archive/master.zip The only files you need are in .../stack/maxima/ In this directory open the file sandbox.wmx with wxMaxima and edit it to your needs. STACK - Maxima sandbox (with access to a server) It is very useful when authoring questions to be able to test out Maxima code in the same environment in which STACK uses Maxima . That is to say, to run a desktop version of Maxima with the local settings and STACK specific functions loaded. This is also used in reporting and analysis of students' responses. To do this you will need to load your local settings, and also the libraries of Maxima functions specific to STACK. For example, many of the functions are defined in stack/stack/maxima/stackmaxima.mac Hence, on a typical Moodle installation you will find the file at /moodle/question/type/stack/stack/maxima/stackmaxima.mac The first part of the instructions work on a Microsoft platform, but instructions for Linux can also be found below. Please note that having a properly set up STACK - Maxima sandbox is not equivalent to running an optimized Maxima. Setting Maxima's Path Setting the path in Maxima is a problem on a Microsoft platform. Maxima does not deal well with spaces in filenames, for example. The simplest solution is to create a directory C:/maxima and add this to Maxima's path. Place all Maxima files in this directory, so they will then be seen by Maxima. For Maxima 5.26.0, edit, or create, the file C:/Program Files/Maxima-5.26.0/share/maxima/5.26.0/share/maxima-init.mac ensure it contains the following lines, possibly modified to reflect the directory you have chosen file_search_maxima:append([sconcat(\"C:/maxima/###.{mac,mc}\")],file_search_maxima)$ file_search_lisp:append([sconcat(\"C:/maxima/###.{lisp}\")],file_search_lisp)$ Other versions of Maxima are similar. Loading STACK's functions STACK automatically adjusts Maxima's path and loads a number of files. These define STACK specific functions and reflect your local settings. To do this, STACK loads a file which is automatically created at install time. This is placed within the moodledata directory, typically as moodledata/stack/maximalocal.mac For example, the value might look like C:/xampp/data/moodledata/stack/maximalocal.mac You need to load this file into Maxima to recreate the setup of Maxima as seen by STACK. Assuming you have created a directory C:/maxima as suggested above and added it to Maxima's path, the simplest way to do this is to create a file C:/maxima/sm.mac and into this file add the line load(\"C:/xampp/data/moodledata/stack/maximalocal.mac\"); To load this into Maxima simply type load(sm); at Maxima's command line. The time spent setting the path in this way is soon repaid in not having to type the following line each time you want the sandbox. Your path to maximalocal.mac might be significantly longer....! You will know the file is loaded correctly if you see a message such as the following (%i1) load(sm); Loading maxima-grobner $Revision: 1.6 $ $Date: 2009-06-02 07:49:49 $ [Stack-Maxima started V3.0, 13/2/12] (%o0) \"C:/maxima/sm.mac\" You can test this out by using, for example, the rand() function. rand(matrix([5,5],[5,5])); to create a pseudo-random matrix. If rand returns unevaluated, then you have not loaded the libraries correctly. Linux instructions In a terminal window, execute the following commands, e.g., in your home folder: mkdir stack-maxima cd stack-maxima pico maxima-init.mac Put the following three lines into maxima-init.mac: file_search_maxima:append([sconcat(\"<path to your home folder>/stack-maxima/###.{mac,mc}\")],file_search_maxima)$ file_search_lisp:append([sconcat(\"<path to your home folder>/stack-maxima/###.{lisp}\")],file_search_lisp)$ load(\"<path to your moodledata>/stack/maximalocal.mac\"); Note that the paths above need to be completed. The following command is useful for finding the path to maximalocal.mac: locate maximalocal.mac Using the answer tests Please make sure you read the page on answer tests first. Not all the answer tests can be called directly from Maxima. For example, the string match uses the PHP functions. Informally, the answer tests have the following syntax [Errors, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt) actually the results returned in Maxima are [Valid, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt) Errors are echoed to the console, and are trapped by another mechanism. The valid field is used to render an attempt invalid, not wrong. To call an answer test directly from Maxima, you need to use the correct function name. For example, to call the algebraic equivalence (AlgEquiv) answer test you need to use ATAlgEquiv(x^2+2,x*(x+1)); The values returned are actually in the form [true,false,\"\",\"\"] Feedback is returned in the form of a language tag which is translated later. For example, (%i1) ATInt(x^2,x*(x+1),x); (%o1) [true,false,\"ATInt_generic. \", \"stack_trans('ATInt_generic' , !quot!\\\\[2\\\\,x+1\\\\]!quot! , !quot!\\\\(x\\\\)!quot! , !quot!\\\\[2\\\\,x\\\\]!quot! ); \"] The chart below shows the answer test, whether it is defined in Maxima or PHP and the options it expects. Some of the tests are called \"hybrid\". These require both significant Maxima and PHP code and cannot be easily reproduced in the sandbox. Answer test Maxima command name Maxima/PHP Option ? AlgEquiv ATAlgEquiv Maxima AlgEquivNouns ATAlgEquivNouns Maxima EqualComAss ATEqualComAss Maxima CasEqual ATCasEqual Maxima SameType ATSameType Maxima SubstEquiv ATSubstEquiv Maxima SysEquiv ATSysEquiv Maxima Sets ATSets Maxima Expanded ATExpanded Maxima FacForm ATFacForm Maxima Variable SingleFrac ATSingleFrac Maxima PartFrac ATPartFrac Maxima Variable CompSquare ATCompSquare Maxima Variable PopLogic ATPopLogic Maxima Equiv ATEquiv Maxima EquivFirst ATEquivFirst Maxima Num-GT ATGT Maxima Num-GTE ATGTE Maxima NumSigFigs ATNumSigFigs Maxima Number sig figs NumAbsolute Hybrid NumRelative Hybrid NumDecPlaces Hybrid NumDecPlacesWrong Hybrid LowestTerms ATLowestTerms Maxima UnitsSigFigs ATUnitsSigFigs Maxima Shares code with NumSigFigs UnitsSigFigs ATUnitsStrictSigFigs Maxima Shares code with NumSigFigs UnitsAbsolute ATUnitsAbsolute Maxima Shares code with NumAbsolute UnitsAbsolute ATUnitsStrictAbsolute Maxima Shares code with NumAbsolute UnitsRelative ATUnitsRelative Maxima Shares code with NumRelative UnitsRelative ATUnitsStrictRelative Maxima Shares code with NumRelative Diff ATDiff Maxima Variable Int ATInt Maxima Variable String PHP StringSloppy PHP SRegExp ATSRegExp Maxima If you just want to decide if two expressions are considered to be algebraically equivalent, then use algebraic_equivalence(ex1,ex2); This is the function the answer test ATAlgEquiv uses without all the wrapper of a full answer test. Where is the Maxima code? All the maxima code is kept in ...\\moodle\\question\\type\\stack\\stack\\maxima The bulk of the functions are defined in ...\\moodle\\question\\type\\stack\\stack\\maxima\\stackmaxima.mac ...\\moodle\\question\\type\\stack\\stack\\maxima\\assessment.mac Useful tips STACK turns off the traditional two-dimensional display, which we can turn back on with the following command. display2d:true;","title":"STACK Sandbox"},{"location":"en/CAS/STACK-Maxima_sandbox/#stack-sandbox","text":"It is very useful when authoring questions to be able to test out Maxima code in the same environment in which STACK uses Maxima . That is to say, to run a desktop version of Maxima with the local settings and STACK specific functions loaded. This is also used in reporting and analysis of students' responses. To do this you will need to load your local settings, and also the libraries of Maxima functions specific to STACK.","title":"STACK Sandbox"},{"location":"en/CAS/STACK-Maxima_sandbox/#setup-maxima-and-wxmaxima","text":"Install Maxima (http://maxima.sourceforge.net/) and wxMaxima (https://wxmaxima-developers.github.io/wxmaxima/).","title":"Setup Maxima and wxMaxima"},{"location":"en/CAS/STACK-Maxima_sandbox/#stack-maxima-sandbox-without-access-to-a-server","text":"If you don't have access to a STACK server then you will need to download the files. Download all the STACK files from GitHub (git or as a .zip). E.g. try https://github.com/maths/moodle-qtype_stack/archive/master.zip The only files you need are in .../stack/maxima/ In this directory open the file sandbox.wmx with wxMaxima and edit it to your needs.","title":"STACK - Maxima sandbox (without access to a server)"},{"location":"en/CAS/STACK-Maxima_sandbox/#stack-maxima-sandbox-with-access-to-a-server","text":"It is very useful when authoring questions to be able to test out Maxima code in the same environment in which STACK uses Maxima . That is to say, to run a desktop version of Maxima with the local settings and STACK specific functions loaded. This is also used in reporting and analysis of students' responses. To do this you will need to load your local settings, and also the libraries of Maxima functions specific to STACK. For example, many of the functions are defined in stack/stack/maxima/stackmaxima.mac Hence, on a typical Moodle installation you will find the file at /moodle/question/type/stack/stack/maxima/stackmaxima.mac The first part of the instructions work on a Microsoft platform, but instructions for Linux can also be found below. Please note that having a properly set up STACK - Maxima sandbox is not equivalent to running an optimized Maxima.","title":"STACK - Maxima sandbox (with access to a server)"},{"location":"en/CAS/STACK-Maxima_sandbox/#setting-maximas-path","text":"Setting the path in Maxima is a problem on a Microsoft platform. Maxima does not deal well with spaces in filenames, for example. The simplest solution is to create a directory C:/maxima and add this to Maxima's path. Place all Maxima files in this directory, so they will then be seen by Maxima. For Maxima 5.26.0, edit, or create, the file C:/Program Files/Maxima-5.26.0/share/maxima/5.26.0/share/maxima-init.mac ensure it contains the following lines, possibly modified to reflect the directory you have chosen file_search_maxima:append([sconcat(\"C:/maxima/###.{mac,mc}\")],file_search_maxima)$ file_search_lisp:append([sconcat(\"C:/maxima/###.{lisp}\")],file_search_lisp)$ Other versions of Maxima are similar.","title":"Setting Maxima's Path"},{"location":"en/CAS/STACK-Maxima_sandbox/#loading-stacks-functions","text":"STACK automatically adjusts Maxima's path and loads a number of files. These define STACK specific functions and reflect your local settings. To do this, STACK loads a file which is automatically created at install time. This is placed within the moodledata directory, typically as moodledata/stack/maximalocal.mac For example, the value might look like C:/xampp/data/moodledata/stack/maximalocal.mac You need to load this file into Maxima to recreate the setup of Maxima as seen by STACK. Assuming you have created a directory C:/maxima as suggested above and added it to Maxima's path, the simplest way to do this is to create a file C:/maxima/sm.mac and into this file add the line load(\"C:/xampp/data/moodledata/stack/maximalocal.mac\"); To load this into Maxima simply type load(sm); at Maxima's command line. The time spent setting the path in this way is soon repaid in not having to type the following line each time you want the sandbox. Your path to maximalocal.mac might be significantly longer....! You will know the file is loaded correctly if you see a message such as the following (%i1) load(sm); Loading maxima-grobner $Revision: 1.6 $ $Date: 2009-06-02 07:49:49 $ [Stack-Maxima started V3.0, 13/2/12] (%o0) \"C:/maxima/sm.mac\" You can test this out by using, for example, the rand() function. rand(matrix([5,5],[5,5])); to create a pseudo-random matrix. If rand returns unevaluated, then you have not loaded the libraries correctly.","title":"Loading STACK's functions"},{"location":"en/CAS/STACK-Maxima_sandbox/#linux-instructions","text":"In a terminal window, execute the following commands, e.g., in your home folder: mkdir stack-maxima cd stack-maxima pico maxima-init.mac Put the following three lines into maxima-init.mac: file_search_maxima:append([sconcat(\"<path to your home folder>/stack-maxima/###.{mac,mc}\")],file_search_maxima)$ file_search_lisp:append([sconcat(\"<path to your home folder>/stack-maxima/###.{lisp}\")],file_search_lisp)$ load(\"<path to your moodledata>/stack/maximalocal.mac\"); Note that the paths above need to be completed. The following command is useful for finding the path to maximalocal.mac: locate maximalocal.mac","title":"Linux instructions"},{"location":"en/CAS/STACK-Maxima_sandbox/#using-the-answer-tests","text":"Please make sure you read the page on answer tests first. Not all the answer tests can be called directly from Maxima. For example, the string match uses the PHP functions. Informally, the answer tests have the following syntax [Errors, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt) actually the results returned in Maxima are [Valid, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt) Errors are echoed to the console, and are trapped by another mechanism. The valid field is used to render an attempt invalid, not wrong. To call an answer test directly from Maxima, you need to use the correct function name. For example, to call the algebraic equivalence (AlgEquiv) answer test you need to use ATAlgEquiv(x^2+2,x*(x+1)); The values returned are actually in the form [true,false,\"\",\"\"] Feedback is returned in the form of a language tag which is translated later. For example, (%i1) ATInt(x^2,x*(x+1),x); (%o1) [true,false,\"ATInt_generic. \", \"stack_trans('ATInt_generic' , !quot!\\\\[2\\\\,x+1\\\\]!quot! , !quot!\\\\(x\\\\)!quot! , !quot!\\\\[2\\\\,x\\\\]!quot! ); \"] The chart below shows the answer test, whether it is defined in Maxima or PHP and the options it expects. Some of the tests are called \"hybrid\". These require both significant Maxima and PHP code and cannot be easily reproduced in the sandbox. Answer test Maxima command name Maxima/PHP Option ? AlgEquiv ATAlgEquiv Maxima AlgEquivNouns ATAlgEquivNouns Maxima EqualComAss ATEqualComAss Maxima CasEqual ATCasEqual Maxima SameType ATSameType Maxima SubstEquiv ATSubstEquiv Maxima SysEquiv ATSysEquiv Maxima Sets ATSets Maxima Expanded ATExpanded Maxima FacForm ATFacForm Maxima Variable SingleFrac ATSingleFrac Maxima PartFrac ATPartFrac Maxima Variable CompSquare ATCompSquare Maxima Variable PopLogic ATPopLogic Maxima Equiv ATEquiv Maxima EquivFirst ATEquivFirst Maxima Num-GT ATGT Maxima Num-GTE ATGTE Maxima NumSigFigs ATNumSigFigs Maxima Number sig figs NumAbsolute Hybrid NumRelative Hybrid NumDecPlaces Hybrid NumDecPlacesWrong Hybrid LowestTerms ATLowestTerms Maxima UnitsSigFigs ATUnitsSigFigs Maxima Shares code with NumSigFigs UnitsSigFigs ATUnitsStrictSigFigs Maxima Shares code with NumSigFigs UnitsAbsolute ATUnitsAbsolute Maxima Shares code with NumAbsolute UnitsAbsolute ATUnitsStrictAbsolute Maxima Shares code with NumAbsolute UnitsRelative ATUnitsRelative Maxima Shares code with NumRelative UnitsRelative ATUnitsStrictRelative Maxima Shares code with NumRelative Diff ATDiff Maxima Variable Int ATInt Maxima Variable String PHP StringSloppy PHP SRegExp ATSRegExp Maxima If you just want to decide if two expressions are considered to be algebraically equivalent, then use algebraic_equivalence(ex1,ex2); This is the function the answer test ATAlgEquiv uses without all the wrapper of a full answer test.","title":"Using the answer tests"},{"location":"en/CAS/STACK-Maxima_sandbox/#where-is-the-maxima-code","text":"All the maxima code is kept in ...\\moodle\\question\\type\\stack\\stack\\maxima The bulk of the functions are defined in ...\\moodle\\question\\type\\stack\\stack\\maxima\\stackmaxima.mac ...\\moodle\\question\\type\\stack\\stack\\maxima\\assessment.mac","title":"Where is the Maxima code?"},{"location":"en/CAS/STACK-Maxima_sandbox/#useful-tips","text":"STACK turns off the traditional two-dimensional display, which we can turn back on with the following command. display2d:true;","title":"Useful tips"},{"location":"en/CAS/Simplification/","text":"Simplification & ordering Ordering terms Maxima chooses an order in which to write terms in an expression. By default, this will use reverse lexicographical order for simple sums, so that we have b+a instead of a+b . In elementary mathematics this looks a little odd! One way to overcome this is to use simplification below but another way is to alter the order in which expressions are transformed. To alter the order in STACK you can use the Maxima commands orderless and ordergreat . To have a+b you can use ordergreat(a,b); See Maxima's documentation for more details. Only one orderless or ordergreat command can be issued in any session. The last one encountered will be used and the others ignored. No warnings or errors are issued if more than one is encountered. Logarithms to an arbitrary base By default, Maxima does not provide logarithms to an arbitrary base. To overcome this, STACK provides a function lg for student entry. lg(x) is log of x to the base 10. lg(x, a) is log of x to the base a . STACK provides no simplification rules for these logarithms. To simplify you must transform back to natural logarithms. For example (with simp:true or simp:false ) p:lg(27, 3) q:ev(p, lg=logbasesimp) results in p=lg(27, 3) , and q=3 . The algebraic equivalence function algebraic_equivalence , and so anything upon which it depends, will automatically remove logarithms to other bases. This includes the answer tests as needed. Selective simplification The level of simplification performed by Maxima can be controlled by changing Maxima's global variable simp , e.g. simp:true This variable can be set at the question level using the options or for each Potential response tree . When this is false , no simplification is performed and Maxima is quite happy to deal with an expression such as 1+4 without actually performing the addition. This is most useful for dealing with very elementary expressions. If you are using simp:false to evaluate an expression with simplification on, you can use ev(ex,simp) Unary minus and simplification There are still some problems with the unary minus, e.g. sometimes we get the display 4+(-3x) when we would actually like to always display as 4-3x . This is a problem with the unary minus function -(x) as compared to binary infix subtraction a-b . To reproduce this problem type in the following into a Maxima session: simp:false; p:y^3-2*y^2-8*y; This displays the polynomial as follows. y^3-2*y^2+(-8)*y Notice the first subtraction is fine, but the second one is not. To understand this, we can view the internal tree structure of the expression by typing in ?print(p); ((MPLUS) ((MEXPT) $Y 3) ((MMINUS) ((MTIMES) 2 ((MEXPT) $Y 2))) ((MTIMES) ((MMINUS) 8) $Y)) In the structure of this expression the first negative coefficient is -(2*y^2) BUT the second is -(8)*y . This again is a crucial but subtle difference! To address this issue we have a function unary_minus_sort(p); which pulls \"-\" out the front in a specific situation: that of a product with a negative number at the front. The result here is the anticipated y^3-2*y^2-8*y . Note that STACK's display functions automatically apply unary_minus_sort(...) to any expression being displayed. If you really insist on a kludge.... In some situations you may find you really do need to work at the display level, construct a string and display this to the student in Maxima. Please avoid doing this! a:sin(x^2); b:1+x^2; f:sconcat(\"\\\\frac{\",stack_disp(a,\"\"),\"}{\",stack_disp(b,\"\"),\"}\"); Then you can put in \\({@f@}\\) into one of the CASText fields. Note, you need to add LaTeX maths delimiters, because when the CAS returns a string the command {@f@} will just display the contents of the string without maths delimiters. Tips for manipulating expressions How do we do the following in Maxima? (1-x)^a \\times (x-1) \\rightarrow -(1-x)^{a+1}. Try q:(1-x)^a*(x-1); q:ratsubst(z,1-x,q); q:subst(z=1-x ,q); How do we do the following in Maxima? (x-1)(k(x-1))^a \\rightarrow (x-1)^{a+1}k^a. factor(radcan((x-1)*(k*(x-1))^a)) Maxima's internal representation of an expression sometimes does not correspond with what you expect -- in that case, dispform may help to bring it into the form you expect. For example, the output of solve in the following code shows the b in the denominator as b^{-1} which gives unnatural-looking output when a value is substituted in -- this is fixed by using dispform and substituting into that variants instead. simp:true; eqn:b = 1/(6*a+3); ta1: expand(rhs(solve(eqn,a)[1])); dispta1:dispform(ta1); simp:false; subst(2,b,ta1); subst(2,b,dispta1); Creating sequences and series One problem is that makelist needs simplification. To create sequences/series, try something like the following an:(-1)^n*2^n/n! N:8 S1:ev(makelist(k,k,1,N),simp) S2:maplist(lambda([ex],ev(an,n=ex)),S1) S3:ev(S2,simp) S4apply(\"+\",S3) Of course, to print out one line in the worked solution you can also apply(\"+\",S2) as well. To create the binomial coefficients simp:false; n:5; apply(\"+\",map(lambda([ex],binomial(n,ex)*x^ex), ev(makelist(k,k,0,5),simp))); Surds Imagine you would like the student to expand out (\\sqrt{5}-2)(\\sqrt{5}+4)=2\\sqrt{5}-3 . There are two tests you probably want to apply to the student's answer. Algebraic equivalence with the correct answer: use ATAlgEquiv . That the expression is \"expanded\": use ATExpanded . You probably then want to make sure a student has \"gathered\" like terms. In particular you'd like to make sure a student has either 2\\sqrt{5}-3 \\mbox{ or } \\sqrt{20}-3 but not 5+4\\sqrt{2}-2\\sqrt{2}+6. This causes a problem because ATComAss thinks that 2\\sqrt{5}-3 \\neq \\sqrt{20}-3. So you can't use ATComAss here, and guarantee that all random variants will work by testing that we really have 5+4\\sqrt{2} for example. What we really want is for the functions sqrt and + to appear precisely once in the student's answer, or that the answer is a sum of two things. Control of surds See also the Maxima documentation on radexpand . For example radexpand:false$ sqrt((2*x+10)/10); radexpand:true$ sqrt((2*x+10)/10); The first of these does not pull out a numerical denominator. The second does. Boolean functions See the page on propositional logic . Further examples Some further examples are given elsewhere: Matrix examples in showing working . An example of a question with simp:false is discussed in authoring quick start 7 . Generating random algebraic expressions which need to be \"gathered and sorted\". Note also that question tests do not simplify test inputs.","title":"Simplification & ordering"},{"location":"en/CAS/Simplification/#simplification-ordering","text":"","title":"Simplification &amp; ordering"},{"location":"en/CAS/Simplification/#ordering-terms","text":"Maxima chooses an order in which to write terms in an expression. By default, this will use reverse lexicographical order for simple sums, so that we have b+a instead of a+b . In elementary mathematics this looks a little odd! One way to overcome this is to use simplification below but another way is to alter the order in which expressions are transformed. To alter the order in STACK you can use the Maxima commands orderless and ordergreat . To have a+b you can use ordergreat(a,b); See Maxima's documentation for more details. Only one orderless or ordergreat command can be issued in any session. The last one encountered will be used and the others ignored. No warnings or errors are issued if more than one is encountered.","title":"Ordering terms"},{"location":"en/CAS/Simplification/#logarithms-to-an-arbitrary-base","text":"By default, Maxima does not provide logarithms to an arbitrary base. To overcome this, STACK provides a function lg for student entry. lg(x) is log of x to the base 10. lg(x, a) is log of x to the base a . STACK provides no simplification rules for these logarithms. To simplify you must transform back to natural logarithms. For example (with simp:true or simp:false ) p:lg(27, 3) q:ev(p, lg=logbasesimp) results in p=lg(27, 3) , and q=3 . The algebraic equivalence function algebraic_equivalence , and so anything upon which it depends, will automatically remove logarithms to other bases. This includes the answer tests as needed.","title":"Logarithms to an arbitrary base"},{"location":"en/CAS/Simplification/#selective-simplification","text":"The level of simplification performed by Maxima can be controlled by changing Maxima's global variable simp , e.g. simp:true This variable can be set at the question level using the options or for each Potential response tree . When this is false , no simplification is performed and Maxima is quite happy to deal with an expression such as 1+4 without actually performing the addition. This is most useful for dealing with very elementary expressions. If you are using simp:false to evaluate an expression with simplification on, you can use ev(ex,simp)","title":"Selective simplification"},{"location":"en/CAS/Simplification/#unary-minus-and-simplification","text":"There are still some problems with the unary minus, e.g. sometimes we get the display 4+(-3x) when we would actually like to always display as 4-3x . This is a problem with the unary minus function -(x) as compared to binary infix subtraction a-b . To reproduce this problem type in the following into a Maxima session: simp:false; p:y^3-2*y^2-8*y; This displays the polynomial as follows. y^3-2*y^2+(-8)*y Notice the first subtraction is fine, but the second one is not. To understand this, we can view the internal tree structure of the expression by typing in ?print(p); ((MPLUS) ((MEXPT) $Y 3) ((MMINUS) ((MTIMES) 2 ((MEXPT) $Y 2))) ((MTIMES) ((MMINUS) 8) $Y)) In the structure of this expression the first negative coefficient is -(2*y^2) BUT the second is -(8)*y . This again is a crucial but subtle difference! To address this issue we have a function unary_minus_sort(p); which pulls \"-\" out the front in a specific situation: that of a product with a negative number at the front. The result here is the anticipated y^3-2*y^2-8*y . Note that STACK's display functions automatically apply unary_minus_sort(...) to any expression being displayed.","title":"Unary minus and simplification"},{"location":"en/CAS/Simplification/#if-you-really-insist-on-a-kludge","text":"In some situations you may find you really do need to work at the display level, construct a string and display this to the student in Maxima. Please avoid doing this! a:sin(x^2); b:1+x^2; f:sconcat(\"\\\\frac{\",stack_disp(a,\"\"),\"}{\",stack_disp(b,\"\"),\"}\"); Then you can put in \\({@f@}\\) into one of the CASText fields. Note, you need to add LaTeX maths delimiters, because when the CAS returns a string the command {@f@} will just display the contents of the string without maths delimiters.","title":"If you really insist on a kludge...."},{"location":"en/CAS/Simplification/#tips-for-manipulating-expressions","text":"How do we do the following in Maxima? (1-x)^a \\times (x-1) \\rightarrow -(1-x)^{a+1}. Try q:(1-x)^a*(x-1); q:ratsubst(z,1-x,q); q:subst(z=1-x ,q); How do we do the following in Maxima? (x-1)(k(x-1))^a \\rightarrow (x-1)^{a+1}k^a. factor(radcan((x-1)*(k*(x-1))^a)) Maxima's internal representation of an expression sometimes does not correspond with what you expect -- in that case, dispform may help to bring it into the form you expect. For example, the output of solve in the following code shows the b in the denominator as b^{-1} which gives unnatural-looking output when a value is substituted in -- this is fixed by using dispform and substituting into that variants instead. simp:true; eqn:b = 1/(6*a+3); ta1: expand(rhs(solve(eqn,a)[1])); dispta1:dispform(ta1); simp:false; subst(2,b,ta1); subst(2,b,dispta1);","title":"Tips for manipulating expressions"},{"location":"en/CAS/Simplification/#creating-sequences-and-series","text":"One problem is that makelist needs simplification. To create sequences/series, try something like the following an:(-1)^n*2^n/n! N:8 S1:ev(makelist(k,k,1,N),simp) S2:maplist(lambda([ex],ev(an,n=ex)),S1) S3:ev(S2,simp) S4apply(\"+\",S3) Of course, to print out one line in the worked solution you can also apply(\"+\",S2) as well. To create the binomial coefficients simp:false; n:5; apply(\"+\",map(lambda([ex],binomial(n,ex)*x^ex), ev(makelist(k,k,0,5),simp)));","title":"Creating sequences and series"},{"location":"en/CAS/Simplification/#surds","text":"Imagine you would like the student to expand out (\\sqrt{5}-2)(\\sqrt{5}+4)=2\\sqrt{5}-3 . There are two tests you probably want to apply to the student's answer. Algebraic equivalence with the correct answer: use ATAlgEquiv . That the expression is \"expanded\": use ATExpanded . You probably then want to make sure a student has \"gathered\" like terms. In particular you'd like to make sure a student has either 2\\sqrt{5}-3 \\mbox{ or } \\sqrt{20}-3 but not 5+4\\sqrt{2}-2\\sqrt{2}+6. This causes a problem because ATComAss thinks that 2\\sqrt{5}-3 \\neq \\sqrt{20}-3. So you can't use ATComAss here, and guarantee that all random variants will work by testing that we really have 5+4\\sqrt{2} for example. What we really want is for the functions sqrt and + to appear precisely once in the student's answer, or that the answer is a sum of two things.","title":"Surds"},{"location":"en/CAS/Simplification/#control-of-surds","text":"See also the Maxima documentation on radexpand . For example radexpand:false$ sqrt((2*x+10)/10); radexpand:true$ sqrt((2*x+10)/10); The first of these does not pull out a numerical denominator. The second does.","title":"Control of surds"},{"location":"en/CAS/Simplification/#boolean-functions","text":"See the page on propositional logic .","title":"Boolean functions"},{"location":"en/CAS/Simplification/#further-examples","text":"Some further examples are given elsewhere: Matrix examples in showing working . An example of a question with simp:false is discussed in authoring quick start 7 . Generating random algebraic expressions which need to be \"gathered and sorted\". Note also that question tests do not simplify test inputs.","title":"Further examples"},{"location":"en/CAS/Statistics/","text":"Statistics support in STACK. The following optional packages provide statistics support in Maxima: load(\"stats\"); load(\"distrib\"); load(\"descriptive\"); Please see Maxima's documentation for information on the functions these packages contain. These packages are included by default. The Debian package manager currently has a release of Maxima (as of Nov 2015) without these packages and attempting to load them renders STACK unusable. For this reason, they may have been disabled by your system administrator and your server may not support inclusion of these packages. Package: descriptive Note that the \"descriptive\" package includes a number of functions to plotting graphs, such as boxplots and scatterplot. These are not supported by STACK.","title":"Statistics support in STACK."},{"location":"en/CAS/Statistics/#statistics-support-in-stack","text":"The following optional packages provide statistics support in Maxima: load(\"stats\"); load(\"distrib\"); load(\"descriptive\"); Please see Maxima's documentation for information on the functions these packages contain. These packages are included by default. The Debian package manager currently has a release of Maxima (as of Nov 2015) without these packages and attempting to load them renders STACK unusable. For this reason, they may have been disabled by your system administrator and your server may not support inclusion of these packages.","title":"Statistics support in STACK."},{"location":"en/CAS/Statistics/#package-descriptive","text":"Note that the \"descriptive\" package includes a number of functions to plotting graphs, such as boxplots and scatterplot. These are not supported by STACK.","title":"Package: descriptive"},{"location":"en/Developer/","text":"Developers The Developer documentations give information on STACK development, as well as instructions for developers who want to contribute to STACK. Contributing to STACK STACK is open source, and as such relies on users to make contributions. These documents describe some ways you may consider to contribute. You may want to learn about creating an input type . You could read about Installing language pack and translating STACK . There is also information on contributing to the documentation . Development history If you want to track the development of STACK or report bugs then you should visit GitHub . Work towards the next release of STACK is detailed on Development track . Plans looking futher into the future are described on Future plans . The past development history is documented on Development history . Advanced topics The following topics describe advanced topics for developers and site admins. You can read about running unit tests . There is information on clearing the cache . You can also read on adding support for Maxima packages . If you have recently upgraded from an older STACK version, you may need to upgrade question defaults . You may want to know how to run question tests on a development server before upgrading to a new version of STACK. You can read about the design of the PHP interface to the CAS .","title":"Developers"},{"location":"en/Developer/#developers","text":"The Developer documentations give information on STACK development, as well as instructions for developers who want to contribute to STACK.","title":"Developers"},{"location":"en/Developer/#contributing-to-stack","text":"STACK is open source, and as such relies on users to make contributions. These documents describe some ways you may consider to contribute. You may want to learn about creating an input type . You could read about Installing language pack and translating STACK . There is also information on contributing to the documentation .","title":"Contributing to STACK"},{"location":"en/Developer/#development-history","text":"If you want to track the development of STACK or report bugs then you should visit GitHub . Work towards the next release of STACK is detailed on Development track . Plans looking futher into the future are described on Future plans . The past development history is documented on Development history .","title":"Development history"},{"location":"en/Developer/#advanced-topics","text":"The following topics describe advanced topics for developers and site admins. You can read about running unit tests . There is information on clearing the cache . You can also read on adding support for Maxima packages . If you have recently upgraded from an older STACK version, you may need to upgrade question defaults . You may want to know how to run question tests on a development server before upgrading to a new version of STACK. You can read about the design of the PHP interface to the CAS .","title":"Advanced topics"},{"location":"en/Developer/CAS_evaluatable/","text":"The family tree of cas_evaluatables. As of 4.3 the CAS evaluation engine has been replaced by a more modular version. Basically the old \"cassession\" class was replaced with a version that takes in objects that implement the cas_evaluatable interface, and evaluates them. However, it does not extract values from the CAS unless those objects implement additional interfaces that receive those values. The core interfaces cas_evaluatable Anything that can generate an CAS-statement string, responds to a question about its validity, can tell some backreference information to be displayed in potenttial error messages, and provides a function that receives information about the success or failure of the statement. In general if one is only loading values into the CAS and does not need to extract those particular values then something implementing cas_evaluatable is probably the thing to use. And one can always add additional items to the session and those can then extract values if need be. In the old terms keyvals are closest to collections of cas_evaluatables as they are rarely extracted on their own. cas_value_extractor and cas_latex_extractor These two expand the cas_evaluatable interface by requiring that the object provides means of receiving the value or its LaTeX representation. The obvious use for these are any items one needs to bring back from CAS, note that while one can easily push every statement to CAS in containers implementing these it is wasteful to do so unless you actually use those extracted values. What is wasted is bandwidth, processing power, and space in the cache all of which directly affect response time and the upkeep costs of the system. From the old model the things that best match these are CASText, getting the results of PRTs, and generating the LaTeX values for validation messages. The new class hierarchy of base level objects As we rarely create new classes that implement those interfaces it is better to list the existing ones so that one can seek for a ready made solution. Note that not all of these will be in active use as other parts of the system are brought forward. By source In general cas_evaluatables are backed with an AST that the statement parser has generated from question code or student input and has been processed by multiple AST-filters and validators. But things are not always so, one might have large blocks of code that have been prevalidated and cached as raw strings that one wants to directly load to the session, for example logic code that evaluates a whole PRT or a forest of them. For the latter task there exists a special class ( stack_secure_loader ) that does just that. When dealing with student sourced material one tends to use the stack_ast_container class which provides complex maker functions that ensure that a raw string gets parsed correctly and goes through key filters in addition to whatever filter you may want to apply in the context of a particular input. In some cases one may also use that class for teacher sourced material but in general stack_ast_container_silent is the better choice for such material as it does not generate return values and typically teacher sourced content is used in logic, and logic is not something that one needs to always show. Special cases The old system had the concept of conditional casstrings in the block system of CASText, as CASText is one of those things that will be redone, and in a way that it no longer needs conditional casstrings, we provide a separate type of cas_evaluatable for this task thus freeing others from having to check for conditions. The makers There exists three different static maker functions in classes stack_ast_container_silent and stack_ast_container . The logic is identical as they are only defined in former, but the result is different as they create objects of classes type. So call they through the class you wish to use.","title":"The family tree of cas_evaluatables."},{"location":"en/Developer/CAS_evaluatable/#the-family-tree-of-cas_evaluatables","text":"As of 4.3 the CAS evaluation engine has been replaced by a more modular version. Basically the old \"cassession\" class was replaced with a version that takes in objects that implement the cas_evaluatable interface, and evaluates them. However, it does not extract values from the CAS unless those objects implement additional interfaces that receive those values.","title":"The family tree of cas_evaluatables."},{"location":"en/Developer/CAS_evaluatable/#the-core-interfaces","text":"","title":"The core interfaces"},{"location":"en/Developer/CAS_evaluatable/#cas_evaluatable","text":"Anything that can generate an CAS-statement string, responds to a question about its validity, can tell some backreference information to be displayed in potenttial error messages, and provides a function that receives information about the success or failure of the statement. In general if one is only loading values into the CAS and does not need to extract those particular values then something implementing cas_evaluatable is probably the thing to use. And one can always add additional items to the session and those can then extract values if need be. In the old terms keyvals are closest to collections of cas_evaluatables as they are rarely extracted on their own.","title":"cas_evaluatable"},{"location":"en/Developer/CAS_evaluatable/#cas_value_extractor-and-cas_latex_extractor","text":"These two expand the cas_evaluatable interface by requiring that the object provides means of receiving the value or its LaTeX representation. The obvious use for these are any items one needs to bring back from CAS, note that while one can easily push every statement to CAS in containers implementing these it is wasteful to do so unless you actually use those extracted values. What is wasted is bandwidth, processing power, and space in the cache all of which directly affect response time and the upkeep costs of the system. From the old model the things that best match these are CASText, getting the results of PRTs, and generating the LaTeX values for validation messages.","title":"cas_value_extractor and cas_latex_extractor"},{"location":"en/Developer/CAS_evaluatable/#the-new-class-hierarchy-of-base-level-objects","text":"As we rarely create new classes that implement those interfaces it is better to list the existing ones so that one can seek for a ready made solution. Note that not all of these will be in active use as other parts of the system are brought forward.","title":"The new class hierarchy of base level objects"},{"location":"en/Developer/CAS_evaluatable/#by-source","text":"In general cas_evaluatables are backed with an AST that the statement parser has generated from question code or student input and has been processed by multiple AST-filters and validators. But things are not always so, one might have large blocks of code that have been prevalidated and cached as raw strings that one wants to directly load to the session, for example logic code that evaluates a whole PRT or a forest of them. For the latter task there exists a special class ( stack_secure_loader ) that does just that. When dealing with student sourced material one tends to use the stack_ast_container class which provides complex maker functions that ensure that a raw string gets parsed correctly and goes through key filters in addition to whatever filter you may want to apply in the context of a particular input. In some cases one may also use that class for teacher sourced material but in general stack_ast_container_silent is the better choice for such material as it does not generate return values and typically teacher sourced content is used in logic, and logic is not something that one needs to always show.","title":"By source"},{"location":"en/Developer/CAS_evaluatable/#special-cases","text":"The old system had the concept of conditional casstrings in the block system of CASText, as CASText is one of those things that will be redone, and in a way that it no longer needs conditional casstrings, we provide a separate type of cas_evaluatable for this task thus freeing others from having to check for conditions.","title":"Special cases"},{"location":"en/Developer/CAS_evaluatable/#the-makers","text":"There exists three different static maker functions in classes stack_ast_container_silent and stack_ast_container . The logic is identical as they are only defined in former, but the result is different as they create objects of classes type. So call they through the class you wish to use.","title":"The makers"},{"location":"en/Developer/Census/","text":"Maxima identifier census The Maxima identifier census is a new part of STACK starting from version 4.3 the point of this census is to keep track of new Maxima features and their presence in versions of Maxima. Basically, we can use some function and flag if and only if its present in a reasonable number of recent Maxima versions and we drop STACKs support of older versions. In addition to helping developers identify features that are not necessarily available in relevant Maxima versions the census data is also used to build the security-map i.e. a list of identifiers that should not be modified, accessed or called by students or teachers. The same list also describes safe identifiers so that we can identify situations where function names are used as variables or common constants are being redefined. The census and security files Currently, the data can be found from JSON files under /stack/cas/ the census in its raw form is in base-identifier-map.json and the security-map is In security-map.json . The census file lists identifiers and their usage types and the versions of Maxima those usages have been present in the documentation. The security file gives meta-data about selected identifiers, that meta-data typically consists of keys like function , operator , or variable that have values of s , f , and ? first one meaning that students can use that identifier in that way and the second one meaning that no one can use that in that way the last one signals that the identifier is not yet forbidden and that teachers may allow students to use it if they so wish. Other meta-data tends to focus on classification e.g. functions that can be used to apply or map other function on values have their own meta-data flag mapfunction . Updating the files The process of updating the census file is as follows: Acquire the source code of the new Maxima version you want to include in the census. For example 'maxima-5.42.0.tar.gz' and unpack it somewhere. cd /tmp/ mkdir maximatemp cd maximatemp tar xvf ~/Downloads/maxima-5.42.0.tar.gz Extract the identifiers from the documentation that comes with that source, and store them to a file. cd /tmp/maximatemp/maxima-5.42.0/doc/info grep '^ \\-\\- .*: .*' -shI * | grep -v 'an error. To debug' > /tmp/maximatemp/identifiers-5.42.0.txt Use STACKs update script to read in that file. Make sure that you give the correct version number. cd $MOODLE php question/type/stack/cli/maximaidentifierupdater.php --version=5.42.0 --data=/tmp/maximatemp/identifiers-5.42.0.txt Also call the update script for the security map. The script will read the data updated in the previous step and include any new identifiers to the security map. Calling, this script should also be done if you manually modify the security-map as the script ensure that the map is in alphabetical order and indented in the expected way. cd $MOODLE php question/type/stack/cli/maximasecuritymapupdater.php Remember to commit the changes to those JSON files to the GIT.","title":"Maxima identifier census"},{"location":"en/Developer/Census/#maxima-identifier-census","text":"The Maxima identifier census is a new part of STACK starting from version 4.3 the point of this census is to keep track of new Maxima features and their presence in versions of Maxima. Basically, we can use some function and flag if and only if its present in a reasonable number of recent Maxima versions and we drop STACKs support of older versions. In addition to helping developers identify features that are not necessarily available in relevant Maxima versions the census data is also used to build the security-map i.e. a list of identifiers that should not be modified, accessed or called by students or teachers. The same list also describes safe identifiers so that we can identify situations where function names are used as variables or common constants are being redefined.","title":"Maxima identifier census"},{"location":"en/Developer/Census/#the-census-and-security-files","text":"Currently, the data can be found from JSON files under /stack/cas/ the census in its raw form is in base-identifier-map.json and the security-map is In security-map.json . The census file lists identifiers and their usage types and the versions of Maxima those usages have been present in the documentation. The security file gives meta-data about selected identifiers, that meta-data typically consists of keys like function , operator , or variable that have values of s , f , and ? first one meaning that students can use that identifier in that way and the second one meaning that no one can use that in that way the last one signals that the identifier is not yet forbidden and that teachers may allow students to use it if they so wish. Other meta-data tends to focus on classification e.g. functions that can be used to apply or map other function on values have their own meta-data flag mapfunction .","title":"The census and security files"},{"location":"en/Developer/Census/#updating-the-files","text":"The process of updating the census file is as follows: Acquire the source code of the new Maxima version you want to include in the census. For example 'maxima-5.42.0.tar.gz' and unpack it somewhere. cd /tmp/ mkdir maximatemp cd maximatemp tar xvf ~/Downloads/maxima-5.42.0.tar.gz Extract the identifiers from the documentation that comes with that source, and store them to a file. cd /tmp/maximatemp/maxima-5.42.0/doc/info grep '^ \\-\\- .*: .*' -shI * | grep -v 'an error. To debug' > /tmp/maximatemp/identifiers-5.42.0.txt Use STACKs update script to read in that file. Make sure that you give the correct version number. cd $MOODLE php question/type/stack/cli/maximaidentifierupdater.php --version=5.42.0 --data=/tmp/maximatemp/identifiers-5.42.0.txt Also call the update script for the security map. The script will read the data updated in the previous step and include any new identifiers to the security map. Calling, this script should also be done if you manually modify the security-map as the script ensure that the map is in alphabetical order and indented in the expected way. cd $MOODLE php question/type/stack/cli/maximasecuritymapupdater.php Remember to commit the changes to those JSON files to the GIT.","title":"Updating the files"},{"location":"en/Developer/Creating_an_input_type/","text":"Creating a new Input type Background To allow questions to be as flexible as possible, the types of input that can be used to build questions are a type of plugin. You can make a new one and add it to STACK if you wish. This document explains how. File layout Your new input type will be a folder inside question/type/stack/stack/input/. For the purpose of this example, we will suppose we are making an input type called myinput. So, the folder will be question/type/stack/stack/input/myinput. Inside there, you should have two files: myinput.class.php tests/myinput_test.php - not strictly requried, but of course you want to write unit tests for your new code. myinput.class.php In this file, you need to define a subclass of stack_input called stack_myinput_input. The methods you need to implement are well described by the PHPdoc comments on the base class, so go and read those now. The key methods are: get_parameters_defaults - used by the question editing form. render - displays the input element as HTML. Finally The best way to see how all this works is to have a look at how the inputs that come with stack as standard are implemented. It should be easy to learn by example.","title":"Creating a new Input type"},{"location":"en/Developer/Creating_an_input_type/#creating-a-new-input-type","text":"","title":"Creating a new Input type"},{"location":"en/Developer/Creating_an_input_type/#background","text":"To allow questions to be as flexible as possible, the types of input that can be used to build questions are a type of plugin. You can make a new one and add it to STACK if you wish. This document explains how.","title":"Background"},{"location":"en/Developer/Creating_an_input_type/#file-layout","text":"Your new input type will be a folder inside question/type/stack/stack/input/. For the purpose of this example, we will suppose we are making an input type called myinput. So, the folder will be question/type/stack/stack/input/myinput. Inside there, you should have two files: myinput.class.php tests/myinput_test.php - not strictly requried, but of course you want to write unit tests for your new code.","title":"File layout"},{"location":"en/Developer/Creating_an_input_type/#myinputclassphp","text":"In this file, you need to define a subclass of stack_input called stack_myinput_input. The methods you need to implement are well described by the PHPdoc comments on the base class, so go and read those now. The key methods are: get_parameters_defaults - used by the question editing form. render - displays the input element as HTML.","title":"myinput.class.php"},{"location":"en/Developer/Creating_an_input_type/#finally","text":"The best way to see how all this works is to have a look at how the inputs that come with stack as standard are implemented. It should be easy to learn by example.","title":"Finally"},{"location":"en/Developer/Development_history/","text":"STACK Development History For current and future plans, see Development track and Future plans . Version 4.3.7 Released October 2020. Bug fixes and minor improvements. Version 4.3.6 Released October 2020. Bug fixes and minor improvements. Version 4.3.5 Add in the HELM styles. Version 4.3.5 Released August 2020. Bug fixes and minor improvements. Remove all strictSyntax functionality (DB, import/export functions remain). Add in further styles for proof with numbered lists. Version 4.3.4 Released June 2020. Bug fixes and minor improvements to units. Version 4.3.3 Released May 2020. Bug fixes and documentation. Version 4.3.2 Released May 2020. Document and support for simple manipulation of real intervals which Maxima does not have a library for. Document and support for simple manipulation of propositional logic based on Maxima's logic package. Document and support for simple manipulation of tables mainly to support easy display of truth tables in logic.. Better support for semi-automatic marking . Add in the resizable matrix input type (varmatrix). Fixed bug with javascript on pages with more than one matrix. Version 4.3.1 Released April 2020. Bug fixes and features which require DB changes. Add in STACK option \"logicsymbol\" to control how logical symbols are displayed. Add in formative potential response trees. Add in option feedbackstyle to potential response trees. Add in a new answer test AlgEquivNouns. Version 4.3 Released April 2020. This has been tested successfully during the spring semester, at three insitutions with large groups. STACK 4.3 is, because of the new parser, slightly slower than previous releases. Version 4.3 requires the PHP package mbstring (which will be required from Moodle 3.9 anyway). Do not attempt to upgrade without checking you have mbstring on your server. Navigate to this page on Moodle to confirm. /admin/environment.php Version 4.3 represents a major internal re-engineering of STACK, with a new dedicated parser and an updated mechanism for connecting to Maxima. This is a significant improvement, refactoring some of the oldest code and unblocking progress to a wide range of requested features. There have been a number of changes: In the forbidden words we now match whole words not substrings. Removed the RegExp answer test. Added the SRegExp answer test using Maxima's regex_match function. Use of units is now reflected throughout a question. This reduces the need to declare units in all contexts. Internally, the \"+-\" operator has been replaced with a new infix operation \"#pm#\". Instead of a+-b teachers now must type a#pm#b . This change was necessary to deal with differences between versions of Maxima when dealing with expresions. New features in v4.3: Add in full parser, to address issue #324. Add in input option 'align'. Add in input option 'nounits'. Add in input option 'compact' to input \"Show the validation\" parameter. Add in a basic question use report page, linked from the question testing page. Add in house styles to help typeset proof . Add cache to help reduce parsing overhead. Version 4.2.3 Released January 2020. This release is a marker before the release of STACK v4.3. Version 4.2.2 Released September 2019. Removed the Maxima MathML code (which wasn't connected or used). Add in metadata system to the documentation (Thanks to Malthe Sporring for this suggestion). Add in extra option simp to inputs. Add in extra options in the input allowempty and hideanswer . Review and updated documentation (thanks to Malthe Sporring). Version 4.2.1 Released August 2018. Add in privacy subsystem classes for GDPR compliance. Version 4.2 Released July 2018. Note: newer versions of Maxima require that a variable has been initialised as a list/array before you can assign values to its indices. For this reason some older questions may stop working when you upgrade to a new version of Maxima. Please use the bulk test script after each upgrade! See issue #343. Note: the behaviour of the Maxima addrow function has changed. Use the bulk test script to identify questions which are affected. Note, once you save a question you will update the version number, and this will prevent questions using addrow from being identified. Add support for using JSXGraph http://jsxgraph.org for better support of interactive graphics, and as part of an input type. See JSXGraph Add in a version number to STACK questions. Update reasoning by equivalence. This includes the following. Equating coefficients as a step in reasoning by equivalence. E.g. a x^2+b x+c=r x^2+s x+t \\leftrightarrow a=r \\mbox{ and } b=s \\mbox{ and } c=t . See poly_equate_coeffs in assessment.mac Solving simple simultaneous equations. (Interface) Include simple calculus operations (but constant of integration needs some further thought.) Refactor internal question validation away from Moodle editing, and into the question type. Add in a \"warning\" system. Add in native multi-language support, to separate out languages in the question text. This is needed so as not to create spurious validation errors, such as \"input cannot occur twice\". Output results of PRTs in the summarise_response method of question.php . Gives more information for reporting. Sort out the \"addrow\" problem. (See issue #333). This is changed to \"rowadd\". Add in check for \"mul\" (see issue #339) and better checking of input options. Refactor equiv_input and MCQ to make use of the new extra options mechanism. Add in support for the Maxima simplex package. Add an answer test to check if decimal separator is in the wrong place (See issue #314). Add an answer test to check sets and provide better feedback. Significant improvements to the bulk testing, returning runtime errors and identifying all questions without tests or worked solutions. Better CSS. (See issue #380) STACK 4.1 Released December 2017. Numerous minor bug fixes and improvements. Add in support for the syntaxHint in the matrix input. On the questiontestrun page, have options to (a) delete all question variants. Add in a size option to set the size of a plot. Add in an answer test which accepts \"at least\" n significant figures. (See issue #313) Add in the \"string\" input type. Add test which checks if there are any rational expressions in the denominator of a fraction. (Functionality added to LowestTerms test, which looks at the form of rational expressions). Add an option to remove hard-coded \"not answered\" option from Radio input type. (See issue #304) Add in a \"numerical\" input type which requires a student to type in a number. This has various options, see the docs . Specify numerical precision for validation in numerical and units input types. Refactor the inputs so that extra options can be added more easily, and shared between inputs. STACK 4.0.1 Released August 2017. This is a bug-fix release, mostly associated with the upgrade process from version 3.X to 4.X. Fix a bug in the upgrade script. Fix a bug in the testing procedure in the \"question test\" script, and improve the way deployed variants are tested. Make SVG the default image format for pictures created by Maxima. (Old .png code left in place in this release, but no user option to access this functionality.) STACK 4.0 Released August 2017. STACK 4.0 represents a major release of STACK and is a non-reversible change, with important differences which break back-compatibility. Note that much of the underlying code in this development have been used at Aalto for many years, with complex questions. We believe these are battle tested improvements in the functionality. STACK 4.0 includes the block features and other important changes in CASText. To generate the LaTeX displayed form of a CAS variable in CASText you must use {@...@} . Note the curly braces which now must be used. We have an upgrade script for existing questions. To generate the Maxima value of a CAS variable in CASText you can use {#...#} . This is useful when interfacing with other software, or showing examples to students. CASText now supports conditional statements and adaptive blocks. See question blocks . Other changes. The question note is no longer limited in size. Mathematics in LaTeX can no longer be supported with $..$ or $$..$$ . This usage has been discouraged for many years, and we have a long-standing \"fix\" script to convert from dollars to the forms \\(..\\) and \\[..\\] . Remove the artificial limit on the size of CASText. We now rely on surrounding limits, like POST requests and database limits. This may result in ugly errors, but we need larger limits to accommodate interactive elements embedded into text fields. STACK 3.6 Released July 2017. This release developed the first version of an input to assess line by line \"reasoning by equivalence\" input. See the documentation on equivalence reasoning . Other new features and enhancements in this release. Modify the text area input so that each line is validated separately. Add a \"scratch working\" input type in which students can record their thinking etc. alongside the final answer. Support for intervals in STACK, using the Maxima syntax oo(a,b) for an open interval (a,b) , cc(a,b) for an open interval [a,b] and oc(a,b) , co(a,b) for the half open intervals. Much better support for solving and dealing with single variable inequalities. Version 3.5.7 Released June 2017. Numerous minor bug fixes and improvements. Version 3.5.6 Released December 2016. Numerous minor bug fixes and improvements, particularly with numerical tests and scientific units. Change the display so that the underscore in atoms is displayed using subscripts. Added support for logarithms to an arbitrary base. Added SigFigsStrict answer test. Better support for floating point numbers, including the preservation and display of trailing zeros in numerical tests. Note, many of these changes have resulted in stricter rules on the acceptability of strings and stricter validation rules. 1 You can no longer have a feedback variable, or a question variable, with a name that is the same as an input. 2. log10 function and log_b functions are now handled by STACK, by manipulating the CAS string before it is sent to Maxima. Therefore, if your question previously defined a function with names like that, it will now break. 3. Variable names with a digit in the middle eqn1gen no longer work. (They should never have been used, but used not to break questions.) 4. Previously, unnecessary \\ in CAS text were ignored. E.g. if you have a question variable called vangle2 then {@\\vangle2@} used to work, it does not any more. Version 3.5.5 Released August 2016. Numerous minor bug fixes and improvements, particularly with numerical tests and scientific units. Expose functionality of printf to better control the display of integers and floats. Expand the \"units\" answer test to allow authors to use other numerical answer tests, see units . Add a mechanism to allow spaces in inputs. Trial functionality, which might change. Improve the mechanism to create a Maxima image and update the options in one go. Numerous options for units and the display of fractions. Added an xMaxima file to give more direct access to the sandbox. Version 3.5 Numerous minor bug fixes and improvements. Added an export mechanism for single stack questions through a link on the \"Question tests & deployed variant\" page. Modify the text area input so that each line is validated separately. Support for plot2d \"label\" command. Added support for grid2d for plot in newer versions of Maxima only. Add the NOCONST option to the ATInt answertest. Added support for optional Maxima packages through the config settings. Added the dropdown, radio and checkbox input types. Added basic support for scientific units , including a new input type and science answer tests. Version 3.4 Released September 2015. This contains numerous minor bug fixes and improvements. Expand the capability of ATInt options to accept the integrand to improve feedback. When validating a student's expression, add the option to show a list of variables alongside the displayed expression. The install process now attempts to auto-generate a Maxima image. Support for the stats package added. Change in the behaviour of the CASEqual answer test. Now we always assume simp:false . Add support for more AMS mathematics environments, including \\begin{align}...\\end{align} , \\begin{align*}...\\end{align*} etc. STACK tried to automatically write an optimised image for Linux. This should help installs where Unix access is difficult. Version 3.3 Released September 2014. This contains numerous minor bug fixes and improvements. Added in the Question blocks Changes to validation of casstrings. We now allow syntax such as 3e2 to represent floating point numbers. The strict syntax settings still flag 3e2 as \"missing stars\". Improvements to catching common syntax errors with trig functions, e.g. sin^-1(x) or cos[x] Refactored the numerical tests. This means they are now standard Maxima tests, not using PHP. Allow the use of the Maxima orderless and ordergreat in cassessions. This helps with display, without turning off simplification. Expanding CASText features. Enable a function as an answer type, e.g. improve validation. Refactor answer test unit testing to distinguish \"test fail\" from \"zero\". Reject things like sin*(x) and sin^2(x) as invalid Provide a new option on how parentheses are displayed for matrices Provide an extra syntax checking option to enable stars to be inserted between single characters, e.g. xy -> x*y. Add the input parameter allowwords to enable the teacher to specify some permitted words of more than 2 symbols length. Reinstate the STACK 2 feature called \"Hints\". This has been done as a \"Fact sheet\" to avoid ambiguity with other Moodle features. See Fact sheet documentation. Better install (auto OS detection), healthcheck and testing. When using the Maxima Pool servlet, it is now possible to use any type of HTTP authentication (e.g. basic or digest), and there is a separate configuration option, so that you don't need to put the username and password in the URL. Version 3.2 Released January 2014. This is mainly a bugfix release, and is updated to work with more recent versions of Moodle and Maxima 5.31.3. Changes since 3.1: Better support for inequalities Better support for reporting, e.g. more consistent tagging of errors, validation notes etc. Support for \"discrete\" and \"parametric\" plots. Support for plot Alt text. Refactor the Maxima plot command to include \"discrete\" and \"parametric plots\" Refactor the Maxima plot command to include options, e.g., xlabel, ylabel, legend, color, style, point_type. Enable the student's answer to be a function. Minor accessibility improvements to underline all terms generated by Maxima in red, in addition to just using colour. Removal of the \"MaximaPool\" and \"MaximaPool (optimised)\" options for the platform type. We just now have the \"server\" type. Version 3.1 Released July 2013. This includes all the bugs found and fixed during the first year of use at Birmingham, and the first six months at the OU. Changes since 3.0: STACK custom reports Split up the answer notes to report back for each PRT separately. Introduce \"validation notes\". This should work at the PHP level, recording reasons for invalidity. Since we already connect to the CAS, this should also record whether the student's input is equivalent to the teacher's, in what sense, and what form their answer is in. Maybe too slow? Useful perhaps for learning analytics. Expanding CASText features Add in support for strings within CASText. These are currently supported only when the contents is a valid casstring, which is overly restrictive. Improvements to the editing form A way to set defaults for many of the options on the question edit form. There are two ways we could do it. We could make it a system-wide setting, controlled by the admin, just like admins can set defaults for all the quiz settings. Alternatively, we could use user_preferences, so the next time you create a STACK question, it uses the same settings as the previous STACK question you created. Display inputs and PRTs in the order they are mentioned in the question text + specific feedback. Allow an arbitrary PRT node to be the root node, rather than assuming it is the lowest numbered one. Display a graphical representation of each PRT, that can be clicked to jump to that Node on the editing form. When cloning a question with the 'Make copy' button, also clone the question tests. Other improvements Create a \"tidy question\" script that can be used to rename Inputs, PRTs and/or Nodes everywhere in a question. Add CASText-enabled ALT tags to the automatically generated images. For example, adding a final, optional, string argument to the \"plot\" command that the system uses as the ALT text of the image. That way, we can say the function that the graph is of. New option for how inverse trig functions are displayed. A script to run question tests in bulk. Add a new answer test to deal with decimal places. STACK questions with no inputs, and/or no PRTs now work properly. Bug fixes Fix instant validation for text-area inputs. With \"Check the type of the response\" set to \"Yes\", if an expression is given and an equation is entered, the error generated is: \"Your answer is an equation, but the expression to which it is being compared is not. You may have typed something like \"y=2 x+1\" when you only needed to type \"2 x+1\".\" This might confuse students. They don't know what \" the expression to which it is being compared\" is! Perhaps this warning could be reworded something like: \"You have entered an equation, but an equation is not expected here. You may have typed something like \"y=2 x+1\" when you only needed to type \"2 x+1\".\" We should have more messages for each type of failed situation.... Alt tags in images generated by plots has changed. The default value now includes a string representation of the function plotted. See plots for more details. Assorted other accessibility fixes. Standard PRT feedback options are now processed as CAS text. There was a bug where clearing the CAS cache broke images in the question text. Now fixed. Version 3.0 Released January 2013. This has been tested successfully for two semesters, with groups of up to 250 university students and a variety of topics. Major re-engineering of the code by the Open University, The University of Birmingham and the University of Helsinki. Documentation added by Ben Holmes. The most important change is the decision to re-work STACK as a question type for the Moodle quiz. There is no longer a separate front end for STACK, or (currently) a mechanism to include STACK questions into other websites via a SOAP webservice. This round of development does not plan to introduce major new features, or to make major changes to the core functionality. An explicit aim is that \"old questions will still work\". Key features Major difference: Integration into the quiz of Moodle 2.3 as a question type. Support for Maxima up to 5.28.0. Documentation moved from the wiki to within the code base. Move from CVS to GIT. Changes in features between STACK 2 and STACK 3. Key-val pairs, i.e. Question variables and feedback variables, now use Maxima's assignment syntax, e.g. n:5 not the oldstyle n=5 . The importer automatically converts old questions to this new style. Interaction elements, now called inputs, are indicated in questions as [[input:ans1]] to match the existing style in Moodle. Existing questions will be converted when imported. A number of other terminology changes have brought STACK's use into line with Moodle's, e.g. Worked solution has changed to \"general feedback\". Change in the internal name of one answer test Equal_Com_ASS changed to EqualComASS . Feature \"allowed words\" dropped from inputs (i.e. interaction elements). JSMath is no longer under development, and hence we are no longer providing an option for this in STACK. However, in STACK 2 we modified JSMath to enable inputs within equations. Display now assumes the use of a Moodle filter and we recommend (and test with) MathJax, which does not currently support this feature. If it is important for you to use this feature you will need to copy and modify the load.js file from STACK 2 and use JSMath. Worked solution on demand feature has been removed. This was a hack in STACK 2, and the use of Moodle quiz has made this unnecessary. Some options are no longer needed. This functionality is now handled by the \"behaviours\", so are unnecessary in STACK 3. The \"Feedback used\". The \"Mark modification\". We have lost some of the nice styling on the editing form, compared to Stack 2. Answer tests no longer return a numerical mark, hence the \"+AT\" option for mark modification method has been dropped. The STACK Maxima function filter has been removed. It should be replaced by the internal Maxima function sublist . Note, the order of the arguments is reversed! STACK can now work with either MathJax, the Moodle TeX filter, or the OU's maths rendering filter. The Maxima libraries powers and format have been removed. We now strongly discourage the use of dollar symbols for denoting LaTeX mathematics environments. See the pages on MathJax for more information on this change. The expressions supplied by the question author as question tests are no longer simplified at all. See the entry on question tests . Full development log Milestone 0 Get STACK in Moodle to connect to Maxima, and clean-up CAS code. Moodle-style settings page for STACK's options. Re-implement caschat script in Moodle. Re-implement healthcheck script in Moodle. Make all the answer-tests work in Moodle. Make the answer-tests self-test script work in Moodle. Make all the input elements work in Moodle. Make the input elements self-test script work in Moodle. Add all the docs files within the Moodle question type. Clean up the PRT code, and make it work within Moodle. Code to generate the standard test- n question definitions within Moodle, to help with unit testing. Basic Moodle question type that ties all the components together in a basically working form. Milestone 1 Caching of Maxima results, for performance reasons. Database tables to store all aspects of the question definitions. Question editing form that can handle multi-input and multi-PRT questions, with validation. Re-implement question tests in Moodle. Except that the test input need to be evaluated expressions, not just strings. Get deploying, and a fixed number of variants working in Moodle. Make multi-part STACK questions work exactly right in Adaptive behaviour. Evaluate some PRTs if possible, even if not all inputs have been filled in. Correct computation of penalty for each PRT, and hence overall final grade. Problem with expressions in feedback CAS-text not being simplified. Milestone 2 Make sure that STACK questions work as well as possible in the standard Moodle reports. Implement the Moodle backup/restore code for stack questions. Implement Moodle XML format import and export. Investigate ways of running Maxima on a separate server. Implement random seed control like for varnumeric. At this point STACK will be \"ready\" for use with students, although not all features will be available. Milestone 3 Finish STACK 2 importer: ensure all fields are imported correctly by the question importer. Make STACK respect all Moodle behaviours. Deferred feedback Interactive Deferred feedback with CBM Immediate feedback Immediate feedback with CBM - no unit tests, but if the others work, this one must. Add sample_questions, and update question banks for STACK 3.0. Improve the way questions are deployed. Only deploy new variants. Editing form: a way to remove a given PRT node. Fix bug: penalties and other fields being changed from NULL to 0 when being stored in the database. Add back Matrix input type. In adaptive mode, display the scoring information for each PRT when it has been evaluated. Once completed we are ready for the Beta release! Beta testing period Do lots of testing, report and fix bugs. Eliminate as many TODOs from the code as possible. Add back other translations from STACK 2.0, preserving as many of the existing strings as possible. NOTE: the new format of the language strings containing parameters. In particular, strings {$a[0]} need to be changed to {$a->m0}, etc. Add back all questions from the diagnostic quiz project as further examples. Deploy many variants at once. Editing form Form validation should reject a PRT where Node x next -> Node x. Actually, it should validate that we have a connected DAG. Add back the help for editing PRT nodes. When validating the editing form, actually evaluate the Maxima code. When validating the editing form, ensure there are no @ and $ in the fields that expect Maxima code. Ensure links from the editing form end up at the STACK docs. This is now work in progress, but relies on http://tracker.moodle.org/browse/MDL-34035 getting accepted into Moodle core. In which case we can use this commit: https://github.com/timhunt/moodle-qtype_stack/compare/helplinks. Hide dropdown input type in the editing form until there is a way to set the list of choices. Testing questions DOES NOT HAPPEN ANY MORE With a question like test-3, if all the inputs were valid, and then you change the value for some inputs, the corresponding PRTs output the 'Standard feedback for incorrect' when showing the new inputs for the purpose of validation. Images added to prt node true or false feedback do not get displayed. There is a missing call to format_text. A button on the create test-case form, to fill in the expected results to automatically make a passing test-case. Singlechar input should validate that the input is a single char. (There is a TODO in the code for this.) Dropdown input should make sure that only allowed values are submitted. (There is a TODO in the code for this.) Dropdown input element needs some unit tests. (There is a TODO in the code for this.) We need to check for and handle CAS errors in get_prt_result and grade_parts_that_can_be_graded. (There is a TODO in the code for this.) Un-comment the throw in the matrix input. Unit tests for adaptive mode score display - and to verify nothing like that appears for other behaviours. Duplicate response detection for PRTs should consider all previous responses. It appears as if the phrase \"This submission attracted a penalty of ...\" isn't working. It looks like this is the old penalty, not the current . PRT node feedback was briefly not being treated as CAS text. Improve editing UI for test-cases https://github.com/maths/moodle-qtype_stack/issues/15 Optimising Maxima Since I have optimized Maxima, I removed write permissions to /moodledata/stack/maximalocal.mac. This makes the healthcheck script unrunnable, and hence I cannot clear the STACK cache. Finish off the system for running Maxima on another server (https://github.com/maths/moodle-qtype_stack/pull/8) Documentation system fix maintenance.php . Version 2.2 Released: October 2010 session. Enhanced reporting features. Enhanced question management features in Moodle. E.g. import multiple questions from AiM/Maple TA at once, assign multiple questions to Moodle question banks. Slider interaction elements. Version 2.1 Developed by Chris Sangwin and Simon Hammond at the University of Birmingham. Released: Easter 2010 session. Key features Precision answer test added to allow significant to be checked. Form answer test added to test if an expression is in completed square form. List interaction element expanded to include checkboxes. See List . Move to Maxima's random() function, rather than generate our own pseudo random numbers Conditionals in CASText Support for Maxima 5.20.1 New option added: OptWorkedSol. This allows the teacher to decide whether the tick box to request the worked solution is available. Sample resources included as part of the FETLAR project. Version 2.0 Released, September 2007. Developed by Jonathan Hart and Chris Sangwin at the University of Birmingham. Key features Display of mathematics taken care of by JSMath. Integrated into the Moodle quiz using the \"remote question protocol\" . The RQP was designed with STACK, and similar systems, in mind. Variety of interaction elements. Multi-part questions. Cache. Item tests. Version 1.0 Released, 2005. Developed by Chris Sangwin at the University of Birmingham. Pre-history STACK is a direct development of the CABLE project which ran at the University of Birmingham. CABLE was a development of the design of the AiM computer aided assessment system.","title":"STACK Development History"},{"location":"en/Developer/Development_history/#stack-development-history","text":"For current and future plans, see Development track and Future plans .","title":"STACK Development History"},{"location":"en/Developer/Development_history/#version-437","text":"Released October 2020. Bug fixes and minor improvements.","title":"Version 4.3.7"},{"location":"en/Developer/Development_history/#version-436","text":"Released October 2020. Bug fixes and minor improvements.","title":"Version 4.3.6"},{"location":"en/Developer/Development_history/#version-435","text":"Add in the HELM styles.","title":"Version 4.3.5"},{"location":"en/Developer/Development_history/#version-435_1","text":"Released August 2020. Bug fixes and minor improvements. Remove all strictSyntax functionality (DB, import/export functions remain). Add in further styles for proof with numbered lists.","title":"Version 4.3.5"},{"location":"en/Developer/Development_history/#version-434","text":"Released June 2020. Bug fixes and minor improvements to units.","title":"Version 4.3.4"},{"location":"en/Developer/Development_history/#version-433","text":"Released May 2020. Bug fixes and documentation.","title":"Version 4.3.3"},{"location":"en/Developer/Development_history/#version-432","text":"Released May 2020. Document and support for simple manipulation of real intervals which Maxima does not have a library for. Document and support for simple manipulation of propositional logic based on Maxima's logic package. Document and support for simple manipulation of tables mainly to support easy display of truth tables in logic.. Better support for semi-automatic marking . Add in the resizable matrix input type (varmatrix). Fixed bug with javascript on pages with more than one matrix.","title":"Version 4.3.2"},{"location":"en/Developer/Development_history/#version-431","text":"Released April 2020. Bug fixes and features which require DB changes. Add in STACK option \"logicsymbol\" to control how logical symbols are displayed. Add in formative potential response trees. Add in option feedbackstyle to potential response trees. Add in a new answer test AlgEquivNouns.","title":"Version 4.3.1"},{"location":"en/Developer/Development_history/#version-43","text":"Released April 2020. This has been tested successfully during the spring semester, at three insitutions with large groups. STACK 4.3 is, because of the new parser, slightly slower than previous releases. Version 4.3 requires the PHP package mbstring (which will be required from Moodle 3.9 anyway). Do not attempt to upgrade without checking you have mbstring on your server. Navigate to this page on Moodle to confirm. /admin/environment.php Version 4.3 represents a major internal re-engineering of STACK, with a new dedicated parser and an updated mechanism for connecting to Maxima. This is a significant improvement, refactoring some of the oldest code and unblocking progress to a wide range of requested features. There have been a number of changes: In the forbidden words we now match whole words not substrings. Removed the RegExp answer test. Added the SRegExp answer test using Maxima's regex_match function. Use of units is now reflected throughout a question. This reduces the need to declare units in all contexts. Internally, the \"+-\" operator has been replaced with a new infix operation \"#pm#\". Instead of a+-b teachers now must type a#pm#b . This change was necessary to deal with differences between versions of Maxima when dealing with expresions. New features in v4.3: Add in full parser, to address issue #324. Add in input option 'align'. Add in input option 'nounits'. Add in input option 'compact' to input \"Show the validation\" parameter. Add in a basic question use report page, linked from the question testing page. Add in house styles to help typeset proof . Add cache to help reduce parsing overhead.","title":"Version 4.3"},{"location":"en/Developer/Development_history/#version-423","text":"Released January 2020. This release is a marker before the release of STACK v4.3.","title":"Version 4.2.3"},{"location":"en/Developer/Development_history/#version-422","text":"Released September 2019. Removed the Maxima MathML code (which wasn't connected or used). Add in metadata system to the documentation (Thanks to Malthe Sporring for this suggestion). Add in extra option simp to inputs. Add in extra options in the input allowempty and hideanswer . Review and updated documentation (thanks to Malthe Sporring).","title":"Version 4.2.2"},{"location":"en/Developer/Development_history/#version-421","text":"Released August 2018. Add in privacy subsystem classes for GDPR compliance.","title":"Version 4.2.1"},{"location":"en/Developer/Development_history/#version-42","text":"Released July 2018. Note: newer versions of Maxima require that a variable has been initialised as a list/array before you can assign values to its indices. For this reason some older questions may stop working when you upgrade to a new version of Maxima. Please use the bulk test script after each upgrade! See issue #343. Note: the behaviour of the Maxima addrow function has changed. Use the bulk test script to identify questions which are affected. Note, once you save a question you will update the version number, and this will prevent questions using addrow from being identified. Add support for using JSXGraph http://jsxgraph.org for better support of interactive graphics, and as part of an input type. See JSXGraph Add in a version number to STACK questions. Update reasoning by equivalence. This includes the following. Equating coefficients as a step in reasoning by equivalence. E.g. a x^2+b x+c=r x^2+s x+t \\leftrightarrow a=r \\mbox{ and } b=s \\mbox{ and } c=t . See poly_equate_coeffs in assessment.mac Solving simple simultaneous equations. (Interface) Include simple calculus operations (but constant of integration needs some further thought.) Refactor internal question validation away from Moodle editing, and into the question type. Add in a \"warning\" system. Add in native multi-language support, to separate out languages in the question text. This is needed so as not to create spurious validation errors, such as \"input cannot occur twice\". Output results of PRTs in the summarise_response method of question.php . Gives more information for reporting. Sort out the \"addrow\" problem. (See issue #333). This is changed to \"rowadd\". Add in check for \"mul\" (see issue #339) and better checking of input options. Refactor equiv_input and MCQ to make use of the new extra options mechanism. Add in support for the Maxima simplex package. Add an answer test to check if decimal separator is in the wrong place (See issue #314). Add an answer test to check sets and provide better feedback. Significant improvements to the bulk testing, returning runtime errors and identifying all questions without tests or worked solutions. Better CSS. (See issue #380)","title":"Version 4.2"},{"location":"en/Developer/Development_history/#stack-41","text":"Released December 2017. Numerous minor bug fixes and improvements. Add in support for the syntaxHint in the matrix input. On the questiontestrun page, have options to (a) delete all question variants. Add in a size option to set the size of a plot. Add in an answer test which accepts \"at least\" n significant figures. (See issue #313) Add in the \"string\" input type. Add test which checks if there are any rational expressions in the denominator of a fraction. (Functionality added to LowestTerms test, which looks at the form of rational expressions). Add an option to remove hard-coded \"not answered\" option from Radio input type. (See issue #304) Add in a \"numerical\" input type which requires a student to type in a number. This has various options, see the docs . Specify numerical precision for validation in numerical and units input types. Refactor the inputs so that extra options can be added more easily, and shared between inputs.","title":"STACK 4.1"},{"location":"en/Developer/Development_history/#stack-401","text":"Released August 2017. This is a bug-fix release, mostly associated with the upgrade process from version 3.X to 4.X. Fix a bug in the upgrade script. Fix a bug in the testing procedure in the \"question test\" script, and improve the way deployed variants are tested. Make SVG the default image format for pictures created by Maxima. (Old .png code left in place in this release, but no user option to access this functionality.)","title":"STACK 4.0.1"},{"location":"en/Developer/Development_history/#stack-40","text":"Released August 2017. STACK 4.0 represents a major release of STACK and is a non-reversible change, with important differences which break back-compatibility. Note that much of the underlying code in this development have been used at Aalto for many years, with complex questions. We believe these are battle tested improvements in the functionality. STACK 4.0 includes the block features and other important changes in CASText. To generate the LaTeX displayed form of a CAS variable in CASText you must use {@...@} . Note the curly braces which now must be used. We have an upgrade script for existing questions. To generate the Maxima value of a CAS variable in CASText you can use {#...#} . This is useful when interfacing with other software, or showing examples to students. CASText now supports conditional statements and adaptive blocks. See question blocks . Other changes. The question note is no longer limited in size. Mathematics in LaTeX can no longer be supported with $..$ or $$..$$ . This usage has been discouraged for many years, and we have a long-standing \"fix\" script to convert from dollars to the forms \\(..\\) and \\[..\\] . Remove the artificial limit on the size of CASText. We now rely on surrounding limits, like POST requests and database limits. This may result in ugly errors, but we need larger limits to accommodate interactive elements embedded into text fields.","title":"STACK 4.0"},{"location":"en/Developer/Development_history/#stack-36","text":"Released July 2017. This release developed the first version of an input to assess line by line \"reasoning by equivalence\" input. See the documentation on equivalence reasoning . Other new features and enhancements in this release. Modify the text area input so that each line is validated separately. Add a \"scratch working\" input type in which students can record their thinking etc. alongside the final answer. Support for intervals in STACK, using the Maxima syntax oo(a,b) for an open interval (a,b) , cc(a,b) for an open interval [a,b] and oc(a,b) , co(a,b) for the half open intervals. Much better support for solving and dealing with single variable inequalities.","title":"STACK 3.6"},{"location":"en/Developer/Development_history/#version-357","text":"Released June 2017. Numerous minor bug fixes and improvements.","title":"Version 3.5.7"},{"location":"en/Developer/Development_history/#version-356","text":"Released December 2016. Numerous minor bug fixes and improvements, particularly with numerical tests and scientific units. Change the display so that the underscore in atoms is displayed using subscripts. Added support for logarithms to an arbitrary base. Added SigFigsStrict answer test. Better support for floating point numbers, including the preservation and display of trailing zeros in numerical tests. Note, many of these changes have resulted in stricter rules on the acceptability of strings and stricter validation rules. 1 You can no longer have a feedback variable, or a question variable, with a name that is the same as an input. 2. log10 function and log_b functions are now handled by STACK, by manipulating the CAS string before it is sent to Maxima. Therefore, if your question previously defined a function with names like that, it will now break. 3. Variable names with a digit in the middle eqn1gen no longer work. (They should never have been used, but used not to break questions.) 4. Previously, unnecessary \\ in CAS text were ignored. E.g. if you have a question variable called vangle2 then {@\\vangle2@} used to work, it does not any more.","title":"Version 3.5.6"},{"location":"en/Developer/Development_history/#version-355","text":"Released August 2016. Numerous minor bug fixes and improvements, particularly with numerical tests and scientific units. Expose functionality of printf to better control the display of integers and floats. Expand the \"units\" answer test to allow authors to use other numerical answer tests, see units . Add a mechanism to allow spaces in inputs. Trial functionality, which might change. Improve the mechanism to create a Maxima image and update the options in one go. Numerous options for units and the display of fractions. Added an xMaxima file to give more direct access to the sandbox.","title":"Version 3.5.5"},{"location":"en/Developer/Development_history/#version-35","text":"Numerous minor bug fixes and improvements. Added an export mechanism for single stack questions through a link on the \"Question tests & deployed variant\" page. Modify the text area input so that each line is validated separately. Support for plot2d \"label\" command. Added support for grid2d for plot in newer versions of Maxima only. Add the NOCONST option to the ATInt answertest. Added support for optional Maxima packages through the config settings. Added the dropdown, radio and checkbox input types. Added basic support for scientific units , including a new input type and science answer tests.","title":"Version 3.5"},{"location":"en/Developer/Development_history/#version-34","text":"Released September 2015. This contains numerous minor bug fixes and improvements. Expand the capability of ATInt options to accept the integrand to improve feedback. When validating a student's expression, add the option to show a list of variables alongside the displayed expression. The install process now attempts to auto-generate a Maxima image. Support for the stats package added. Change in the behaviour of the CASEqual answer test. Now we always assume simp:false . Add support for more AMS mathematics environments, including \\begin{align}...\\end{align} , \\begin{align*}...\\end{align*} etc. STACK tried to automatically write an optimised image for Linux. This should help installs where Unix access is difficult.","title":"Version 3.4"},{"location":"en/Developer/Development_history/#version-33","text":"Released September 2014. This contains numerous minor bug fixes and improvements. Added in the Question blocks Changes to validation of casstrings. We now allow syntax such as 3e2 to represent floating point numbers. The strict syntax settings still flag 3e2 as \"missing stars\". Improvements to catching common syntax errors with trig functions, e.g. sin^-1(x) or cos[x] Refactored the numerical tests. This means they are now standard Maxima tests, not using PHP. Allow the use of the Maxima orderless and ordergreat in cassessions. This helps with display, without turning off simplification. Expanding CASText features. Enable a function as an answer type, e.g. improve validation. Refactor answer test unit testing to distinguish \"test fail\" from \"zero\". Reject things like sin*(x) and sin^2(x) as invalid Provide a new option on how parentheses are displayed for matrices Provide an extra syntax checking option to enable stars to be inserted between single characters, e.g. xy -> x*y. Add the input parameter allowwords to enable the teacher to specify some permitted words of more than 2 symbols length. Reinstate the STACK 2 feature called \"Hints\". This has been done as a \"Fact sheet\" to avoid ambiguity with other Moodle features. See Fact sheet documentation. Better install (auto OS detection), healthcheck and testing. When using the Maxima Pool servlet, it is now possible to use any type of HTTP authentication (e.g. basic or digest), and there is a separate configuration option, so that you don't need to put the username and password in the URL.","title":"Version 3.3"},{"location":"en/Developer/Development_history/#version-32","text":"Released January 2014. This is mainly a bugfix release, and is updated to work with more recent versions of Moodle and Maxima 5.31.3. Changes since 3.1: Better support for inequalities Better support for reporting, e.g. more consistent tagging of errors, validation notes etc. Support for \"discrete\" and \"parametric\" plots. Support for plot Alt text. Refactor the Maxima plot command to include \"discrete\" and \"parametric plots\" Refactor the Maxima plot command to include options, e.g., xlabel, ylabel, legend, color, style, point_type. Enable the student's answer to be a function. Minor accessibility improvements to underline all terms generated by Maxima in red, in addition to just using colour. Removal of the \"MaximaPool\" and \"MaximaPool (optimised)\" options for the platform type. We just now have the \"server\" type.","title":"Version 3.2"},{"location":"en/Developer/Development_history/#version-31","text":"Released July 2013. This includes all the bugs found and fixed during the first year of use at Birmingham, and the first six months at the OU. Changes since 3.0:","title":"Version 3.1"},{"location":"en/Developer/Development_history/#stack-custom-reports","text":"Split up the answer notes to report back for each PRT separately. Introduce \"validation notes\". This should work at the PHP level, recording reasons for invalidity. Since we already connect to the CAS, this should also record whether the student's input is equivalent to the teacher's, in what sense, and what form their answer is in. Maybe too slow? Useful perhaps for learning analytics.","title":"STACK custom reports"},{"location":"en/Developer/Development_history/#expanding-castext-features","text":"Add in support for strings within CASText. These are currently supported only when the contents is a valid casstring, which is overly restrictive.","title":"Expanding CASText features"},{"location":"en/Developer/Development_history/#improvements-to-the-editing-form","text":"A way to set defaults for many of the options on the question edit form. There are two ways we could do it. We could make it a system-wide setting, controlled by the admin, just like admins can set defaults for all the quiz settings. Alternatively, we could use user_preferences, so the next time you create a STACK question, it uses the same settings as the previous STACK question you created. Display inputs and PRTs in the order they are mentioned in the question text + specific feedback. Allow an arbitrary PRT node to be the root node, rather than assuming it is the lowest numbered one. Display a graphical representation of each PRT, that can be clicked to jump to that Node on the editing form. When cloning a question with the 'Make copy' button, also clone the question tests.","title":"Improvements to the editing form"},{"location":"en/Developer/Development_history/#other-improvements","text":"Create a \"tidy question\" script that can be used to rename Inputs, PRTs and/or Nodes everywhere in a question. Add CASText-enabled ALT tags to the automatically generated images. For example, adding a final, optional, string argument to the \"plot\" command that the system uses as the ALT text of the image. That way, we can say the function that the graph is of. New option for how inverse trig functions are displayed. A script to run question tests in bulk. Add a new answer test to deal with decimal places. STACK questions with no inputs, and/or no PRTs now work properly.","title":"Other improvements"},{"location":"en/Developer/Development_history/#bug-fixes","text":"Fix instant validation for text-area inputs. With \"Check the type of the response\" set to \"Yes\", if an expression is given and an equation is entered, the error generated is: \"Your answer is an equation, but the expression to which it is being compared is not. You may have typed something like \"y=2 x+1\" when you only needed to type \"2 x+1\".\" This might confuse students. They don't know what \" the expression to which it is being compared\" is! Perhaps this warning could be reworded something like: \"You have entered an equation, but an equation is not expected here. You may have typed something like \"y=2 x+1\" when you only needed to type \"2 x+1\".\" We should have more messages for each type of failed situation.... Alt tags in images generated by plots has changed. The default value now includes a string representation of the function plotted. See plots for more details. Assorted other accessibility fixes. Standard PRT feedback options are now processed as CAS text. There was a bug where clearing the CAS cache broke images in the question text. Now fixed.","title":"Bug fixes"},{"location":"en/Developer/Development_history/#version-30","text":"Released January 2013. This has been tested successfully for two semesters, with groups of up to 250 university students and a variety of topics. Major re-engineering of the code by the Open University, The University of Birmingham and the University of Helsinki. Documentation added by Ben Holmes. The most important change is the decision to re-work STACK as a question type for the Moodle quiz. There is no longer a separate front end for STACK, or (currently) a mechanism to include STACK questions into other websites via a SOAP webservice. This round of development does not plan to introduce major new features, or to make major changes to the core functionality. An explicit aim is that \"old questions will still work\". Key features Major difference: Integration into the quiz of Moodle 2.3 as a question type. Support for Maxima up to 5.28.0. Documentation moved from the wiki to within the code base. Move from CVS to GIT.","title":"Version 3.0"},{"location":"en/Developer/Development_history/#changes-in-features-between-stack-2-and-stack-3","text":"Key-val pairs, i.e. Question variables and feedback variables, now use Maxima's assignment syntax, e.g. n:5 not the oldstyle n=5 . The importer automatically converts old questions to this new style. Interaction elements, now called inputs, are indicated in questions as [[input:ans1]] to match the existing style in Moodle. Existing questions will be converted when imported. A number of other terminology changes have brought STACK's use into line with Moodle's, e.g. Worked solution has changed to \"general feedback\". Change in the internal name of one answer test Equal_Com_ASS changed to EqualComASS . Feature \"allowed words\" dropped from inputs (i.e. interaction elements). JSMath is no longer under development, and hence we are no longer providing an option for this in STACK. However, in STACK 2 we modified JSMath to enable inputs within equations. Display now assumes the use of a Moodle filter and we recommend (and test with) MathJax, which does not currently support this feature. If it is important for you to use this feature you will need to copy and modify the load.js file from STACK 2 and use JSMath. Worked solution on demand feature has been removed. This was a hack in STACK 2, and the use of Moodle quiz has made this unnecessary. Some options are no longer needed. This functionality is now handled by the \"behaviours\", so are unnecessary in STACK 3. The \"Feedback used\". The \"Mark modification\". We have lost some of the nice styling on the editing form, compared to Stack 2. Answer tests no longer return a numerical mark, hence the \"+AT\" option for mark modification method has been dropped. The STACK Maxima function filter has been removed. It should be replaced by the internal Maxima function sublist . Note, the order of the arguments is reversed! STACK can now work with either MathJax, the Moodle TeX filter, or the OU's maths rendering filter. The Maxima libraries powers and format have been removed. We now strongly discourage the use of dollar symbols for denoting LaTeX mathematics environments. See the pages on MathJax for more information on this change. The expressions supplied by the question author as question tests are no longer simplified at all. See the entry on question tests .","title":"Changes in features between STACK 2 and STACK 3."},{"location":"en/Developer/Development_history/#full-development-log","text":"","title":"Full development log"},{"location":"en/Developer/Development_history/#milestone-0","text":"Get STACK in Moodle to connect to Maxima, and clean-up CAS code. Moodle-style settings page for STACK's options. Re-implement caschat script in Moodle. Re-implement healthcheck script in Moodle. Make all the answer-tests work in Moodle. Make the answer-tests self-test script work in Moodle. Make all the input elements work in Moodle. Make the input elements self-test script work in Moodle. Add all the docs files within the Moodle question type. Clean up the PRT code, and make it work within Moodle. Code to generate the standard test- n question definitions within Moodle, to help with unit testing. Basic Moodle question type that ties all the components together in a basically working form.","title":"Milestone 0"},{"location":"en/Developer/Development_history/#milestone-1","text":"Caching of Maxima results, for performance reasons. Database tables to store all aspects of the question definitions. Question editing form that can handle multi-input and multi-PRT questions, with validation. Re-implement question tests in Moodle. Except that the test input need to be evaluated expressions, not just strings. Get deploying, and a fixed number of variants working in Moodle. Make multi-part STACK questions work exactly right in Adaptive behaviour. Evaluate some PRTs if possible, even if not all inputs have been filled in. Correct computation of penalty for each PRT, and hence overall final grade. Problem with expressions in feedback CAS-text not being simplified.","title":"Milestone 1"},{"location":"en/Developer/Development_history/#milestone-2","text":"Make sure that STACK questions work as well as possible in the standard Moodle reports. Implement the Moodle backup/restore code for stack questions. Implement Moodle XML format import and export. Investigate ways of running Maxima on a separate server. Implement random seed control like for varnumeric. At this point STACK will be \"ready\" for use with students, although not all features will be available.","title":"Milestone 2"},{"location":"en/Developer/Development_history/#milestone-3","text":"Finish STACK 2 importer: ensure all fields are imported correctly by the question importer. Make STACK respect all Moodle behaviours. Deferred feedback Interactive Deferred feedback with CBM Immediate feedback Immediate feedback with CBM - no unit tests, but if the others work, this one must. Add sample_questions, and update question banks for STACK 3.0. Improve the way questions are deployed. Only deploy new variants. Editing form: a way to remove a given PRT node. Fix bug: penalties and other fields being changed from NULL to 0 when being stored in the database. Add back Matrix input type. In adaptive mode, display the scoring information for each PRT when it has been evaluated. Once completed we are ready for the Beta release!","title":"Milestone 3"},{"location":"en/Developer/Development_history/#beta-testing-period","text":"Do lots of testing, report and fix bugs. Eliminate as many TODOs from the code as possible. Add back other translations from STACK 2.0, preserving as many of the existing strings as possible. NOTE: the new format of the language strings containing parameters. In particular, strings {$a[0]} need to be changed to {$a->m0}, etc. Add back all questions from the diagnostic quiz project as further examples. Deploy many variants at once.","title":"Beta testing period"},{"location":"en/Developer/Development_history/#editing-form","text":"Form validation should reject a PRT where Node x next -> Node x. Actually, it should validate that we have a connected DAG. Add back the help for editing PRT nodes. When validating the editing form, actually evaluate the Maxima code. When validating the editing form, ensure there are no @ and $ in the fields that expect Maxima code. Ensure links from the editing form end up at the STACK docs. This is now work in progress, but relies on http://tracker.moodle.org/browse/MDL-34035 getting accepted into Moodle core. In which case we can use this commit: https://github.com/timhunt/moodle-qtype_stack/compare/helplinks. Hide dropdown input type in the editing form until there is a way to set the list of choices.","title":"Editing form"},{"location":"en/Developer/Development_history/#testing-questions","text":"DOES NOT HAPPEN ANY MORE With a question like test-3, if all the inputs were valid, and then you change the value for some inputs, the corresponding PRTs output the 'Standard feedback for incorrect' when showing the new inputs for the purpose of validation. Images added to prt node true or false feedback do not get displayed. There is a missing call to format_text. A button on the create test-case form, to fill in the expected results to automatically make a passing test-case. Singlechar input should validate that the input is a single char. (There is a TODO in the code for this.) Dropdown input should make sure that only allowed values are submitted. (There is a TODO in the code for this.) Dropdown input element needs some unit tests. (There is a TODO in the code for this.) We need to check for and handle CAS errors in get_prt_result and grade_parts_that_can_be_graded. (There is a TODO in the code for this.) Un-comment the throw in the matrix input. Unit tests for adaptive mode score display - and to verify nothing like that appears for other behaviours. Duplicate response detection for PRTs should consider all previous responses. It appears as if the phrase \"This submission attracted a penalty of ...\" isn't working. It looks like this is the old penalty, not the current . PRT node feedback was briefly not being treated as CAS text. Improve editing UI for test-cases https://github.com/maths/moodle-qtype_stack/issues/15","title":"Testing questions"},{"location":"en/Developer/Development_history/#optimising-maxima","text":"Since I have optimized Maxima, I removed write permissions to /moodledata/stack/maximalocal.mac. This makes the healthcheck script unrunnable, and hence I cannot clear the STACK cache. Finish off the system for running Maxima on another server (https://github.com/maths/moodle-qtype_stack/pull/8)","title":"Optimising Maxima"},{"location":"en/Developer/Development_history/#documentation-system","text":"fix maintenance.php .","title":"Documentation system"},{"location":"en/Developer/Development_history/#version-22","text":"Released: October 2010 session. Enhanced reporting features. Enhanced question management features in Moodle. E.g. import multiple questions from AiM/Maple TA at once, assign multiple questions to Moodle question banks. Slider interaction elements.","title":"Version 2.2"},{"location":"en/Developer/Development_history/#version-21","text":"Developed by Chris Sangwin and Simon Hammond at the University of Birmingham. Released: Easter 2010 session. Key features Precision answer test added to allow significant to be checked. Form answer test added to test if an expression is in completed square form. List interaction element expanded to include checkboxes. See List . Move to Maxima's random() function, rather than generate our own pseudo random numbers Conditionals in CASText Support for Maxima 5.20.1 New option added: OptWorkedSol. This allows the teacher to decide whether the tick box to request the worked solution is available. Sample resources included as part of the FETLAR project.","title":"Version 2.1"},{"location":"en/Developer/Development_history/#version-20","text":"Released, September 2007. Developed by Jonathan Hart and Chris Sangwin at the University of Birmingham. Key features Display of mathematics taken care of by JSMath. Integrated into the Moodle quiz using the \"remote question protocol\" . The RQP was designed with STACK, and similar systems, in mind. Variety of interaction elements. Multi-part questions. Cache. Item tests.","title":"Version 2.0"},{"location":"en/Developer/Development_history/#version-10","text":"Released, 2005. Developed by Chris Sangwin at the University of Birmingham.","title":"Version 1.0"},{"location":"en/Developer/Development_history/#pre-history","text":"STACK is a direct development of the CABLE project which ran at the University of Birmingham. CABLE was a development of the design of the AiM computer aided assessment system.","title":"Pre-history"},{"location":"en/Developer/Development_track/","text":"Development track for STACK Requests for features and ideas for developing STACK are all recorded in Future plans . The past development history is documented on Development history . How to report bugs and make suggestions is described on the community page. Version 4.4 Maxima side PRTs. Move all functions to Maxima. Change behaviour of UnitsAbsolute in response to discussion of issue #448. Make use of the Maxima function sig_figs_from_str(strexp) in utils.mac which returns the number of decimal places/significant figures in a variable (useful when providing feedback). Needed for the refactoring. For \"inputs 2\"? Better CSS, including \"tool tips\". May need to refactor JavaScript. (See issue #380) Add support for matrices with floating point entries, and testing numerical accuracy. Expand support for input validation options to matrices (e.g. floatnum, rationalize etc.) Update MCQ to accept units. Add a base N check to the numeric input. Refactor DB of 'insterStars' and remove stack_input_factory::convert_legacy_insert_stars. Really use new values throughout. See Future plans for syntax of answers and STACK Refactor numerical answer tests to make proper use of ast. Other Better install code (see #332). Move find_units_synonyms into the parser more fully? 1st version of API. Enable individual questions to load Maxima libraries. (See issue #305) Markdown support?","title":"Development track for STACK"},{"location":"en/Developer/Development_track/#development-track-for-stack","text":"Requests for features and ideas for developing STACK are all recorded in Future plans . The past development history is documented on Development history . How to report bugs and make suggestions is described on the community page.","title":"Development track for STACK"},{"location":"en/Developer/Development_track/#version-44","text":"","title":"Version 4.4"},{"location":"en/Developer/Development_track/#maxima-side-prts","text":"Move all functions to Maxima. Change behaviour of UnitsAbsolute in response to discussion of issue #448. Make use of the Maxima function sig_figs_from_str(strexp) in utils.mac which returns the number of decimal places/significant figures in a variable (useful when providing feedback). Needed for the refactoring.","title":"Maxima side PRTs."},{"location":"en/Developer/Development_track/#for-inputs-2","text":"Better CSS, including \"tool tips\". May need to refactor JavaScript. (See issue #380) Add support for matrices with floating point entries, and testing numerical accuracy. Expand support for input validation options to matrices (e.g. floatnum, rationalize etc.) Update MCQ to accept units. Add a base N check to the numeric input. Refactor DB of 'insterStars' and remove stack_input_factory::convert_legacy_insert_stars. Really use new values throughout. See Future plans for syntax of answers and STACK Refactor numerical answer tests to make proper use of ast.","title":"For \"inputs 2\"?"},{"location":"en/Developer/Development_track/#other","text":"Better install code (see #332). Move find_units_synonyms into the parser more fully? 1st version of API. Enable individual questions to load Maxima libraries. (See issue #305) Markdown support?","title":"Other"},{"location":"en/Developer/Documentation/","text":"STACK User Documentation User documentation is written in an extended implementation of the markup language MarkDown . This page is intended for people wishing to write, edit and translate the documentation. Markdown language The markdown project external site. A cheat sheet is available for quick reference. Warning: markdown uses whitespace and formatting to give meaning. The number of spaces at the beginning and the ends of lines convey specific meaning in markdown. An example is the way code blocks are included, which is useful for including fragments of Maxima code. STACK's markdown documentation system STACK stores all documentation within language subdirectories. For example, English is within /doc/en/ . The directory structure forms the structure of the documentation. Files must use the .md extension. Links to files must use the .md extension. File and directory names should be safe for urls and will be used as the document's title. Spaces can be encoded as underscore _ , e.g. Question state caching should be named Question_state_caching.md When accessing a directory, the file index.md in that directory will be displayed, hence this file should be created for new directories. Note index.md will never be displayed in a directory listing, it can be accessed by navigating to the directory itself. Directories may be nested. A directory listing will be appended to the site map when rendered. Metadata about the files is stored in meta_en.json . Every page should have metadata. How relative links work in STACK's documentation Note Links in the documentation are relative. You can use the following standard notation, for: a document in the current directory simply use the filename e.g. [Link to Article](Article.md) the current directory use ./ e.g. ./Article.md refers to Article in this directory ./#reference refers to the index of the current directory scrolled to the heading with id reference the parent directory use ../ e.g. ../ refers to the docs homepage (if currently only one tier deep) ../Category/Article.md refers to Article.md in the Category in the parent directory. Conventions in authoring pages Markdown does not have categories in the way that MediaWiki does. Instead, we strongly encourage authors to include a # See also section at the end of each STACK documentation page. This should be part of the markdown page. Adding images and files to the documentation The directory /doc/content/ is for static content which is served by the documentation. If you want to serve content from the docs please place it in this directory. When writing links use direct relative links to $CFG->wwwroot . \"/question/type/stack/doc/content\"; E.g. in About/Logo.md use ![STACK Logo](../../content/logo.png) The text in square brackets is the alt text, which is important for visually impaired users reading the documentation. There are many great guides for writing good alt text . Adding a link to video in the documentation To embed video into the documentation first find the unique video key, VIDEO-KEY , then then modify [![IMAGE ALT TEXT](http://img.youtube.com/vi/VIDEO-KEY/0.jpg)](https://www.youtube.com/watch?v=VIDEO-KEY \"Video title\") For example, cpwo-D6EUgA , gives [![IMAGE ALT TEXT](http://img.youtube.com/vi/cpwo-D6EUgA/0.jpg)](https://www.youtube.com/watch?v=cpwo-D6EUgA \"Your First STACK Question\") The following rendered markdown: Embed video in the documentation Using an iframe such as <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cpwo-D6EUgA\" frameborder=\"0\" allowfullscreen></iframe> Gives Mathematics For the purpose of rendering mathematical equations, an extended version of PHP Markdown Extra is used. It uses LaTeX style notation \\( and \\[ to write inline and display maths respectively. Fortunately GitHub documentation uses the same notation :D. An example: \\[ \\frac{\\int_a^b f(t) \\textrm{d} t }{b - a} \\] \\frac{\\int_a^b f(t) \\textrm{d} t}{b - a} Compatibility with the online docs The STACK docs are made available online on docs.stack-assessment.org . For more information on how this is achieved, see the Website documentation . However this places certain limitations on the sort of elements that can be included in the documentation: You can only have relative links to files within the doc directory. This means you should not link relatively to, for example, one of the stack .php files. If you want to demonstrate a behaviour of one of STACKs files, it is better to do a direct link to that file on GitHub or on the STACK demo. You cannot use HTML text areas to display LaTeX Math, as that will display poorly. Please use multiline code blocks instead. Examples Paragraphs and formatting Paragraphs are made with two new line characters, a single new line will not be rendered: This is in a paragraph, so is this This is a new paragraph This is a **bold** word and this is an *italicised* word. This is in a paragraph, so is this This is a new paragraph This is a bold word and this is an italicised word. Headings Headings are indicated by the # symbol # Huge ## Quite huge ### Not so huge #### Barely huge Huge Quite huge Not so huge Barely huge Lists Ordered (numbered) and unordered lists are very intuitive, and nesting is easy 1. first point 2. second point, which is so long it needs two lines 3. third point will demonstrate nesting 1. Nested 2. Lists * Unordered lists made my stars * You can nest with different styles 1. See? first point second point, which is so long it needs two lines third point will demonstrate nesting Nested Lists Unordered lists made my stars You can nest with different styles See? Code (monospace) Code can be displayed inline using back ticks `content` to display content . Code can be displayed in a block by indenting: Block style code Will display Block style code Links Links are written [text](Documentation.md) to give text . They must end with the .md extension. External links are easily generated using <http://sesamestreet.com> gives http://sesamestreet.com , email address work similarly <count@sesamestreet.com> gives count@sesamestreet.com . Other cool features Definition lists : Are one of the many cool features available They are useful for : Dictionary style entries Definition lists Are one of the many cool features available They are useful for Dictionary style entries To force block style code write ~~~~ above and below, good for after a list when indentation will be interpreted as part of the list ~~~~~~~~~~ Like this ~~~~~~~~~~ > When quoting the syntax is like in emails. When quoting the syntax is like in emails. Tables | are also ------------ | -------- an extremely | useful feature | ! Tables are also an extremely useful feature ! See also MarkDown PHP Markdown Extra PHP Markdown Extra Math","title":"STACK User Documentation"},{"location":"en/Developer/Documentation/#stack-user-documentation","text":"User documentation is written in an extended implementation of the markup language MarkDown . This page is intended for people wishing to write, edit and translate the documentation.","title":"STACK User Documentation"},{"location":"en/Developer/Documentation/#markdown-language","text":"The markdown project external site. A cheat sheet is available for quick reference. Warning: markdown uses whitespace and formatting to give meaning. The number of spaces at the beginning and the ends of lines convey specific meaning in markdown. An example is the way code blocks are included, which is useful for including fragments of Maxima code.","title":"Markdown language"},{"location":"en/Developer/Documentation/#stacks-markdown-documentation-system","text":"STACK stores all documentation within language subdirectories. For example, English is within /doc/en/ . The directory structure forms the structure of the documentation. Files must use the .md extension. Links to files must use the .md extension. File and directory names should be safe for urls and will be used as the document's title. Spaces can be encoded as underscore _ , e.g. Question state caching should be named Question_state_caching.md When accessing a directory, the file index.md in that directory will be displayed, hence this file should be created for new directories. Note index.md will never be displayed in a directory listing, it can be accessed by navigating to the directory itself. Directories may be nested. A directory listing will be appended to the site map when rendered. Metadata about the files is stored in meta_en.json . Every page should have metadata.","title":"STACK's markdown documentation system"},{"location":"en/Developer/Documentation/#how-relative-links-work-in-stacks-documentation","text":"Note Links in the documentation are relative. You can use the following standard notation, for: a document in the current directory simply use the filename e.g. [Link to Article](Article.md) the current directory use ./ e.g. ./Article.md refers to Article in this directory ./#reference refers to the index of the current directory scrolled to the heading with id reference the parent directory use ../ e.g. ../ refers to the docs homepage (if currently only one tier deep) ../Category/Article.md refers to Article.md in the Category in the parent directory.","title":"How relative links work in STACK's documentation"},{"location":"en/Developer/Documentation/#conventions-in-authoring-pages","text":"Markdown does not have categories in the way that MediaWiki does. Instead, we strongly encourage authors to include a # See also section at the end of each STACK documentation page. This should be part of the markdown page.","title":"Conventions in authoring pages"},{"location":"en/Developer/Documentation/#adding-images-and-files-to-the-documentation","text":"The directory /doc/content/ is for static content which is served by the documentation. If you want to serve content from the docs please place it in this directory. When writing links use direct relative links to $CFG->wwwroot . \"/question/type/stack/doc/content\"; E.g. in About/Logo.md use ![STACK Logo](../../content/logo.png) The text in square brackets is the alt text, which is important for visually impaired users reading the documentation. There are many great guides for writing good alt text .","title":"Adding images and files to the documentation"},{"location":"en/Developer/Documentation/#adding-a-link-to-video-in-the-documentation","text":"To embed video into the documentation first find the unique video key, VIDEO-KEY , then then modify [![IMAGE ALT TEXT](http://img.youtube.com/vi/VIDEO-KEY/0.jpg)](https://www.youtube.com/watch?v=VIDEO-KEY \"Video title\") For example, cpwo-D6EUgA , gives [![IMAGE ALT TEXT](http://img.youtube.com/vi/cpwo-D6EUgA/0.jpg)](https://www.youtube.com/watch?v=cpwo-D6EUgA \"Your First STACK Question\") The following rendered markdown:","title":"Adding a link to video in the documentation"},{"location":"en/Developer/Documentation/#embed-video-in-the-documentation","text":"Using an iframe such as <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cpwo-D6EUgA\" frameborder=\"0\" allowfullscreen></iframe> Gives","title":"Embed video in the documentation"},{"location":"en/Developer/Documentation/#mathematics","text":"For the purpose of rendering mathematical equations, an extended version of PHP Markdown Extra is used. It uses LaTeX style notation \\( and \\[ to write inline and display maths respectively. Fortunately GitHub documentation uses the same notation :D. An example: \\[ \\frac{\\int_a^b f(t) \\textrm{d} t }{b - a} \\] \\frac{\\int_a^b f(t) \\textrm{d} t}{b - a}","title":"Mathematics"},{"location":"en/Developer/Documentation/#Website","text":"The STACK docs are made available online on docs.stack-assessment.org . For more information on how this is achieved, see the Website documentation . However this places certain limitations on the sort of elements that can be included in the documentation: You can only have relative links to files within the doc directory. This means you should not link relatively to, for example, one of the stack .php files. If you want to demonstrate a behaviour of one of STACKs files, it is better to do a direct link to that file on GitHub or on the STACK demo. You cannot use HTML text areas to display LaTeX Math, as that will display poorly. Please use multiline code blocks instead.","title":"Compatibility with the online docs"},{"location":"en/Developer/Documentation/#Examples","text":"","title":"Examples"},{"location":"en/Developer/Documentation/#paragraphs-and-formatting","text":"Paragraphs are made with two new line characters, a single new line will not be rendered: This is in a paragraph, so is this This is a new paragraph This is a **bold** word and this is an *italicised* word. This is in a paragraph, so is this This is a new paragraph This is a bold word and this is an italicised word.","title":"Paragraphs and formatting"},{"location":"en/Developer/Documentation/#headings","text":"Headings are indicated by the # symbol # Huge ## Quite huge ### Not so huge #### Barely huge","title":"Headings"},{"location":"en/Developer/Documentation/#huge","text":"","title":"Huge"},{"location":"en/Developer/Documentation/#quite-huge","text":"","title":"Quite huge"},{"location":"en/Developer/Documentation/#not-so-huge","text":"","title":"Not so huge"},{"location":"en/Developer/Documentation/#barely-huge","text":"","title":"Barely huge"},{"location":"en/Developer/Documentation/#lists","text":"Ordered (numbered) and unordered lists are very intuitive, and nesting is easy 1. first point 2. second point, which is so long it needs two lines 3. third point will demonstrate nesting 1. Nested 2. Lists * Unordered lists made my stars * You can nest with different styles 1. See? first point second point, which is so long it needs two lines third point will demonstrate nesting Nested Lists Unordered lists made my stars You can nest with different styles See?","title":"Lists"},{"location":"en/Developer/Documentation/#code-monospace","text":"Code can be displayed inline using back ticks `content` to display content . Code can be displayed in a block by indenting: Block style code Will display Block style code","title":"Code (monospace)"},{"location":"en/Developer/Documentation/#links","text":"Links are written [text](Documentation.md) to give text . They must end with the .md extension. External links are easily generated using <http://sesamestreet.com> gives http://sesamestreet.com , email address work similarly <count@sesamestreet.com> gives count@sesamestreet.com .","title":"Links"},{"location":"en/Developer/Documentation/#other-cool-features","text":"Definition lists : Are one of the many cool features available They are useful for : Dictionary style entries Definition lists Are one of the many cool features available They are useful for Dictionary style entries To force block style code write ~~~~ above and below, good for after a list when indentation will be interpreted as part of the list ~~~~~~~~~~ Like this ~~~~~~~~~~ > When quoting the syntax is like in emails. When quoting the syntax is like in emails. Tables | are also ------------ | -------- an extremely | useful feature | ! Tables are also an extremely useful feature !","title":"Other cool features"},{"location":"en/Developer/Documentation/#see-also","text":"MarkDown PHP Markdown Extra PHP Markdown Extra Math","title":"See also"},{"location":"en/Developer/Future_input_processing/","text":"Description of one possible future input processing pipeline In the recent (documentation)[../Authoring/Syntax.md] there has been described how input processing starts to have too many options to fit the original \"insert stars\" model and how things could be expanded in the short term as we now are getting an overhaul of the casstring processing in the form of Maxima-statement parsing in 4.3. This is however something that should be thought of in larger scale and this document present one way of trying to deal with the complexity of the whole issue. The problem Various inputs have various rules about what kind of input is being expected. The rules vary from forbidding floats and requiring the responses type to match the type of the teacher's answer, to actually fixing the input syntax in the form of insertion of missing stars and conversion of spaces to stars. In addition to this some inputs may even declare additional syntax e.g. the way the line by line reasoning works. There are also some complex CAS-evaluation based requirements that some inputs may ask for like representing the answer in lowest terms when working with fractions. Those are the kinds of things inputs declare for student input processing and most of those are not trivial and have interactions with certain other features we have in our validation chain. The CAS-statement processing pipeline also includes some amount of syntactic candy in the form logarithms of various bases being representted in complex ways from the statements, for example log_x+y(z) => lg(z, x+y) . In addition to that kind of syntax expansions there also exists various rules that check for typical errors like sin^2(x) which will need to be dealt in the correct place of the processing pipeline, typically before input level insert stars rules get applied. That latter example will break down quite badly if someone applies a rule that splits all multiletter variable names to multiplications of single letter names, before we identify that sin in this case is actually a badly written function-call that needs to be specially pointted out to the student. The current pre 4.3 situation is complex because most of such rules are mixed in various processing steps and much of the logic that the inputs themselves should handle is actually built into the complex casstring-class making it difficult to easily separate features and/or place new features into the mix. One way of looking at the casstring processing For teacher/code sourced casstrings the logic is relatively simple: Direct parsing of the statement without any corrective pre-processing. Generates an AST style representation of the statement. That AST will be piped through syntactic candy filtters to allow use of various features like the logarithm logic. In the end that AST will be explored for security issues. For the pipeline of student sourced things is more complex: The parsing will go through a corrective parser that tries to add missing stars into places where they would make the input syntactically valid. In addition to this the parsing may apply additional syntax specific to the input type. Those inserted stars will be tagged in the resulting AST. Syntactic candy filters will be applied to the AST. Early phase feature detection will be applied to the AST, without modification of the AST, sin^2(x) detection and similar pattern matching. This detection may lead to processing marking a whole subtree of the AST as invalid so that insert stars of other remaining steps do not modify it further. Additional star insertion, based on the input's preferences, will be applied to the AST. Again added stars will be tagged in the AST. common variable/constant identification xpi => x*pi common function identification xsin(x) => x*sin(x) elimination of all or just undefined function calls sqrt(x) => sqrt*(x) and sqrt(f(x)) => sqrt(f*(x)) splitting of multi char variables xy => x*y and x1 => x*1 with protection of known identifiers pialpha => pi*alpha as opposed to pi*alpha => p*i*a*l*p*h*a splitting by number/letter boundaries x1y => x1*y float splitting 0.2e-3 => 0.2*e*-3 if wished Syntactic validity check, if the input requires that all the stars are correct this step will check that the are no tagged added stars in the AST nor any invalid subtrees for that matter. Is such exist error messages will be generated and they will mark those stars. Security check. If fails things stop here. Note that part of the security check rules are based on options to the input and part to the the whole question. Simple feature checks, things that the input may require and that can be easily checked from the AST: if floats are forbidden then the AST should have none. if we have some form of type constraint then the AST should fit it. if significant figures or decimal places matter they should be checked from the AST. Complex feature checks, things like lowest terms need to be sent to CAS to be checked only after these (if they exist) have been checked can we say wether the input is valid. These checks should not be tied to the AST they should happen using it but through separate CAS-statements One way to look at this is that inputs should have means of doing much of the low level parsing themselves, and there must be ways of them to select ready made AST-filters to be added to the process. The other point from this is that casstrings should not do parsing themselves they should just receive ready ASTs and the parsing and insert stars logic are not part of validation of the casstring the only validation the casstring does is the validation of security, insert stars and other tricks are part of input validation. In some sense this makes casstrings just the containers of the AST and probably the results of its evaluation, it however makes sense for those containers to contain the most important bit of all i.e. the security checking. It also makes sense to use the casstring object as a wrapper of the AST and the store of the error messages, which leads to the conclusion that casstrings get created from the results of step 2 in those processes and need to have interfaces into which various AST filtters get pushed into to update the AST before the final validation. It also makes sense to collect step 8 related statements from multiple inputs together for validation and that those statements also include whatever is needed to represent the validity to the student. Likewise step 7 probably bases its behaviour on the teachers answer or other parameters of the input and should also be collected from multiple inputs for single pass validation. Class structure Based on the presented we need the following classes with at least the following methods, stack_cas_cassecurity is the very same it is in 4.3: class stack_cas_casstring { /** * Executes an AST filter on the AST defining this casstring. */ public function filter_ast(stack_cas_astfilter $filter) {} /** * Validation is now based only on the security settings and the current AST. */ public function validate(string $security_level, stack_cas_cassecurity $rules): bool {} } class stack_cas_astfilter { /** * Does whatever it needs to the AST and may append to the errors or notes * might receive stack_cas_casstring directly, but better to keep these * separate. */ public function filter(MP_Node $ast, array &$errors, array &$answernotes): MP_Node {} } The idea here is that once the code is in this form whenever one wants to build syntactic candy or error checks one builds a new stack_cas_astfilter and if it is something central it will probably go to step 2 of the processing otherwise it will be a part of the student input pipeline and under the control of inputs. In any case one can write tests for it separate from everything else, but one will need to also define its place in the processing order and test the whole chain as some other filter might appear in that chain and eat up the things. To keep the order in order I would recommend that the files containing filter code are prefixed with something like '012_' and that we leave plenty of empty room if at all possible in that range, for future filters to be plugged into the sequence. Ideally, those numbers should also be present in the classnames, but obviously not as prefixes there.","title":"Description of one possible future input processing pipeline"},{"location":"en/Developer/Future_input_processing/#description-of-one-possible-future-input-processing-pipeline","text":"In the recent (documentation)[../Authoring/Syntax.md] there has been described how input processing starts to have too many options to fit the original \"insert stars\" model and how things could be expanded in the short term as we now are getting an overhaul of the casstring processing in the form of Maxima-statement parsing in 4.3. This is however something that should be thought of in larger scale and this document present one way of trying to deal with the complexity of the whole issue.","title":"Description of one possible future input processing pipeline"},{"location":"en/Developer/Future_input_processing/#the-problem","text":"Various inputs have various rules about what kind of input is being expected. The rules vary from forbidding floats and requiring the responses type to match the type of the teacher's answer, to actually fixing the input syntax in the form of insertion of missing stars and conversion of spaces to stars. In addition to this some inputs may even declare additional syntax e.g. the way the line by line reasoning works. There are also some complex CAS-evaluation based requirements that some inputs may ask for like representing the answer in lowest terms when working with fractions. Those are the kinds of things inputs declare for student input processing and most of those are not trivial and have interactions with certain other features we have in our validation chain. The CAS-statement processing pipeline also includes some amount of syntactic candy in the form logarithms of various bases being representted in complex ways from the statements, for example log_x+y(z) => lg(z, x+y) . In addition to that kind of syntax expansions there also exists various rules that check for typical errors like sin^2(x) which will need to be dealt in the correct place of the processing pipeline, typically before input level insert stars rules get applied. That latter example will break down quite badly if someone applies a rule that splits all multiletter variable names to multiplications of single letter names, before we identify that sin in this case is actually a badly written function-call that needs to be specially pointted out to the student. The current pre 4.3 situation is complex because most of such rules are mixed in various processing steps and much of the logic that the inputs themselves should handle is actually built into the complex casstring-class making it difficult to easily separate features and/or place new features into the mix.","title":"The problem"},{"location":"en/Developer/Future_input_processing/#one-way-of-looking-at-the-casstring-processing","text":"For teacher/code sourced casstrings the logic is relatively simple: Direct parsing of the statement without any corrective pre-processing. Generates an AST style representation of the statement. That AST will be piped through syntactic candy filtters to allow use of various features like the logarithm logic. In the end that AST will be explored for security issues. For the pipeline of student sourced things is more complex: The parsing will go through a corrective parser that tries to add missing stars into places where they would make the input syntactically valid. In addition to this the parsing may apply additional syntax specific to the input type. Those inserted stars will be tagged in the resulting AST. Syntactic candy filters will be applied to the AST. Early phase feature detection will be applied to the AST, without modification of the AST, sin^2(x) detection and similar pattern matching. This detection may lead to processing marking a whole subtree of the AST as invalid so that insert stars of other remaining steps do not modify it further. Additional star insertion, based on the input's preferences, will be applied to the AST. Again added stars will be tagged in the AST. common variable/constant identification xpi => x*pi common function identification xsin(x) => x*sin(x) elimination of all or just undefined function calls sqrt(x) => sqrt*(x) and sqrt(f(x)) => sqrt(f*(x)) splitting of multi char variables xy => x*y and x1 => x*1 with protection of known identifiers pialpha => pi*alpha as opposed to pi*alpha => p*i*a*l*p*h*a splitting by number/letter boundaries x1y => x1*y float splitting 0.2e-3 => 0.2*e*-3 if wished Syntactic validity check, if the input requires that all the stars are correct this step will check that the are no tagged added stars in the AST nor any invalid subtrees for that matter. Is such exist error messages will be generated and they will mark those stars. Security check. If fails things stop here. Note that part of the security check rules are based on options to the input and part to the the whole question. Simple feature checks, things that the input may require and that can be easily checked from the AST: if floats are forbidden then the AST should have none. if we have some form of type constraint then the AST should fit it. if significant figures or decimal places matter they should be checked from the AST. Complex feature checks, things like lowest terms need to be sent to CAS to be checked only after these (if they exist) have been checked can we say wether the input is valid. These checks should not be tied to the AST they should happen using it but through separate CAS-statements One way to look at this is that inputs should have means of doing much of the low level parsing themselves, and there must be ways of them to select ready made AST-filters to be added to the process. The other point from this is that casstrings should not do parsing themselves they should just receive ready ASTs and the parsing and insert stars logic are not part of validation of the casstring the only validation the casstring does is the validation of security, insert stars and other tricks are part of input validation. In some sense this makes casstrings just the containers of the AST and probably the results of its evaluation, it however makes sense for those containers to contain the most important bit of all i.e. the security checking. It also makes sense to use the casstring object as a wrapper of the AST and the store of the error messages, which leads to the conclusion that casstrings get created from the results of step 2 in those processes and need to have interfaces into which various AST filtters get pushed into to update the AST before the final validation. It also makes sense to collect step 8 related statements from multiple inputs together for validation and that those statements also include whatever is needed to represent the validity to the student. Likewise step 7 probably bases its behaviour on the teachers answer or other parameters of the input and should also be collected from multiple inputs for single pass validation.","title":"One way of looking at the casstring processing"},{"location":"en/Developer/Future_input_processing/#class-structure","text":"Based on the presented we need the following classes with at least the following methods, stack_cas_cassecurity is the very same it is in 4.3: class stack_cas_casstring { /** * Executes an AST filter on the AST defining this casstring. */ public function filter_ast(stack_cas_astfilter $filter) {} /** * Validation is now based only on the security settings and the current AST. */ public function validate(string $security_level, stack_cas_cassecurity $rules): bool {} } class stack_cas_astfilter { /** * Does whatever it needs to the AST and may append to the errors or notes * might receive stack_cas_casstring directly, but better to keep these * separate. */ public function filter(MP_Node $ast, array &$errors, array &$answernotes): MP_Node {} } The idea here is that once the code is in this form whenever one wants to build syntactic candy or error checks one builds a new stack_cas_astfilter and if it is something central it will probably go to step 2 of the processing otherwise it will be a part of the student input pipeline and under the control of inputs. In any case one can write tests for it separate from everything else, but one will need to also define its place in the processing order and test the whole chain as some other filter might appear in that chain and eat up the things. To keep the order in order I would recommend that the files containing filter code are prefixed with something like '012_' and that we leave plenty of empty room if at all possible in that range, for future filters to be plugged into the sequence. Ideally, those numbers should also be present in the classnames, but obviously not as prefixes there.","title":"Class structure"},{"location":"en/Developer/Future_plans/","text":"Future plans How to report bugs and make suggestions is described on the community page. Note, where the feature is listed as \"(done)\" means we have prototype code in the testing phase. Features to add for STACK 4.4 or later Units inputs Conversion from Celsius to Kelvin? What units to choose for degrees Celsius which don't conflict with Coulomb? Support for United States customary units? (Parser can do this) Add an option to validation to require compatible units with the teacher's answer, not just some units. Create a mechanism to distinguish between m/s and m*s^-1 , both at validation and answer test levels. Create a mechanism to distinguish between m/s/s and m/s^2 , both at validation and answer test levels. Add support for testing for error bounds in units. E.g. 9.81+-0.01m/s^2 . There is already CAS code for this, and the error bounds are an optional 3rd argument to stackunits . This is currently only used to reject students' answers as invalid. Inputs (Parser can do this) Add support for coordinates, so students can type in (x,y). This should be converted internally to a list. Add new input types DragMath (actually, probably use JavaScript from NUMBAS instead here, or the MathDox editor). Sliders - do this via JSXGraph. It is very useful to be able to embed input elements in equations, and this was working in STACK 2.0. However is it possible with MathJax or other Moodle maths filters? This might offer one option: http://stackoverflow.com/questions/23818478/html-input-field-within-a-mathjax-tex-equation In the MCQ input type: Add choose N (correct) from M feature (used at Aalto). A new MCQ input type with a \"none of these\" option which uses JavaScript to degrade to an algebraic input: https://community.articulate.com/articles/how-to-use-an-other-please-specify-answer-option (Parser can do this) Add an option for \"no functions\" which will always insert stars and transform \"x(\" -> \"x*(\" even when x occurs as both a function and a variable. Make the syntax hint CAS text, to depend on the question variables. Improve the editing form A button to remove a given PRT or input, without having to guess that the way to do it is to delete the placeholders from the question text. A button to add a new PRT or input, without having to guess that the way to do it is to add the placeholders to the question text. A button to save the current definition and continue editing. This would be a Moodle core change. See https://tracker.moodle.org/browse/MDL-33653. Add functionality to add a \"warning\" to the castext class. Warnings should not prevent execution of the code but will stop editing. Other ideas Document ways of using JSXGraph http://jsxgraph.org for better support of graphics. Better options for automatically generated plots. (Aalto use of tikzpicture?) (Draw package?) 3D Graphics. Can we use: https://threejs.org/ Implement \"Banker's rounding\" option which applies over a whole question, and for all answer tests. (Parser can do this) Implement \"CommaError\" checking for CAS strings. Make comma an option for the decimal separator. (Parser can do this) Implement \"BracketError\" option for inputs. This allows the student's answer to have only those types of parentheses which occur in the teacher's answer. Types are ( , [ and { . So, if a teacher's answer doesn't have any { then a student's answer with any { or } will be invalid. It would be very useful to have finer control over the validation feedback. For example, if we have a polynomial with answer boxes for the coefficients, then we should be able to echo back \"Your last answer was...\" with the whole polynomial, not just the numbers. Decimal separator, both input and output. Check CAS/maxima literature on -inf=minf. (Done in Stateful) Make the mark and penalty fields accept arbitrary maxima statements. (Done in Stateful) Introduce a variable so the maxima code \"knows the attempt number\". [Note to self: check how this changes reporting]. This is now being done with the \"state\" code in the abacus branch. (Done in Stateful) Make the PRT Score element CAS, so that a value calculated in the \"Feedback variables\" could be included here. Answer tests Refactor answer tests so they are all in Maxima. Answer tests should be like inputs. We should return an answer test object, not a controller object. at->get_at_mark() really ought to be at->matches(), since that is how it is used. Use defstruct in Maxima for the return objects. (Note to self: @ is the element access operator). Investigate how a whole PRT might make only one CAS call. Features that might be attempted in the future - possible self-contained projects Read other file formats into STACK. In particular AIM WeBWorK, including the Open Problem Library: http://webwork.maa.org/wiki/Open_Problem_Library Maple T.A. (underway: see https://github.com/maths/moodle-qformat_mapleta) WIRIS Possible Maxima packages: Better support for rational expressions, in particular really firm up the PartFrac and SingleFrac functions with better support. Auto deploy. E.g. if the first variable in the question variables is a single a:rand(n), then loop a=0..(n-1). When validating the editing form, also evaluate the Maxima code in the PRTs, using the teacher's model answers. (Done in Stateful) You cannot use one PRT node to guard the evaluation of another, for example Node 1 check x = 0, and only if that is false, Node 2 do 1 / x. We need to change how PRTs do CAS evaluation. Authoring and execution of PRTs Can we write the whole PRT as Maxima code? YES! see stateful! This seems like an attractive option, but there are some serious problems which make it probably impractical. Error trapping. Currently, the arguments each answer test are evaluated with Maxima's errcatch command independently before the answer test is executed. This helps track down the source of any error. If we write a single Maxima command for the PRT (not just one node) then it is likely that error trapping will become much more difficult. Not all answer tests are implemented in pure Maxima! Answer tests are accessed through this class moodle-qtype_stack/stack/answertest/controller.class.php only those which make use of stack_answertest_general_cas are pure maxima. Many of the numerical tests use PHP code to infer the number of significant figures. While we could (perhaps) rewrite some of these in Maxima, they were written in PHP as it is significantly easier to do so. So, while it is attractive to ask for the PRT as a single Maxima function it is currently difficult to do so. The current plan is to produce a solid YAML markup language for PRTs. Other (past ideas) were http://zaach.github.com/jison/ or https://github.com/hafriedlander/php-peg. \"Reveal block\" The functionality we want to develop is a block in which the contents is revealed or hidden by JavaScript, depending on the value of a separate input. [[ reveal input=\"ans1\" value=\"true\" ]] This will be shown if the value of \"ans1\" is true. [[ else if value=\"false\" ]] [[ else ]] This will be shown otherwise. (optional) Perhaps? [[/ reveal ]] This implements a JavaScript listener on input \"ans1\", which reveals or hides the appropriate content. These blocks can be nested. Inputs can be inside reveal blocks (that is sort of the whole point!). This works well with the new EMPTYANSWER functionality, allowing an input to expect not to be used in a correct response. What do we do about values of inputs inside the block, when the reveal condition fails and the block is hidden. Is this deleted with warning, or retained? (Option to block?) Only implement for true/false, or MCQ inputs to start with. What do we do about two reveal blocks listening to the same input? On page load, we need the JS to \"do the right thing\", i.e. interrogate each input and hide/reveal the content. An example question is included as samplequestions/reveal_block_example.xml In this example, we have only revealed the first level, which should be linked to ans1. If this functionality were available and nested then we would add an MCQ checkbox input within the second reveal block, which is linked to reveal further inputs. Improvements to the \"equiv\" input type Improve spacing of comments, e.g. \\intertext{...}? Auto identify what the student has done in a particular step. Model solutions. Follow a \"model solution\", and give feedback based on the steps used. E.g. identify where in the students' solution a student deviates from the model solution. Develop a metric to measure the distance between expressions. Use this as a measure of \"step size\" when working with expressions. Add mathematical support in the following order. Logarithms and simple logarithmic equations. Allow students to create and use functions of their own (currently forbidden). Add a \"Not equals\" operator. For example: infix(\"<>\"); p:x<>y; texput(\"<>\",\"{\\neq}\", infix); tex(p); STACK custom reports Basic reports now work. Really ensure \"attempts\" list those with meaningful histories. I.e. if possible filter out navigation to and from the page etc. Add better maxima support functions for off-line analysis. A fully maxima-based representation of the PRT?","title":"Future plans"},{"location":"en/Developer/Future_plans/#future-plans","text":"How to report bugs and make suggestions is described on the community page. Note, where the feature is listed as \"(done)\" means we have prototype code in the testing phase.","title":"Future plans"},{"location":"en/Developer/Future_plans/#features-to-add-for-stack-44-or-later","text":"","title":"Features to add for STACK 4.4 or later"},{"location":"en/Developer/Future_plans/#units-inputs","text":"Conversion from Celsius to Kelvin? What units to choose for degrees Celsius which don't conflict with Coulomb? Support for United States customary units? (Parser can do this) Add an option to validation to require compatible units with the teacher's answer, not just some units. Create a mechanism to distinguish between m/s and m*s^-1 , both at validation and answer test levels. Create a mechanism to distinguish between m/s/s and m/s^2 , both at validation and answer test levels. Add support for testing for error bounds in units. E.g. 9.81+-0.01m/s^2 . There is already CAS code for this, and the error bounds are an optional 3rd argument to stackunits . This is currently only used to reject students' answers as invalid.","title":"Units inputs"},{"location":"en/Developer/Future_plans/#inputs","text":"(Parser can do this) Add support for coordinates, so students can type in (x,y). This should be converted internally to a list. Add new input types DragMath (actually, probably use JavaScript from NUMBAS instead here, or the MathDox editor). Sliders - do this via JSXGraph. It is very useful to be able to embed input elements in equations, and this was working in STACK 2.0. However is it possible with MathJax or other Moodle maths filters? This might offer one option: http://stackoverflow.com/questions/23818478/html-input-field-within-a-mathjax-tex-equation In the MCQ input type: Add choose N (correct) from M feature (used at Aalto). A new MCQ input type with a \"none of these\" option which uses JavaScript to degrade to an algebraic input: https://community.articulate.com/articles/how-to-use-an-other-please-specify-answer-option (Parser can do this) Add an option for \"no functions\" which will always insert stars and transform \"x(\" -> \"x*(\" even when x occurs as both a function and a variable. Make the syntax hint CAS text, to depend on the question variables.","title":"Inputs"},{"location":"en/Developer/Future_plans/#improve-the-editing-form","text":"A button to remove a given PRT or input, without having to guess that the way to do it is to delete the placeholders from the question text. A button to add a new PRT or input, without having to guess that the way to do it is to add the placeholders to the question text. A button to save the current definition and continue editing. This would be a Moodle core change. See https://tracker.moodle.org/browse/MDL-33653. Add functionality to add a \"warning\" to the castext class. Warnings should not prevent execution of the code but will stop editing.","title":"Improve the editing form"},{"location":"en/Developer/Future_plans/#other-ideas","text":"Document ways of using JSXGraph http://jsxgraph.org for better support of graphics. Better options for automatically generated plots. (Aalto use of tikzpicture?) (Draw package?) 3D Graphics. Can we use: https://threejs.org/ Implement \"Banker's rounding\" option which applies over a whole question, and for all answer tests. (Parser can do this) Implement \"CommaError\" checking for CAS strings. Make comma an option for the decimal separator. (Parser can do this) Implement \"BracketError\" option for inputs. This allows the student's answer to have only those types of parentheses which occur in the teacher's answer. Types are ( , [ and { . So, if a teacher's answer doesn't have any { then a student's answer with any { or } will be invalid. It would be very useful to have finer control over the validation feedback. For example, if we have a polynomial with answer boxes for the coefficients, then we should be able to echo back \"Your last answer was...\" with the whole polynomial, not just the numbers. Decimal separator, both input and output. Check CAS/maxima literature on -inf=minf. (Done in Stateful) Make the mark and penalty fields accept arbitrary maxima statements. (Done in Stateful) Introduce a variable so the maxima code \"knows the attempt number\". [Note to self: check how this changes reporting]. This is now being done with the \"state\" code in the abacus branch. (Done in Stateful) Make the PRT Score element CAS, so that a value calculated in the \"Feedback variables\" could be included here.","title":"Other ideas"},{"location":"en/Developer/Future_plans/#answer-tests","text":"Refactor answer tests so they are all in Maxima. Answer tests should be like inputs. We should return an answer test object, not a controller object. at->get_at_mark() really ought to be at->matches(), since that is how it is used. Use defstruct in Maxima for the return objects. (Note to self: @ is the element access operator). Investigate how a whole PRT might make only one CAS call.","title":"Answer tests"},{"location":"en/Developer/Future_plans/#features-that-might-be-attempted-in-the-future-possible-self-contained-projects","text":"Read other file formats into STACK. In particular AIM WeBWorK, including the Open Problem Library: http://webwork.maa.org/wiki/Open_Problem_Library Maple T.A. (underway: see https://github.com/maths/moodle-qformat_mapleta) WIRIS Possible Maxima packages: Better support for rational expressions, in particular really firm up the PartFrac and SingleFrac functions with better support. Auto deploy. E.g. if the first variable in the question variables is a single a:rand(n), then loop a=0..(n-1). When validating the editing form, also evaluate the Maxima code in the PRTs, using the teacher's model answers. (Done in Stateful) You cannot use one PRT node to guard the evaluation of another, for example Node 1 check x = 0, and only if that is false, Node 2 do 1 / x. We need to change how PRTs do CAS evaluation.","title":"Features that might be attempted in the future - possible self-contained projects"},{"location":"en/Developer/Future_plans/#authoring-and-execution-of-prts","text":"Can we write the whole PRT as Maxima code? YES! see stateful! This seems like an attractive option, but there are some serious problems which make it probably impractical. Error trapping. Currently, the arguments each answer test are evaluated with Maxima's errcatch command independently before the answer test is executed. This helps track down the source of any error. If we write a single Maxima command for the PRT (not just one node) then it is likely that error trapping will become much more difficult. Not all answer tests are implemented in pure Maxima! Answer tests are accessed through this class moodle-qtype_stack/stack/answertest/controller.class.php only those which make use of stack_answertest_general_cas are pure maxima. Many of the numerical tests use PHP code to infer the number of significant figures. While we could (perhaps) rewrite some of these in Maxima, they were written in PHP as it is significantly easier to do so. So, while it is attractive to ask for the PRT as a single Maxima function it is currently difficult to do so. The current plan is to produce a solid YAML markup language for PRTs. Other (past ideas) were http://zaach.github.com/jison/ or https://github.com/hafriedlander/php-peg.","title":"Authoring and execution of PRTs"},{"location":"en/Developer/Future_plans/#reveal-block","text":"The functionality we want to develop is a block in which the contents is revealed or hidden by JavaScript, depending on the value of a separate input. [[ reveal input=\"ans1\" value=\"true\" ]] This will be shown if the value of \"ans1\" is true. [[ else if value=\"false\" ]] [[ else ]] This will be shown otherwise. (optional) Perhaps? [[/ reveal ]] This implements a JavaScript listener on input \"ans1\", which reveals or hides the appropriate content. These blocks can be nested. Inputs can be inside reveal blocks (that is sort of the whole point!). This works well with the new EMPTYANSWER functionality, allowing an input to expect not to be used in a correct response. What do we do about values of inputs inside the block, when the reveal condition fails and the block is hidden. Is this deleted with warning, or retained? (Option to block?) Only implement for true/false, or MCQ inputs to start with. What do we do about two reveal blocks listening to the same input? On page load, we need the JS to \"do the right thing\", i.e. interrogate each input and hide/reveal the content. An example question is included as samplequestions/reveal_block_example.xml In this example, we have only revealed the first level, which should be linked to ans1. If this functionality were available and nested then we would add an MCQ checkbox input within the second reveal block, which is linked to reveal further inputs.","title":"\"Reveal block\""},{"location":"en/Developer/Future_plans/#improvements-to-the-equiv-input-type","text":"Improve spacing of comments, e.g. \\intertext{...}? Auto identify what the student has done in a particular step. Model solutions. Follow a \"model solution\", and give feedback based on the steps used. E.g. identify where in the students' solution a student deviates from the model solution. Develop a metric to measure the distance between expressions. Use this as a measure of \"step size\" when working with expressions. Add mathematical support in the following order. Logarithms and simple logarithmic equations. Allow students to create and use functions of their own (currently forbidden). Add a \"Not equals\" operator. For example: infix(\"<>\"); p:x<>y; texput(\"<>\",\"{\\neq}\", infix); tex(p);","title":"Improvements to the \"equiv\" input type"},{"location":"en/Developer/Future_plans/#stack-custom-reports","text":"Basic reports now work. Really ensure \"attempts\" list those with meaningful histories. I.e. if possible filter out navigation to and from the page etc. Add better maxima support functions for off-line analysis. A fully maxima-based representation of the PRT?","title":"STACK custom reports"},{"location":"en/Developer/Language_packs/","text":"Translation of the STACK Project Translation of questions This page will deal with translations of the STACK interface. Individual question text can also be translated. See this page in the multi-language question authoring section. STACK 4 is released and being used with the following languages STACK is designed to support the straightforward addition of other language packs. If you have translated STACK into other languages - or would be interested in doing so - please let us know . We will maintain this page to indicate which languages are being worked on or have been requested. English (British) Swedish Japanese Finnish German Portuguese Hebrew French Spanish We believe STACK is being (or has been) translated into the following languages. Italian Dutch Details of who translated STACK are given under credits . If you need these languages please contact the developers for more details of the status of this work. Installing a language pack To allow users of your server to see interface in a certain language, the language pack has to be installed on your server. In Moodle, to install a language pack on your server, goo to Site adminstration , Language , Language pakcs . Here you can see a list of installed language packs, as well as a list of available languages. This is a list of all translations of Moodle, but note only some of them correspond to translations of STACK as well (see list above). To install a language pack, click on it and click Install selected language pack . Once a language pack is installed, a user can change the preferred language for Moodle and STACK by clicking on their profile, and then going to Preferences , Preferred language and selecting the language. How to translate STACK STACK is part of Moodle. Hence, we have used the Moodle translation management system. Please check if STACK has already been translated into your language. We are using Moodle's AMOS system to do this. ALL strings which appear to the user should be found in the single file You need to translate the strings for the Components qtype_stack , qbehaviour_adaptivemultipart , qbehaviour_dfcbmexplicitvaildate , qbehaviour_dfexplicitvaildate and qformat_stack . It is convenient to translate the strings online. To translate STACK into another language please use Moodle's AMOS system. See Moodle online documentation for specific details. Apologies to those people who have translated STACK through AMOS, but who do not appear in the credits . Please contact Chris Sangwin to add your name. Finding language packs for an API setup Create a new full Moodle server and install the language pack you want. Look on your server in $CFG->langlocalroot.'/'.$lang; Find the file \"qtype_stack.php\". This contains all the language strings. Further reading Applying a language pack will change the language on the Moodle and STACK interface. It will not change question text unless this has been translated by the question author. For information on writing multilingual question text, see the page on multilingual question authoring in authoring section.","title":"Translation of the STACK Project"},{"location":"en/Developer/Language_packs/#translation-of-the-stack-project","text":"","title":"Translation of the STACK Project"},{"location":"en/Developer/Language_packs/#translation-of-questions","text":"This page will deal with translations of the STACK interface. Individual question text can also be translated. See this page in the multi-language question authoring section.","title":"Translation of questions"},{"location":"en/Developer/Language_packs/#stack-4-is-released-and-being-used-with-the-following-languages","text":"STACK is designed to support the straightforward addition of other language packs. If you have translated STACK into other languages - or would be interested in doing so - please let us know . We will maintain this page to indicate which languages are being worked on or have been requested. English (British) Swedish Japanese Finnish German Portuguese Hebrew French Spanish We believe STACK is being (or has been) translated into the following languages. Italian Dutch Details of who translated STACK are given under credits . If you need these languages please contact the developers for more details of the status of this work.","title":"STACK 4 is released and being used with the following languages"},{"location":"en/Developer/Language_packs/#installing-a-language-pack","text":"To allow users of your server to see interface in a certain language, the language pack has to be installed on your server. In Moodle, to install a language pack on your server, goo to Site adminstration , Language , Language pakcs . Here you can see a list of installed language packs, as well as a list of available languages. This is a list of all translations of Moodle, but note only some of them correspond to translations of STACK as well (see list above). To install a language pack, click on it and click Install selected language pack . Once a language pack is installed, a user can change the preferred language for Moodle and STACK by clicking on their profile, and then going to Preferences , Preferred language and selecting the language.","title":"Installing a language pack"},{"location":"en/Developer/Language_packs/#how-to-translate-stack","text":"STACK is part of Moodle. Hence, we have used the Moodle translation management system. Please check if STACK has already been translated into your language. We are using Moodle's AMOS system to do this. ALL strings which appear to the user should be found in the single file You need to translate the strings for the Components qtype_stack , qbehaviour_adaptivemultipart , qbehaviour_dfcbmexplicitvaildate , qbehaviour_dfexplicitvaildate and qformat_stack . It is convenient to translate the strings online. To translate STACK into another language please use Moodle's AMOS system. See Moodle online documentation for specific details. Apologies to those people who have translated STACK through AMOS, but who do not appear in the credits . Please contact Chris Sangwin to add your name.","title":"How to translate STACK"},{"location":"en/Developer/Language_packs/#finding-language-packs-for-an-api-setup","text":"Create a new full Moodle server and install the language pack you want. Look on your server in $CFG->langlocalroot.'/'.$lang; Find the file \"qtype_stack.php\". This contains all the language strings.","title":"Finding language packs for an API setup"},{"location":"en/Developer/Language_packs/#further-reading","text":"Applying a language pack will change the language on the Moodle and STACK interface. It will not change question text unless this has been translated by the question author. For information on writing multilingual question text, see the page on multilingual question authoring in authoring section.","title":"Further reading"},{"location":"en/Developer/Local_Usage/","text":"Local Usage There are a number of reporting options which are built-in and supported. To use the features on this page requires moodle admin permission. It is often useful to know numbers about STACK usage on your local server. To do this we need to work in the Moodle database. E.g. How many STACK questions were initialised for students during the last time interval? How many attempts those students made to those question during that time on average? Which courses had most attempts and which courses had the most STACK questions in use? Question bank status by course, how many questions were in use, which questions have not been used for a long time? Quiz/activity usage, i.e. in what context are the questions being used and for example how many questions are present in a quiz by average? Duplicate questions, how many copies of the same questions are present in the question banks? Do get this kind of data you will need the custom sql report . The number of questions that students have interacted with That is the number of questions that students have interacted with. SELECT COUNT(1) FROM {question_attempts} qa JOIN {question} q ON q.id = qa.questionid JOIN {quiz_attempts} quiza ON quiza.uniqueid = qa.questionusageid WHERE quiza.preview = 0 AND q.qtype = 'stack' AND qa.timemodified BETWEEN %%STARTTIME%% AND %%ENDTIME%% And, here is a query that does number of questions attempted (ever) by course SELECT c.shortname AS Website, COUNT(1) AS Number_of_STACK_questions_attempted FROM {question_attempts} qa JOIN {question} q ON q.id = qa.questionid JOIN {quiz_attempts} quiza ON quiza.uniqueid = qa.questionusageid JOIN {quiz} quiz ON quiz.id = quiza.quiz JOIN {course} c ON c.id = quiz.course WHERE q.qtype = 'stack' AND quiza.preview = 0 GROUP BY c.shortname ORDER BY COUNT(1) DESC, c.shortname Moodle has a built-in report that will count the number of questions of any type in the question bank (report/questioninstances) but I think this is a less useful statistic. Closing date of quizzes which use STACK Another useful report, which we use for planning the time of upgrades, is this one, which lists the close date of quizzes uses STACK (including ones that use STACK questions via Moodle's 'Random question' feature: SELECT DISTINCT c.shortname AS Website, quiz.name AS iCMA, quiz.timeopen AS Open_date, quiz.timeclose AS Close_date FROM {quiz} quiz JOIN {course} c ON c.id = quiz.course WHERE to_timestamp(quiz.timeclose) > 'now'::timestamp - '1 month'::interval AND EXISTS ( SELECT 1 FROM {quiz_slots} slot JOIN {question} q ON q.id = slot.questionid WHERE slot.quizid = quiz.id AND ( q.qtype = 'stack' OR q.qtype = 'random' AND EXISTS ( SELECT 1 FROM {question_categories} qc JOIN {question} rq ON rq.category = qc.id WHERE qc.id = q.category AND rq.qtype = 'stack' ) ) ) ORDER BY Close_date, Website, iCMA List all the people who have created STACK questions in your site One final query, which lists all the people who have created STACK questions in your site (useful if you need to email them about something: SELECT u.firstname, u.lastname, u.username, u.email, number_created, number_modified FROM ( SELECT COALESCE(createdby, modifiedby) AS userid, COALESCE(number_created, 0) AS number_created, COALESCE(number_modified, 0) AS number_modified FROM ( SELECT createdby, COUNT(1) AS number_created FROM {question} WHERE qtype = 'stack' GROUP BY createdby ) qscreated FULL JOIN ( SELECT modifiedby, COUNT(1) AS number_modified FROM {question} WHERE qtype = 'stack' GROUP BY modifiedby ) qsmodified ON createdby = modifiedby ) comined_counts JOIN {user} u ON u.id = userid ORDER BY number_created DESC, number_modified DESC Further queries These queries were last updated in April 2020 (and are not actively maintained as a core part of STACK). Please contribute related queries to the developers.","title":"Local Usage"},{"location":"en/Developer/Local_Usage/#local-usage","text":"There are a number of reporting options which are built-in and supported. To use the features on this page requires moodle admin permission. It is often useful to know numbers about STACK usage on your local server. To do this we need to work in the Moodle database. E.g. How many STACK questions were initialised for students during the last time interval? How many attempts those students made to those question during that time on average? Which courses had most attempts and which courses had the most STACK questions in use? Question bank status by course, how many questions were in use, which questions have not been used for a long time? Quiz/activity usage, i.e. in what context are the questions being used and for example how many questions are present in a quiz by average? Duplicate questions, how many copies of the same questions are present in the question banks? Do get this kind of data you will need the custom sql report .","title":"Local Usage"},{"location":"en/Developer/Local_Usage/#the-number-of-questions-that-students-have-interacted-with","text":"That is the number of questions that students have interacted with. SELECT COUNT(1) FROM {question_attempts} qa JOIN {question} q ON q.id = qa.questionid JOIN {quiz_attempts} quiza ON quiza.uniqueid = qa.questionusageid WHERE quiza.preview = 0 AND q.qtype = 'stack' AND qa.timemodified BETWEEN %%STARTTIME%% AND %%ENDTIME%% And, here is a query that does number of questions attempted (ever) by course SELECT c.shortname AS Website, COUNT(1) AS Number_of_STACK_questions_attempted FROM {question_attempts} qa JOIN {question} q ON q.id = qa.questionid JOIN {quiz_attempts} quiza ON quiza.uniqueid = qa.questionusageid JOIN {quiz} quiz ON quiz.id = quiza.quiz JOIN {course} c ON c.id = quiz.course WHERE q.qtype = 'stack' AND quiza.preview = 0 GROUP BY c.shortname ORDER BY COUNT(1) DESC, c.shortname Moodle has a built-in report that will count the number of questions of any type in the question bank (report/questioninstances) but I think this is a less useful statistic.","title":"The number of questions that students have interacted with"},{"location":"en/Developer/Local_Usage/#closing-date-of-quizzes-which-use-stack","text":"Another useful report, which we use for planning the time of upgrades, is this one, which lists the close date of quizzes uses STACK (including ones that use STACK questions via Moodle's 'Random question' feature: SELECT DISTINCT c.shortname AS Website, quiz.name AS iCMA, quiz.timeopen AS Open_date, quiz.timeclose AS Close_date FROM {quiz} quiz JOIN {course} c ON c.id = quiz.course WHERE to_timestamp(quiz.timeclose) > 'now'::timestamp - '1 month'::interval AND EXISTS ( SELECT 1 FROM {quiz_slots} slot JOIN {question} q ON q.id = slot.questionid WHERE slot.quizid = quiz.id AND ( q.qtype = 'stack' OR q.qtype = 'random' AND EXISTS ( SELECT 1 FROM {question_categories} qc JOIN {question} rq ON rq.category = qc.id WHERE qc.id = q.category AND rq.qtype = 'stack' ) ) ) ORDER BY Close_date, Website, iCMA","title":"Closing date of quizzes which use STACK"},{"location":"en/Developer/Local_Usage/#list-all-the-people-who-have-created-stack-questions-in-your-site","text":"One final query, which lists all the people who have created STACK questions in your site (useful if you need to email them about something: SELECT u.firstname, u.lastname, u.username, u.email, number_created, number_modified FROM ( SELECT COALESCE(createdby, modifiedby) AS userid, COALESCE(number_created, 0) AS number_created, COALESCE(number_modified, 0) AS number_modified FROM ( SELECT createdby, COUNT(1) AS number_created FROM {question} WHERE qtype = 'stack' GROUP BY createdby ) qscreated FULL JOIN ( SELECT modifiedby, COUNT(1) AS number_modified FROM {question} WHERE qtype = 'stack' GROUP BY modifiedby ) qsmodified ON createdby = modifiedby ) comined_counts JOIN {user} u ON u.id = userid ORDER BY number_created DESC, number_modified DESC","title":"List all the people who have created STACK questions in your site"},{"location":"en/Developer/Local_Usage/#further-queries","text":"These queries were last updated in April 2020 (and are not actively maintained as a core part of STACK). Please contribute related queries to the developers.","title":"Further queries"},{"location":"en/Developer/Maxima_packages/","text":"Adding support for Maxima packages Maxima has a very wide range of optional packages. Some of these write to the server file system, and so we do not permit question authors to load arbitrary packages into Maxima. Instead the developers maintain a \"whitelist\" of packages. There is currently no support for a question by question loading of packages. This may be included in the future, subject to demand/need. Currently there is a site-wide option to load packages. Adding in support for additional Maxima packages needs to be done by a developer on the server. The list of supported packages is defined stack/cas/installhelper.class.php in the setting public static $maximalibraries = '...'; The default settings are defined in qtype_stack | maximalibraries It is probably sensible to make the default to load all the available packages, so new installations can see what is supported. Just because the package is loaded into Maxima does not mean that STACK users will be permitted to use the function names in questions. STACK only allows student users to input a certain restricted list of commands. STACK allows teachers to use a much wider list of commands, and to define functions of their own. However unless a function has been checked, it is likely the teacher will not be permitted to use this. We periodically work through all the function names in all maxima packages and add these to the variable security-map.json . Some notes. The developers welcome proposals for support of packages. Mostly we haven't needed them ourselves, and so didn't add them yet! Where individual functions are needed, it is sometimes better just to always load the package anyway rather than adding it as a site-wide option. One historic reason for having site-wide options was to ensure back compatibility with older versions of Maxima. Some packages do make Maxima significantly slower to load and run. We will check this before allowing a particular package. (This is a good reason to allow question to load packages of course...) Beware of new global variables, changes/side effects in other functions.","title":"Adding support for Maxima packages"},{"location":"en/Developer/Maxima_packages/#adding-support-for-maxima-packages","text":"Maxima has a very wide range of optional packages. Some of these write to the server file system, and so we do not permit question authors to load arbitrary packages into Maxima. Instead the developers maintain a \"whitelist\" of packages. There is currently no support for a question by question loading of packages. This may be included in the future, subject to demand/need. Currently there is a site-wide option to load packages. Adding in support for additional Maxima packages needs to be done by a developer on the server. The list of supported packages is defined stack/cas/installhelper.class.php in the setting public static $maximalibraries = '...'; The default settings are defined in qtype_stack | maximalibraries It is probably sensible to make the default to load all the available packages, so new installations can see what is supported. Just because the package is loaded into Maxima does not mean that STACK users will be permitted to use the function names in questions. STACK only allows student users to input a certain restricted list of commands. STACK allows teachers to use a much wider list of commands, and to define functions of their own. However unless a function has been checked, it is likely the teacher will not be permitted to use this. We periodically work through all the function names in all maxima packages and add these to the variable security-map.json . Some notes. The developers welcome proposals for support of packages. Mostly we haven't needed them ourselves, and so didn't add them yet! Where individual functions are needed, it is sometimes better just to always load the package anyway rather than adding it as a site-wide option. One historic reason for having site-wide options was to ensure back compatibility with older versions of Maxima. Some packages do make Maxima significantly slower to load and run. We will check this before allowing a particular package. (This is a good reason to allow question to load packages of course...) Beware of new global variables, changes/side effects in other functions.","title":"Adding support for Maxima packages"},{"location":"en/Developer/PHP-CAS/","text":"PHP interface with the CAS This document describes the design of the PHP interface to the CAS. While this interface was developed specifically to connect STACK to Maxima, it should be possible to factor this into other projects. High level objects CAS text CAS text is literally \"computer algebra active text\". This is documented here . It should be, in principle, possible to develop a \"CASText filter\" for Moodle. Note, that when constructing CAS text it must be able to take a CAS session as an argument to the constructor. In this way we can use lists of variables, such as question variables to provide values. E.g. we might have : n:rand(5)+2; in the question variables field. The question is instantiated, and then later we need to create some CAS text, e.g. feedback, in which we have : You were asked to find the integral of \\((x+2)^{@n@}\\) with respect to \\(x\\). In fact .... Here, we need the CAS text to be able to construct the text, with the previously evaluated value of n . This need is also why the CAS session returns the value of the variables as well as a displayed form. It is used here. CAS session This class actually calls the CAS itself. This class takes a list of CAS strings, including assignments of the form. key:rawvalue and executes this list in a single Maxima session. The results of this are then captures and fed back into the CAS strings so we have data in the form: key => value display error The value is the result of Maxima's \"string\" command, and this should be sufficient to renter the expression into Maxima later. Notice the difference between the rawvalue and the value. The display field contains the LaTeX displayed form of the variable. An important point here is that expressions (values) can refer to previous keys. This is one reason why we can't tie teachers down to a list of allowed functions. They will be defining variable and function names. We have implemented a lazy approach where the connection to the CAS is only made, and automatically made, when we ask for the values, display form or error terms for a variable. Answer tests The answer tests essentially compare two expressions. These may accept an option, e.g. the number of significant figures. Details of the current answer tests are available elsewhere . The result of an answer test should be Boolean outcome, true or false, errors, feedback, note. CAS string This is the most basic object. The purpose of this class is to maximise system stability. Validation and basic security checks takes place at this level. Other concepts Validity There are a number of reasons why a CAS expression needs to be \"valid\". These are security, stability, error trapping, pedagogic reasons, specific to a particular question. Security checks It is important that students do not evaluate expressions such as the following with the CAS : system(\"rm /*\"); for somewhat obvious reasons! Hence, we need to restrict the availability of certain functions to users. STACK \"trusts\" the teacher. Therefore there are three levels of Maxima functions. Forbidden. No string containing anything which might look like this should ever get near the CAS. Teacher. Teacher's answers cannot contain these, but they are not a security risk. Usually these have side effects within the Maxima code, e.g. setting a global variable which might cause problems later/elsewhere. Student. Student's expressions can only contain these. Stability It is important to try to prevent generating Maxima errors, particularly syntax errors. These cause havoc, because we don't have a proper API to Maxima. However, students are apt to put in ill-formed expressions, e.g. 2x , and it is obvious what they mean. So, STACK has options such as \"insert stars\" which try to patch these things up. Pedagogic reasons Some expressions will be rendered \"invalid\" because the student has done something which is not mathematically appropriate, i.e. permitted. For example, they may have used floating-point numbers in an expression when the teacher wanted rational numbers. See the section below on options. STACK Options We need to ensure the current options are respected in the new CAS setup. See options . Note that some of the inputs enable options to be set there. We might have a multi-part question in which part one forbids floating-point numbers, whereas the next part allows them. Validity is a concept tied to the input. Code layout Install Options The most difficult part of configuring the CAS is enabling Maxima to plot graphs. At install time, the relevant local setting for this installation are transferred to the file : stacklocal/maximalocal.mac The PHP code which creates this file sorts out backslashes and other vagaries... Efficiency The connection to Maxima is slow, and is certainly the most important issue when trying to scale up the STACK. The issue is that Maxima is quite slow to start. The University of Manchester provided a mechanism to compile the Maxima code and this leads to increased server response. See Optimising Maxima .","title":"PHP interface with the CAS"},{"location":"en/Developer/PHP-CAS/#php-interface-with-the-cas","text":"This document describes the design of the PHP interface to the CAS. While this interface was developed specifically to connect STACK to Maxima, it should be possible to factor this into other projects.","title":"PHP interface with the CAS"},{"location":"en/Developer/PHP-CAS/#high-level-objects","text":"","title":"High level objects"},{"location":"en/Developer/PHP-CAS/#cas-text","text":"CAS text is literally \"computer algebra active text\". This is documented here . It should be, in principle, possible to develop a \"CASText filter\" for Moodle. Note, that when constructing CAS text it must be able to take a CAS session as an argument to the constructor. In this way we can use lists of variables, such as question variables to provide values. E.g. we might have : n:rand(5)+2; in the question variables field. The question is instantiated, and then later we need to create some CAS text, e.g. feedback, in which we have : You were asked to find the integral of \\((x+2)^{@n@}\\) with respect to \\(x\\). In fact .... Here, we need the CAS text to be able to construct the text, with the previously evaluated value of n . This need is also why the CAS session returns the value of the variables as well as a displayed form. It is used here.","title":"CAS text"},{"location":"en/Developer/PHP-CAS/#cas-session","text":"This class actually calls the CAS itself. This class takes a list of CAS strings, including assignments of the form. key:rawvalue and executes this list in a single Maxima session. The results of this are then captures and fed back into the CAS strings so we have data in the form: key => value display error The value is the result of Maxima's \"string\" command, and this should be sufficient to renter the expression into Maxima later. Notice the difference between the rawvalue and the value. The display field contains the LaTeX displayed form of the variable. An important point here is that expressions (values) can refer to previous keys. This is one reason why we can't tie teachers down to a list of allowed functions. They will be defining variable and function names. We have implemented a lazy approach where the connection to the CAS is only made, and automatically made, when we ask for the values, display form or error terms for a variable.","title":"CAS session"},{"location":"en/Developer/PHP-CAS/#answer-tests","text":"The answer tests essentially compare two expressions. These may accept an option, e.g. the number of significant figures. Details of the current answer tests are available elsewhere . The result of an answer test should be Boolean outcome, true or false, errors, feedback, note.","title":"Answer tests"},{"location":"en/Developer/PHP-CAS/#cas-string","text":"This is the most basic object. The purpose of this class is to maximise system stability. Validation and basic security checks takes place at this level.","title":"CAS string"},{"location":"en/Developer/PHP-CAS/#other-concepts","text":"","title":"Other concepts"},{"location":"en/Developer/PHP-CAS/#validity","text":"There are a number of reasons why a CAS expression needs to be \"valid\". These are security, stability, error trapping, pedagogic reasons, specific to a particular question.","title":"Validity"},{"location":"en/Developer/PHP-CAS/#security-checks","text":"It is important that students do not evaluate expressions such as the following with the CAS : system(\"rm /*\"); for somewhat obvious reasons! Hence, we need to restrict the availability of certain functions to users. STACK \"trusts\" the teacher. Therefore there are three levels of Maxima functions. Forbidden. No string containing anything which might look like this should ever get near the CAS. Teacher. Teacher's answers cannot contain these, but they are not a security risk. Usually these have side effects within the Maxima code, e.g. setting a global variable which might cause problems later/elsewhere. Student. Student's expressions can only contain these.","title":"Security checks"},{"location":"en/Developer/PHP-CAS/#stability","text":"It is important to try to prevent generating Maxima errors, particularly syntax errors. These cause havoc, because we don't have a proper API to Maxima. However, students are apt to put in ill-formed expressions, e.g. 2x , and it is obvious what they mean. So, STACK has options such as \"insert stars\" which try to patch these things up.","title":"Stability"},{"location":"en/Developer/PHP-CAS/#pedagogic-reasons","text":"Some expressions will be rendered \"invalid\" because the student has done something which is not mathematically appropriate, i.e. permitted. For example, they may have used floating-point numbers in an expression when the teacher wanted rational numbers. See the section below on options.","title":"Pedagogic reasons"},{"location":"en/Developer/PHP-CAS/#stack-options","text":"We need to ensure the current options are respected in the new CAS setup. See options . Note that some of the inputs enable options to be set there. We might have a multi-part question in which part one forbids floating-point numbers, whereas the next part allows them. Validity is a concept tied to the input.","title":"STACK Options"},{"location":"en/Developer/PHP-CAS/#code-layout","text":"","title":"Code layout"},{"location":"en/Developer/PHP-CAS/#install-options","text":"The most difficult part of configuring the CAS is enabling Maxima to plot graphs. At install time, the relevant local setting for this installation are transferred to the file : stacklocal/maximalocal.mac The PHP code which creates this file sorts out backslashes and other vagaries...","title":"Install Options"},{"location":"en/Developer/PHP-CAS/#efficiency","text":"The connection to Maxima is slow, and is certainly the most important issue when trying to scale up the STACK. The issue is that Maxima is quite slow to start. The University of Manchester provided a mechanism to compile the Maxima code and this leads to increased server response. See Optimising Maxima .","title":"Efficiency"},{"location":"en/Developer/Parser/","text":"Building the parser Install node We need to use node: apt-get install node npm Inside stack/stack/maximaparser (or anywhere else), and not as root npm install pegjs npm install phpegjs ts-pegjs Compile the parser To compile the parser node gen.js This should return null null null and create new parsers for STACK. Adding rules to the parser Identical changes need to be made in both stack/maximaparser/MP_classes.php stack/maximaparser/autogen/parser-grammar.pegjs Naming parser rules We give each parser rule a name, numbered in the approximate appropriate order in which they need to be applied. 0-10 the mandatory stars for \"f(x)(y) => f(x)*(y)\" and syntactical candy like the logarithms 10-20 rules forbidding certain usages. 20-30 identification of typical syntax mistakes like \"sin^2(x)\". 30-40 rules forbidding certain usages, like calling functions at all. 40-50 various rules adding stars, insert stars in function calls and split variables and whatnot. 60-70 rules forbidding certain usages, e.g. forbid floats. 80-90 logic to check for things that have been done and deciding whether what was done was ok i.e. stars were inserted but not allowed in \"syntax=true\". Debugging the parser rules echo \"\\n\" . $ast->debugPrint($ast->toString() . ' ') . \"\\n\"; while ($ast->callbackRecurse($process, true) !== true) { echo \"\\n\" . $ast->debugPrint($ast->toString() . ' ') . \"\\n\"; } echo \"\\n\" . $ast->debugPrint($ast->toString() . ' ') . \"\\n\"; Nouns There are two separate classes of expressions which need to be protected as \"nouns\". The Maxima Boolean functions do not respect simp:false . So, we have parallel operators such as A nounand B . These should always be used when connecting to Maxima. Evaluation/simplification of Boolean expressions such as true and false is done on the Maxima side. Teachers and students should use and , etc. and these are always translated into an evaluation form. With simp:false we still have evaluation of expressions such as diff(x^3,x) to 3*x^2 . To protect student's answers (\"Your last answer was..\") we have parallel noun forms such as noundiff and nounint . Note, some of these also change the display of expressions. Maxima uses the apostophie to create noun forms, e.g. 'diff(x^3,x) . From STACK 4.3, teachers are able to use this.","title":"Building the parser"},{"location":"en/Developer/Parser/#building-the-parser","text":"","title":"Building the parser"},{"location":"en/Developer/Parser/#install-node","text":"We need to use node: apt-get install node npm Inside stack/stack/maximaparser (or anywhere else), and not as root npm install pegjs npm install phpegjs ts-pegjs","title":"Install node"},{"location":"en/Developer/Parser/#compile-the-parser","text":"To compile the parser node gen.js This should return null null null and create new parsers for STACK.","title":"Compile the parser"},{"location":"en/Developer/Parser/#adding-rules-to-the-parser","text":"Identical changes need to be made in both stack/maximaparser/MP_classes.php stack/maximaparser/autogen/parser-grammar.pegjs","title":"Adding rules to the parser"},{"location":"en/Developer/Parser/#naming-parser-rules","text":"We give each parser rule a name, numbered in the approximate appropriate order in which they need to be applied. 0-10 the mandatory stars for \"f(x)(y) => f(x)*(y)\" and syntactical candy like the logarithms 10-20 rules forbidding certain usages. 20-30 identification of typical syntax mistakes like \"sin^2(x)\". 30-40 rules forbidding certain usages, like calling functions at all. 40-50 various rules adding stars, insert stars in function calls and split variables and whatnot. 60-70 rules forbidding certain usages, e.g. forbid floats. 80-90 logic to check for things that have been done and deciding whether what was done was ok i.e. stars were inserted but not allowed in \"syntax=true\".","title":"Naming parser rules"},{"location":"en/Developer/Parser/#debugging-the-parser-rules","text":"echo \"\\n\" . $ast->debugPrint($ast->toString() . ' ') . \"\\n\"; while ($ast->callbackRecurse($process, true) !== true) { echo \"\\n\" . $ast->debugPrint($ast->toString() . ' ') . \"\\n\"; } echo \"\\n\" . $ast->debugPrint($ast->toString() . ' ') . \"\\n\";","title":"Debugging the parser rules"},{"location":"en/Developer/Parser/#nouns","text":"There are two separate classes of expressions which need to be protected as \"nouns\". The Maxima Boolean functions do not respect simp:false . So, we have parallel operators such as A nounand B . These should always be used when connecting to Maxima. Evaluation/simplification of Boolean expressions such as true and false is done on the Maxima side. Teachers and students should use and , etc. and these are always translated into an evaluation form. With simp:false we still have evaluation of expressions such as diff(x^3,x) to 3*x^2 . To protect student's answers (\"Your last answer was..\") we have parallel noun forms such as noundiff and nounint . Note, some of these also change the display of expressions. Maxima uses the apostophie to create noun forms, e.g. 'diff(x^3,x) . From STACK 4.3, teachers are able to use this.","title":"Nouns"},{"location":"en/Developer/Question_state_caching/","text":"Question state caching The current cache is very close indeed to the CAS. Indeed, it is actually calls to the CAS itself which are cached. This gives a dramatic increase in performance when the result already exists. We recommend using the cache on a production server. Note, the cache needs to be cleared manually, perhaps on an annual update cycle. Clearing the cache This can be done through Moodle. Navigate to Home > Site administration > Plugins > Question types > STACK Choose to view the healthcheck page. At the bottom of this is a button to clear the cache.","title":"Question state caching"},{"location":"en/Developer/Question_state_caching/#question-state-caching","text":"The current cache is very close indeed to the CAS. Indeed, it is actually calls to the CAS itself which are cached. This gives a dramatic increase in performance when the result already exists. We recommend using the cache on a production server. Note, the cache needs to be cleared manually, perhaps on an annual update cycle.","title":"Question state caching"},{"location":"en/Developer/Question_state_caching/#clearing-the-cache","text":"This can be done through Moodle. Navigate to Home > Site administration > Plugins > Question types > STACK Choose to view the healthcheck page. At the bottom of this is a button to clear the cache.","title":"Clearing the cache"},{"location":"en/Developer/Releasing/","text":"STACK release process notes Note, these notes are designed for developers releasing a new version through the Moodle plugin database. They are probably not useful for anyone else. Release needs to be done for the whole \"set\". Do we increment the numbers of all components, e.g. behaviours, or just the qtype_stack? for key releases, we do them all. for bug fixes just the question type. 1. Pre-release checks Check Readme.md Check docs development history/track . Execute doc/maintenance.php to search for broken links etc. version.php check both the Moodle versions, and the required number. (https://docs.moodle.org/dev/Releases) MATURITY_STABLE ? Check version numbers on stackmaxima.mac. Run unit tests. Run code checker. Commit all changes to git, e.g. \"Update version number for the 4.3.6 release.\" 2. Create new tag with version name E.g. \"v4.3.6\". Push to GitHub. Push tags to GitHub Tortoise git: pulldown from push Unix: git tag -a v4.3.6 -m \"Update version number for the 4.3.6 release.\" Unix: git push Unix: git push --tags 3. Moodle plugins database entry for the plugin Add a new version to the Moodle plugins database entry for the plugin. If version number does not appear in the dropdown, then upload it from GitHub. Version information Upload zipfile GitHub Username = maths Choose appropriate plugin Choose tags Choose tag number Rename root directory + Fix README filename + Choose supported Moodle. Then check updated information on the form. (don't add \"master\" to branch info)","title":"STACK release process notes"},{"location":"en/Developer/Releasing/#stack-release-process-notes","text":"Note, these notes are designed for developers releasing a new version through the Moodle plugin database. They are probably not useful for anyone else. Release needs to be done for the whole \"set\". Do we increment the numbers of all components, e.g. behaviours, or just the qtype_stack? for key releases, we do them all. for bug fixes just the question type.","title":"STACK release process notes"},{"location":"en/Developer/Releasing/#1-pre-release-checks","text":"Check Readme.md Check docs development history/track . Execute doc/maintenance.php to search for broken links etc. version.php check both the Moodle versions, and the required number. (https://docs.moodle.org/dev/Releases) MATURITY_STABLE ? Check version numbers on stackmaxima.mac. Run unit tests. Run code checker. Commit all changes to git, e.g. \"Update version number for the 4.3.6 release.\"","title":"1. Pre-release checks"},{"location":"en/Developer/Releasing/#2-create-new-tag-with-version-name","text":"E.g. \"v4.3.6\". Push to GitHub. Push tags to GitHub Tortoise git: pulldown from push Unix: git tag -a v4.3.6 -m \"Update version number for the 4.3.6 release.\" Unix: git push Unix: git push --tags","title":"2. Create new tag with version name"},{"location":"en/Developer/Releasing/#3-moodle-plugins-database-entry-for-the-plugin","text":"Add a new version to the Moodle plugins database entry for the plugin. If version number does not appear in the dropdown, then upload it from GitHub. Version information Upload zipfile GitHub Username = maths Choose appropriate plugin Choose tags Choose tag number Rename root directory + Fix README filename + Choose supported Moodle. Then check updated information on the form. (don't add \"master\" to branch info)","title":"3. Moodle plugins database entry for the plugin"},{"location":"en/Developer/Running_question_tests_other_site/","text":"Running question tests for questions on other sites When you upgrade to a new version of STACK, it would be reassuring to know beforehand whether there is any change in behaviour in STACK which will affect your existing questions. After you have done the upgrade, it is easy to run the question tests in bulk, using the link on the STACK plugin admin screen. However, with a bit of hackery, it is possible to run the code from the new STACK release (with a few modifications) on your development server, but have it open a read-only connection to your live database, in order to load the questions and their corresponding tests. The following patch is provided as-is. It will probably require tinkering with to work in any given situation. diff --git a/bulktest.php b/bulktest.php index 7974af2..a6614f2 100644 --- a/bulktest.php +++ b/bulktest.php @@ -29,13 +29,14 @@ require_once($CFG->libdir . '/questionlib.php'); require_once(__DIR__ . '/locallib.php'); require_once(__DIR__ . '/stack/utils.class.php'); require_once(__DIR__ . '/stack/bulktester.class.php'); +require_once(__DIR__ . '/stack/cas/connectorhelper.class.php'); // Get the parameters from the URL. $contextid = required_param('contextid', PARAM_INT); // Login and check permissions. -$context = context::instance_by_id($contextid); +$context = context_system::instance(); require_login(); require_capability('qtype/stack:usediagnostictools', $context); $PAGE->set_url('/question/type/stack/bulktest.php', array('contextid' => $context->id)); @@ -50,8 +51,8 @@ if ($context->contextlevel == CONTEXT_MODULE) { $PAGE->set_cm($cm, $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST)); } -// Create the helper class. -$bulktester = new stack_bulk_tester(); +// Cache the connection settings. +stack_connection_helper::make(); // Release the session, so the user can do other things while this runs. \\core\\session\\manager::write_close(); @@ -60,9 +61,25 @@ $bulktester = new stack_bulk_tester(); echo $OUTPUT->header(); echo $OUTPUT->heading($title); +// Connect to other database. +$bulktestrealdb = $DB; +if (!$DB = moodle_database::get_driver_instance($CFG->dbtype, $CFG->dblibrary)) { + throw new dml_exception('dbdriverproblem', \"Unknown driver $CFG->dblibrary/$CFG->dbtype\"); +} +$DB->connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG->dboptions); + +$context = context::instance_by_id($contextid); + +// Create the helper class. +$bulktester = new stack_bulk_tester(); + // Run the tests. list($allpassed, $failing) = $bulktester->run_all_tests_for_context($context); // Display the final summary. $bulktester->print_overall_result($allpassed, $failing); + +// Switch back to the read DB. +$DB = $bulktestrealdb; + echo $OUTPUT->footer(); diff --git a/bulktestindex.php b/bulktestindex.php index 3d5eafa..f84b4bd 100644 --- a/bulktestindex.php +++ b/bulktestindex.php @@ -38,13 +38,20 @@ $PAGE->set_url('/question/type/stack/bulktestindex.php'); $PAGE->set_context($context); $PAGE->set_title(stack_string('bulktestindextitle')); -// Create the helper class. -$bulktester = new stack_bulk_tester(); - // Display. echo $OUTPUT->header(); echo $OUTPUT->heading(stack_string('replacedollarsindex')); +// Connect to other database. +$realdb = $DB; +if (!$DB = moodle_database::get_driver_instance($CFG->dbtype, $CFG->dblibrary)) { + throw new dml_exception('dbdriverproblem', \"Unknown driver $CFG->dblibrary/$CFG->dbtype\"); +} +$DB->connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG->dboptions); + +// Create the helper class. +$bulktester = new stack_bulk_tester(); + echo html_writer::start_tag('ul'); foreach ($bulktester->get_stack_questions_by_context() as $contextid => $numstackquestions) { echo html_writer::tag('li', html_writer::link( @@ -53,6 +60,9 @@ foreach ($bulktester->get_stack_questions_by_context() as $contextid => $numstac } echo html_writer::end_tag('ul'); +// Switch back to the read DB. +$DB = $realdb; + if (has_capability('moodle/site:config', context_system::instance())) { echo html_writer::tag('p', html_writer::link( new moodle_url('/question/type/stack/bulktestall.php'), stack_string('bulktestrun'))); diff --git a/stack/cas/connectorhelper.class.php b/stack/cas/connectorhelper.class.php index 40ef26e..d8ba3e1 100644 --- a/stack/cas/connectorhelper.class.php +++ b/stack/cas/connectorhelper.class.php @@ -78,6 +78,11 @@ abstract class stack_connection_helper { throw new stack_exception('stack_cas_connection: Unknown platform ' . self::$config->platform); } + global $bulktestrealdb; + if (!empty(($bulktestrealdb))) { + // Use the real db as the cache for performance. + return new stack_cas_connection_db_cache($connection, $debuglog, $bulktestrealdb); + } switch (self::$config->casresultscache) { case 'db': global $DB; As an example of the kind of tinkering that might be required, and the time I devised this patch, the new version of STACK had a database change, which had not yet been applied to our live database. Therefore, I had to tweak the question loading code as follows: diff --git a/questiontype.php b/questiontype.php index 6dcc96d..02c4354 100644 --- a/questiontype.php +++ b/questiontype.php @@ -348,7 +348,7 @@ class qtype_stack extends question_type { $question->inputs = $DB->get_records('qtype_stack_inputs', array('questionid' => $question->id), 'name', 'name, id, questionid, type, tans, boxsize, strictsyntax, insertstars, ' . - 'syntaxhint, syntaxattribute, forbidwords, allowwords, forbidfloat, requirelowestterms, ' . + 'syntaxhint, 0 AS syntaxattribute, forbidwords, allowwords, forbidfloat, requirelowestterms, ' . 'checkanswertype, mustverify, showvalidation, options'); $question->prts = $DB->get_records('qtype_stack_prts', @@ -403,7 +403,7 @@ class qtype_stack extends question_type { 'strictSyntax' => (bool) $inputdata->strictsyntax, 'insertStars' => (int) $inputdata->insertstars, 'syntaxHint' => $inputdata->syntaxhint, - 'syntaxAttribute' => $inputdata->syntaxattribute, + 'syntaxAttribute' => '0', 'forbidWords' => $inputdata->forbidwords, 'allowWords' => $inputdata->allowwords, 'forbidFloats' => (bool) $inputdata->forbidfloat,","title":"Running question tests for questions on other sites"},{"location":"en/Developer/Running_question_tests_other_site/#running-question-tests-for-questions-on-other-sites","text":"When you upgrade to a new version of STACK, it would be reassuring to know beforehand whether there is any change in behaviour in STACK which will affect your existing questions. After you have done the upgrade, it is easy to run the question tests in bulk, using the link on the STACK plugin admin screen. However, with a bit of hackery, it is possible to run the code from the new STACK release (with a few modifications) on your development server, but have it open a read-only connection to your live database, in order to load the questions and their corresponding tests. The following patch is provided as-is. It will probably require tinkering with to work in any given situation. diff --git a/bulktest.php b/bulktest.php index 7974af2..a6614f2 100644 --- a/bulktest.php +++ b/bulktest.php @@ -29,13 +29,14 @@ require_once($CFG->libdir . '/questionlib.php'); require_once(__DIR__ . '/locallib.php'); require_once(__DIR__ . '/stack/utils.class.php'); require_once(__DIR__ . '/stack/bulktester.class.php'); +require_once(__DIR__ . '/stack/cas/connectorhelper.class.php'); // Get the parameters from the URL. $contextid = required_param('contextid', PARAM_INT); // Login and check permissions. -$context = context::instance_by_id($contextid); +$context = context_system::instance(); require_login(); require_capability('qtype/stack:usediagnostictools', $context); $PAGE->set_url('/question/type/stack/bulktest.php', array('contextid' => $context->id)); @@ -50,8 +51,8 @@ if ($context->contextlevel == CONTEXT_MODULE) { $PAGE->set_cm($cm, $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST)); } -// Create the helper class. -$bulktester = new stack_bulk_tester(); +// Cache the connection settings. +stack_connection_helper::make(); // Release the session, so the user can do other things while this runs. \\core\\session\\manager::write_close(); @@ -60,9 +61,25 @@ $bulktester = new stack_bulk_tester(); echo $OUTPUT->header(); echo $OUTPUT->heading($title); +// Connect to other database. +$bulktestrealdb = $DB; +if (!$DB = moodle_database::get_driver_instance($CFG->dbtype, $CFG->dblibrary)) { + throw new dml_exception('dbdriverproblem', \"Unknown driver $CFG->dblibrary/$CFG->dbtype\"); +} +$DB->connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG->dboptions); + +$context = context::instance_by_id($contextid); + +// Create the helper class. +$bulktester = new stack_bulk_tester(); + // Run the tests. list($allpassed, $failing) = $bulktester->run_all_tests_for_context($context); // Display the final summary. $bulktester->print_overall_result($allpassed, $failing); + +// Switch back to the read DB. +$DB = $bulktestrealdb; + echo $OUTPUT->footer(); diff --git a/bulktestindex.php b/bulktestindex.php index 3d5eafa..f84b4bd 100644 --- a/bulktestindex.php +++ b/bulktestindex.php @@ -38,13 +38,20 @@ $PAGE->set_url('/question/type/stack/bulktestindex.php'); $PAGE->set_context($context); $PAGE->set_title(stack_string('bulktestindextitle')); -// Create the helper class. -$bulktester = new stack_bulk_tester(); - // Display. echo $OUTPUT->header(); echo $OUTPUT->heading(stack_string('replacedollarsindex')); +// Connect to other database. +$realdb = $DB; +if (!$DB = moodle_database::get_driver_instance($CFG->dbtype, $CFG->dblibrary)) { + throw new dml_exception('dbdriverproblem', \"Unknown driver $CFG->dblibrary/$CFG->dbtype\"); +} +$DB->connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG->dboptions); + +// Create the helper class. +$bulktester = new stack_bulk_tester(); + echo html_writer::start_tag('ul'); foreach ($bulktester->get_stack_questions_by_context() as $contextid => $numstackquestions) { echo html_writer::tag('li', html_writer::link( @@ -53,6 +60,9 @@ foreach ($bulktester->get_stack_questions_by_context() as $contextid => $numstac } echo html_writer::end_tag('ul'); +// Switch back to the read DB. +$DB = $realdb; + if (has_capability('moodle/site:config', context_system::instance())) { echo html_writer::tag('p', html_writer::link( new moodle_url('/question/type/stack/bulktestall.php'), stack_string('bulktestrun'))); diff --git a/stack/cas/connectorhelper.class.php b/stack/cas/connectorhelper.class.php index 40ef26e..d8ba3e1 100644 --- a/stack/cas/connectorhelper.class.php +++ b/stack/cas/connectorhelper.class.php @@ -78,6 +78,11 @@ abstract class stack_connection_helper { throw new stack_exception('stack_cas_connection: Unknown platform ' . self::$config->platform); } + global $bulktestrealdb; + if (!empty(($bulktestrealdb))) { + // Use the real db as the cache for performance. + return new stack_cas_connection_db_cache($connection, $debuglog, $bulktestrealdb); + } switch (self::$config->casresultscache) { case 'db': global $DB; As an example of the kind of tinkering that might be required, and the time I devised this patch, the new version of STACK had a database change, which had not yet been applied to our live database. Therefore, I had to tweak the question loading code as follows: diff --git a/questiontype.php b/questiontype.php index 6dcc96d..02c4354 100644 --- a/questiontype.php +++ b/questiontype.php @@ -348,7 +348,7 @@ class qtype_stack extends question_type { $question->inputs = $DB->get_records('qtype_stack_inputs', array('questionid' => $question->id), 'name', 'name, id, questionid, type, tans, boxsize, strictsyntax, insertstars, ' . - 'syntaxhint, syntaxattribute, forbidwords, allowwords, forbidfloat, requirelowestterms, ' . + 'syntaxhint, 0 AS syntaxattribute, forbidwords, allowwords, forbidfloat, requirelowestterms, ' . 'checkanswertype, mustverify, showvalidation, options'); $question->prts = $DB->get_records('qtype_stack_prts', @@ -403,7 +403,7 @@ class qtype_stack extends question_type { 'strictSyntax' => (bool) $inputdata->strictsyntax, 'insertStars' => (int) $inputdata->insertstars, 'syntaxHint' => $inputdata->syntaxhint, - 'syntaxAttribute' => $inputdata->syntaxattribute, + 'syntaxAttribute' => '0', 'forbidWords' => $inputdata->forbidwords, 'allowWords' => $inputdata->allowwords, 'forbidFloats' => (bool) $inputdata->forbidfloat,","title":"Running question tests for questions on other sites"},{"location":"en/Developer/Security_map/","text":"Security-map In STACK 4.3 the new Maxima statement parser infrastruture transfers the old listings of identifiers that are forbidden for students or simply globally forbidden to a JSON file describing all identifiers of functions, variables, constants, and operators and features we attach to them. This JSON file is being updated manually and through the data collected by the census and can be extended freely to track new features as things progress. This documentation section describes what is currently being contained in that map. Units Note that the security-map does not define identifiers that are units and based on the current design you should not declare them there. In the current form if we are in units mode an overlay will be placed on top of the security-map and that overlay will declare are identifers that are units mg , K ,... as constant: 's' meaning that they are constants that the student may use in their inputs as long as they are not declared forbidden through the forbidden words mechanism. Features currently tracked Security In security features we typically use values \"s\" , \"t\" , and \"f\" . \"s\" declares that students may use this identifier in the specified way unless specifically forbidden with the forbidden words mechanism. \"t\" means that by default only the author may use it but can specially allow it using the allowed words mechanism. \"f\" means that for whatever reason not even the author may use it. constant is a feature declaring the security level at which a given identifier is to be considered as a constant and can thus be only red and never written to. This makes it so that you cannot write %pi:4 but can use %pi otherwise. evflag is a feature declaring the security level at which a given identifier is to be considered as an evaluation flag. Basically, wether it can be used as a suffix to a statement sqrt(3),numer or as a paramter to ev(sqrt(3),numer=true) and similar functions. function is a feature declaring the security level at which a given identifier is to be considered as a function name and can thus be called. keyword is a feature declaring the security level at which a given identifier is to be considered as a keyword that can be used one could use it to declare that students may not use specific types of loops or other flow control features. operator is a feature declaring the security level at which a given operator is usable at. By operator we mean anything from ^ and and to various brackets. variable is a feature declaring the security level at which a given identifier is to be considered as a variable and can thus be both written and red. In addition to those we also declare certain identifiers with globalyforbiddenfunction or globalyforbiddenvariable in the cases where we might want to handle attempts to use them in a more serious manner. Nouns In the old system certain functions and operators were nounified to stop the CAS from evaluating them and thus allow simpler assessment of the original input form. For this we define features nounfunction and nounoperator that have the name of the matching nounified identifier. When processing student input functions and operators that have noun variants are nounified unless specially requested to be kept as is. In addition to the nounifying one may need to denounify and then we define nounoperatorfor or nounfunctionfor at the noun end. Aliases int(foo,x) is equivalent to integrate(foo,x) which leads to issues when using forbidden words and only forbidding integrate to deal with this we now declare aliases as features for various identifiers so that if you forbid one the others are also forbidden. We also use those aliases to map similar statements to use the same alias thus increasing the likelihood of cache hits. Aliases like nouns are defined by usage type e.g. aliasfunction feature tells that if some one uses a function with this name it should be interpreted as a function call with the name of this feature. aliasvariable does the same for both constants and variables. As it is often necessary to find all the aliases that point to a given identifier we also define features aliasfunctions and aliasvariables that contain lists of such identifiers. Updating such lists should be left to tools that make sure they are correct. Aliases often do not match the logical aliases present in the CAS instead they tend to map things so that they point to the version that is shortest to minimise space usage, e.g. while some might think int => integrate here we rather have integrate => int . The base alias is sent to the CAS. This enables support for some unicode, e.g. pi, which does not break the CAS.","title":"Security map"},{"location":"en/Developer/Security_map/#security-map","text":"In STACK 4.3 the new Maxima statement parser infrastruture transfers the old listings of identifiers that are forbidden for students or simply globally forbidden to a JSON file describing all identifiers of functions, variables, constants, and operators and features we attach to them. This JSON file is being updated manually and through the data collected by the census and can be extended freely to track new features as things progress. This documentation section describes what is currently being contained in that map.","title":"Security-map"},{"location":"en/Developer/Security_map/#units","text":"Note that the security-map does not define identifiers that are units and based on the current design you should not declare them there. In the current form if we are in units mode an overlay will be placed on top of the security-map and that overlay will declare are identifers that are units mg , K ,... as constant: 's' meaning that they are constants that the student may use in their inputs as long as they are not declared forbidden through the forbidden words mechanism.","title":"Units"},{"location":"en/Developer/Security_map/#features-currently-tracked","text":"","title":"Features currently tracked"},{"location":"en/Developer/Security_map/#security","text":"In security features we typically use values \"s\" , \"t\" , and \"f\" . \"s\" declares that students may use this identifier in the specified way unless specifically forbidden with the forbidden words mechanism. \"t\" means that by default only the author may use it but can specially allow it using the allowed words mechanism. \"f\" means that for whatever reason not even the author may use it. constant is a feature declaring the security level at which a given identifier is to be considered as a constant and can thus be only red and never written to. This makes it so that you cannot write %pi:4 but can use %pi otherwise. evflag is a feature declaring the security level at which a given identifier is to be considered as an evaluation flag. Basically, wether it can be used as a suffix to a statement sqrt(3),numer or as a paramter to ev(sqrt(3),numer=true) and similar functions. function is a feature declaring the security level at which a given identifier is to be considered as a function name and can thus be called. keyword is a feature declaring the security level at which a given identifier is to be considered as a keyword that can be used one could use it to declare that students may not use specific types of loops or other flow control features. operator is a feature declaring the security level at which a given operator is usable at. By operator we mean anything from ^ and and to various brackets. variable is a feature declaring the security level at which a given identifier is to be considered as a variable and can thus be both written and red. In addition to those we also declare certain identifiers with globalyforbiddenfunction or globalyforbiddenvariable in the cases where we might want to handle attempts to use them in a more serious manner.","title":"Security"},{"location":"en/Developer/Security_map/#nouns","text":"In the old system certain functions and operators were nounified to stop the CAS from evaluating them and thus allow simpler assessment of the original input form. For this we define features nounfunction and nounoperator that have the name of the matching nounified identifier. When processing student input functions and operators that have noun variants are nounified unless specially requested to be kept as is. In addition to the nounifying one may need to denounify and then we define nounoperatorfor or nounfunctionfor at the noun end.","title":"Nouns"},{"location":"en/Developer/Security_map/#aliases","text":"int(foo,x) is equivalent to integrate(foo,x) which leads to issues when using forbidden words and only forbidding integrate to deal with this we now declare aliases as features for various identifiers so that if you forbid one the others are also forbidden. We also use those aliases to map similar statements to use the same alias thus increasing the likelihood of cache hits. Aliases like nouns are defined by usage type e.g. aliasfunction feature tells that if some one uses a function with this name it should be interpreted as a function call with the name of this feature. aliasvariable does the same for both constants and variables. As it is often necessary to find all the aliases that point to a given identifier we also define features aliasfunctions and aliasvariables that contain lists of such identifiers. Updating such lists should be left to tools that make sure they are correct. Aliases often do not match the logical aliases present in the CAS instead they tend to map things so that they point to the version that is shortest to minimise space usage, e.g. while some might think int => integrate here we rather have integrate => int . The base alias is sent to the CAS. This enables support for some unicode, e.g. pi, which does not break the CAS.","title":"Aliases"},{"location":"en/Developer/Syntax_Future/","text":"Future plans for syntax of answers and STACK. Problem we are trying to solve : students don't use the correct syntax. We want, as much as possible, to spot common problems and either (1) tell students what they have done wrong, or (2) just condone the problem and fix it quietly. Goal : be as helpful to students as possible. Separate \"spotting problems/setting a context\" from \"Fixing/condoning problems\". Teachers are expected to always use correct Maxima syntax, and use inert functions such as stackunits . Use the \"Insert stars\" option to set the pattern/context for checking expresions. Use the \"Strict syntax\" option to decide if we can fix/condone a problem for students. \"yes\" we don't condone any problem, but we do report back error messages such as \"you seem to be missing *s\", etc. \"no\" we just interpret and use the expression. It may still be \"invalid\". E.g. if we have \"Insert stars\" looking for implied multiplication, and \"Strict syntax\" is \"no\" then a student's answer 2x will be changed to 2*x and used without comment. Some patterns must always be wrong. Always check for these, even with teachers (who also need helpful error messages!). )( must be missing a star. Some implied multiplication patterns such as 2x , or space patterns 2 x . Atoms which appear as both function names and variable names. E.g. x(x+1) . The issues are as follows: Implied multiplication. 2x must be 2*x . x2 could be the atom x2 , x*2 , or x[2] . Only if we look for \"implied multiplication\" do we suggest x2->x*2 . Use of spaces as implied multiplication. 2 x must be 2*x . Assume single variable character names. In many situations we know that a student will only have single character variable names. Identify variables in the student's answer made up of more than one character then replace these with the product of the letters. We identify variables and known functions are now protected, e.g. sin(ax) will not end up as s*i*n*(a*x) but as sin(a*x) . Greek letters are always protected. (This might not work, e.g. pi might be p*i , but this is why we have validation!) in is a keyword in Maxima, but we treat this as a special case in->i*n . asin(x) is a problem, because asin is a function. This is not transformed to a*sin(x) . Prevent the use of any user-defined functions? E.g. f(x+1) is function application in default Maxima, but f us not defined. \"Insert stars\" option. The value of this option is an integer. Sum the numbers for each issue you want to include. I.e. written in binary, each bit acts as a flag for each of the issues above. This is extensible, as we identify new issues. 0 : Expect strict Maxima syntax. I.e. don't insert *s for implied multiplication, or in place of any spaces. 1 : Insert * s for implied multiplication. If any patterns are identified as needing * s then they will automatically be inserted into the expression quietly. 2 : Allow spaces for implied multiplication. 4 : Assume single character variable names. 8 : Prevent user-defined functions. Therefore, a value of 3 both inserts * s for implied multiplication and allow spaces to imply multiplication, but we do not assume single character variable names, and we do not prevent user-defined functions. Other proposals. Use the \"forbid floats\" option to deal with patterns like scientific notation. If \"forbid floats\" is true we add patterns so that 3E2 or 3e2 (which Maxima interprets as 300.0 ) are added to any for insert *s. Future developments Support other issues in context, at the parsing stage. Base M numbers Allow entry of unicode? Spot order of precedence problems: x = 1 or 2 (normally used to mean x=1 or x=2 ). Bespoke grammers, e.g. add in support for intervals. x in (-2,-1] or [1,2) . Student use of control structures, e.g. if then... ? Legacy mapping. For old questions (those with stackversion < 2019041600 ) we automatically perform the following mapping for the value of the insert stars option. old -> new (Old phrase). 0 -> 0 (Don't insert stars) 1 -> 1 (Insert stars for implied multiplication only) 2 -> 4 (Insert stars assuming single-character variable names) 3 -> 2 (Insert stars for spaces only) 4 -> 3 (Insert stars for implied multiplication and for spaces) 5 -> 7 (Insert stars assuming single-character variables, implied and for spaces)","title":"Future plans for syntax of answers and STACK."},{"location":"en/Developer/Syntax_Future/#future-plans-for-syntax-of-answers-and-stack","text":"Problem we are trying to solve : students don't use the correct syntax. We want, as much as possible, to spot common problems and either (1) tell students what they have done wrong, or (2) just condone the problem and fix it quietly. Goal : be as helpful to students as possible. Separate \"spotting problems/setting a context\" from \"Fixing/condoning problems\". Teachers are expected to always use correct Maxima syntax, and use inert functions such as stackunits . Use the \"Insert stars\" option to set the pattern/context for checking expresions. Use the \"Strict syntax\" option to decide if we can fix/condone a problem for students. \"yes\" we don't condone any problem, but we do report back error messages such as \"you seem to be missing *s\", etc. \"no\" we just interpret and use the expression. It may still be \"invalid\". E.g. if we have \"Insert stars\" looking for implied multiplication, and \"Strict syntax\" is \"no\" then a student's answer 2x will be changed to 2*x and used without comment. Some patterns must always be wrong. Always check for these, even with teachers (who also need helpful error messages!). )( must be missing a star. Some implied multiplication patterns such as 2x , or space patterns 2 x . Atoms which appear as both function names and variable names. E.g. x(x+1) . The issues are as follows: Implied multiplication. 2x must be 2*x . x2 could be the atom x2 , x*2 , or x[2] . Only if we look for \"implied multiplication\" do we suggest x2->x*2 . Use of spaces as implied multiplication. 2 x must be 2*x . Assume single variable character names. In many situations we know that a student will only have single character variable names. Identify variables in the student's answer made up of more than one character then replace these with the product of the letters. We identify variables and known functions are now protected, e.g. sin(ax) will not end up as s*i*n*(a*x) but as sin(a*x) . Greek letters are always protected. (This might not work, e.g. pi might be p*i , but this is why we have validation!) in is a keyword in Maxima, but we treat this as a special case in->i*n . asin(x) is a problem, because asin is a function. This is not transformed to a*sin(x) . Prevent the use of any user-defined functions? E.g. f(x+1) is function application in default Maxima, but f us not defined.","title":"Future plans for syntax of answers and STACK."},{"location":"en/Developer/Syntax_Future/#insert-stars-option","text":"The value of this option is an integer. Sum the numbers for each issue you want to include. I.e. written in binary, each bit acts as a flag for each of the issues above. This is extensible, as we identify new issues. 0 : Expect strict Maxima syntax. I.e. don't insert *s for implied multiplication, or in place of any spaces. 1 : Insert * s for implied multiplication. If any patterns are identified as needing * s then they will automatically be inserted into the expression quietly. 2 : Allow spaces for implied multiplication. 4 : Assume single character variable names. 8 : Prevent user-defined functions. Therefore, a value of 3 both inserts * s for implied multiplication and allow spaces to imply multiplication, but we do not assume single character variable names, and we do not prevent user-defined functions.","title":"\"Insert stars\" option."},{"location":"en/Developer/Syntax_Future/#other-proposals","text":"Use the \"forbid floats\" option to deal with patterns like scientific notation. If \"forbid floats\" is true we add patterns so that 3E2 or 3e2 (which Maxima interprets as 300.0 ) are added to any for insert *s.","title":"Other proposals."},{"location":"en/Developer/Syntax_Future/#future-developments","text":"Support other issues in context, at the parsing stage. Base M numbers Allow entry of unicode? Spot order of precedence problems: x = 1 or 2 (normally used to mean x=1 or x=2 ). Bespoke grammers, e.g. add in support for intervals. x in (-2,-1] or [1,2) . Student use of control structures, e.g. if then... ?","title":"Future developments"},{"location":"en/Developer/Syntax_Future/#legacy-mapping","text":"For old questions (those with stackversion < 2019041600 ) we automatically perform the following mapping for the value of the insert stars option. old -> new (Old phrase). 0 -> 0 (Don't insert stars) 1 -> 1 (Insert stars for implied multiplication only) 2 -> 4 (Insert stars assuming single-character variable names) 3 -> 2 (Insert stars for spaces only) 4 -> 3 (Insert stars for implied multiplication and for spaces) 5 -> 7 (Insert stars assuming single-character variables, implied and for spaces)","title":"Legacy mapping."},{"location":"en/Developer/Unit_tests/","text":"Unit tests Unit testing for STACK comes in the following three parts. PHP Unit tests, Maxima unit tests, Test scripts exposed to the question author. These three mechanisms aim to provide comprehensive testing of STACK. The last category are a compromise, and are designed to expose the results of unit tests to question authors in a reasonably attractive manner to inform them of what each answer test is actually supposed to do. Links to these tests are in the healthcheck page. STACK uses the Travis continuous integration mechanism so that all unit tests are triggered when a commit is pushed to GitHub. See https://travis-ci.org/maths/moodle-qtype_stack . PHP Unit tests Moodle uses PHPUnit for its unit tests. Setting this up and getting it working is a bit of a pain, but you only have to follow the instructions in the Moodle PHPUnit documentation once to get it working. NOTE: do not use linux-optimised when running the unit tests. The STACK installation must be set to linux (or win of course). STACK-specific set-up steps Once you have executed php admin/tool/phpunit/cli/init.php you need to edit the config.php file to add the following configuration information near the end, but before the require_once(dirname(__FILE__) . '/lib/setup.php'); . Other options for the platform are unix and unix-optimised . define('QTYPE_STACK_TEST_CONFIG_PLATFORM', 'linux'); /* It is essential that the MAXIMAVERSION and MAXIMACOMMAND match. That is, you must check that the command executed here really loads the version specified in MAXIMAVERSION. Some unit tests are version dependent. Do not use default. */ define('QTYPE_STACK_TEST_CONFIG_MAXIMAVERSION', '5.42.0'); define('QTYPE_STACK_TEST_CONFIG_MAXIMACOMMAND', 'maxima --use-version=5.42.0'); define('QTYPE_STACK_TEST_CONFIG_CASTIMEOUT', '1'); define('QTYPE_STACK_TEST_CONFIG_MAXIMALIBRARIES', 'stats, distrib, descriptive, simplex'); define('QTYPE_STACK_TEST_CONFIG_CASDEBUGGING', '0'); define('QTYPE_STACK_TEST_CONFIG_PLOTCOMMAND', ''); define('QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE', 'db'); You should probably copy the settings from Admin -> Plugins -> Question types -> STACK. However, you can use the flexibility to have different configurations of STACK for testing in order to test a new release of Maxima, for example. If you want to run just the unit tests for STACK, you can use the command vendor\\bin\\phpunit --group qtype_stack vendor/bin/phpunit --group qtype_stack To make sure this keeps working, please annotate all test classes with /** * @group qtype_stack */ Stop resetting the dataroot directory. In [...]/moodle/lib/phpunit/classes/util.php public static function reset_all_data() { Comment out the line (currently 253). self::reset_dataroot(); This stops the unit tests from deleting the Maxima image files at each step. Making the tests faster The tests will be very slow, because the Moodle PHPUnit integration keeps resetting the database state between each test, so you get no benefit from the cache. To get around that problem, you can use the option to connect to a different database server for the cache. Modify the following to suit your system and put this near the end of your config.php file: Note you need to make sure the QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE variable is only defined once. define('QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE', 'otherdb'); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBTYPE', $CFG->dbtype); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBLIBRARY', $CFG->dblibrary); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBHOST', $CFG->dbhost); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBNAME', $CFG->dbname); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBUSER', $CFG->dbuser); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBPASS', $CFG->dbpass); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBPREFIX', $CFG->prefix); To make sure the CAS cache is cleared after each unit test, revert back to the db settings for QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE as described above. This will be slow... Other configuration issues Moodle overrides the PHP debug message settings. To see errors and warnings, go to Site administration -> Development -> Debugging and set the Debug messages option. Maxima unit tests Maxima has a unit testing framework called \"rtest\". One complication is that we need to run tests with and without simplification . To help with this, a batch file is provided to run the unit tests. \\moodle\\question\\type\\stack\\stack\\maxima\\unittests_load.mac To run this set up the STACK-maxima-sandbox and load STACK's libraries. Then type load(\"unittests_load.mac\"); The output from these tests is written to .ERR files in \\moodle\\question\\type\\stack\\stack\\maxima\\ . Please note that currently, with simplification false, there are a number of false negative results. That is tests appear to fail, but do not. This is because rtest is not designed to run with simp:false, and so does not correctly decide whether things are really the \"same\" or \"different\". Timing the code. Maxima has a range of functions for code profiling. Put the following at the start of the file. timer(all)$ This adds all user-defined functions to the timer list. To time a single command ev(timer_info(abs_replace), simp); To profile all user-defined commands execute. simp:true$ T:timer_info()$ Find those commands actually called (based on T being the matrix above). S:sublist(rest(args(T)),lambda([a], not(is(third(a)=0)))); Sort by functions called most often. S:sort(S, lambda([a,b],third(a)>third(b))); Sort by the time/call float_time(a):= if a=0 then 0 else first(args(a))$ S:sort(S, lambda([a,b],float_time(second(a))>float_time(second(b)))); Testing ajax specific problems. You need to output values to the file system, as the display can't manage this. For example, file_put_contents(\"/tmp/log.txt\", print_r($result, true)); Testing the updated parser in STACK 4.3 In the STACK directory php cli/casstringtester.php --string=\"0..1\"","title":"Unit tests"},{"location":"en/Developer/Unit_tests/#unit-tests","text":"Unit testing for STACK comes in the following three parts. PHP Unit tests, Maxima unit tests, Test scripts exposed to the question author. These three mechanisms aim to provide comprehensive testing of STACK. The last category are a compromise, and are designed to expose the results of unit tests to question authors in a reasonably attractive manner to inform them of what each answer test is actually supposed to do. Links to these tests are in the healthcheck page. STACK uses the Travis continuous integration mechanism so that all unit tests are triggered when a commit is pushed to GitHub. See https://travis-ci.org/maths/moodle-qtype_stack .","title":"Unit tests"},{"location":"en/Developer/Unit_tests/#php-unit-tests","text":"Moodle uses PHPUnit for its unit tests. Setting this up and getting it working is a bit of a pain, but you only have to follow the instructions in the Moodle PHPUnit documentation once to get it working. NOTE: do not use linux-optimised when running the unit tests. The STACK installation must be set to linux (or win of course).","title":"PHP Unit tests"},{"location":"en/Developer/Unit_tests/#stack-specific-set-up-steps","text":"Once you have executed php admin/tool/phpunit/cli/init.php you need to edit the config.php file to add the following configuration information near the end, but before the require_once(dirname(__FILE__) . '/lib/setup.php'); . Other options for the platform are unix and unix-optimised . define('QTYPE_STACK_TEST_CONFIG_PLATFORM', 'linux'); /* It is essential that the MAXIMAVERSION and MAXIMACOMMAND match. That is, you must check that the command executed here really loads the version specified in MAXIMAVERSION. Some unit tests are version dependent. Do not use default. */ define('QTYPE_STACK_TEST_CONFIG_MAXIMAVERSION', '5.42.0'); define('QTYPE_STACK_TEST_CONFIG_MAXIMACOMMAND', 'maxima --use-version=5.42.0'); define('QTYPE_STACK_TEST_CONFIG_CASTIMEOUT', '1'); define('QTYPE_STACK_TEST_CONFIG_MAXIMALIBRARIES', 'stats, distrib, descriptive, simplex'); define('QTYPE_STACK_TEST_CONFIG_CASDEBUGGING', '0'); define('QTYPE_STACK_TEST_CONFIG_PLOTCOMMAND', ''); define('QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE', 'db'); You should probably copy the settings from Admin -> Plugins -> Question types -> STACK. However, you can use the flexibility to have different configurations of STACK for testing in order to test a new release of Maxima, for example. If you want to run just the unit tests for STACK, you can use the command vendor\\bin\\phpunit --group qtype_stack vendor/bin/phpunit --group qtype_stack To make sure this keeps working, please annotate all test classes with /** * @group qtype_stack */","title":"STACK-specific set-up steps"},{"location":"en/Developer/Unit_tests/#stop-resetting-the-dataroot-directory","text":"In [...]/moodle/lib/phpunit/classes/util.php public static function reset_all_data() { Comment out the line (currently 253). self::reset_dataroot(); This stops the unit tests from deleting the Maxima image files at each step.","title":"Stop resetting the dataroot directory."},{"location":"en/Developer/Unit_tests/#making-the-tests-faster","text":"The tests will be very slow, because the Moodle PHPUnit integration keeps resetting the database state between each test, so you get no benefit from the cache. To get around that problem, you can use the option to connect to a different database server for the cache. Modify the following to suit your system and put this near the end of your config.php file: Note you need to make sure the QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE variable is only defined once. define('QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE', 'otherdb'); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBTYPE', $CFG->dbtype); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBLIBRARY', $CFG->dblibrary); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBHOST', $CFG->dbhost); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBNAME', $CFG->dbname); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBUSER', $CFG->dbuser); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBPASS', $CFG->dbpass); define('QTYPE_STACK_TEST_CONFIG_CASCACHEDBPREFIX', $CFG->prefix); To make sure the CAS cache is cleared after each unit test, revert back to the db settings for QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE as described above. This will be slow...","title":"Making the tests faster"},{"location":"en/Developer/Unit_tests/#other-configuration-issues","text":"Moodle overrides the PHP debug message settings. To see errors and warnings, go to Site administration -> Development -> Debugging and set the Debug messages option.","title":"Other configuration issues"},{"location":"en/Developer/Unit_tests/#maxima-unit-tests","text":"Maxima has a unit testing framework called \"rtest\". One complication is that we need to run tests with and without simplification . To help with this, a batch file is provided to run the unit tests. \\moodle\\question\\type\\stack\\stack\\maxima\\unittests_load.mac To run this set up the STACK-maxima-sandbox and load STACK's libraries. Then type load(\"unittests_load.mac\"); The output from these tests is written to .ERR files in \\moodle\\question\\type\\stack\\stack\\maxima\\ . Please note that currently, with simplification false, there are a number of false negative results. That is tests appear to fail, but do not. This is because rtest is not designed to run with simp:false, and so does not correctly decide whether things are really the \"same\" or \"different\".","title":"Maxima unit tests"},{"location":"en/Developer/Unit_tests/#timing-the-code","text":"Maxima has a range of functions for code profiling. Put the following at the start of the file. timer(all)$ This adds all user-defined functions to the timer list. To time a single command ev(timer_info(abs_replace), simp); To profile all user-defined commands execute. simp:true$ T:timer_info()$ Find those commands actually called (based on T being the matrix above). S:sublist(rest(args(T)),lambda([a], not(is(third(a)=0)))); Sort by functions called most often. S:sort(S, lambda([a,b],third(a)>third(b))); Sort by the time/call float_time(a):= if a=0 then 0 else first(args(a))$ S:sort(S, lambda([a,b],float_time(second(a))>float_time(second(b))));","title":"Timing the code."},{"location":"en/Developer/Unit_tests/#testing-ajax-specific-problems","text":"You need to output values to the file system, as the display can't manage this. For example, file_put_contents(\"/tmp/log.txt\", print_r($result, true));","title":"Testing ajax specific problems."},{"location":"en/Developer/Unit_tests/#testing-the-updated-parser-in-stack-43","text":"In the STACK directory php cli/casstringtester.php --string=\"0..1\"","title":"Testing the updated parser in STACK 4.3"},{"location":"en/Developer/UpgradeDefaults/","text":"Upgrading question defaults A number of default settings have been changed in recent versions of STACK. There is no Moodle-based mechanism to change these settings in all current questions. One user-level way to change all the questions is to export and edit the resulting .xml. For example, the following are useful find/replace pairs. <text>Correct answer, well done.</text> <text><![CDATA[<span style=\"font-size: 1.5em; color:green;\"><i class=\"fa fa-check\"></i></span> Correct answer, well done.]]></text> <text>Your answer is partially correct.</text> <text><![CDATA[<span style=\"font-size: 1.5em; color:orange;\"><i class=\"fa fa-adjust\"></i></span> Your answer is partially correct.]]></text> <text>Incorrect answer.</text> <text><![CDATA[<span style=\"font-size: 1.5em; color:red;\"><i class=\"fa fa-times\"></i></span> Incorrect answer.]]></text> The API/YAML format will make this kind of maintenance much easier.","title":"Upgrading question defaults"},{"location":"en/Developer/UpgradeDefaults/#upgrading-question-defaults","text":"A number of default settings have been changed in recent versions of STACK. There is no Moodle-based mechanism to change these settings in all current questions. One user-level way to change all the questions is to export and edit the resulting .xml. For example, the following are useful find/replace pairs. <text>Correct answer, well done.</text> <text><![CDATA[<span style=\"font-size: 1.5em; color:green;\"><i class=\"fa fa-check\"></i></span> Correct answer, well done.]]></text> <text>Your answer is partially correct.</text> <text><![CDATA[<span style=\"font-size: 1.5em; color:orange;\"><i class=\"fa fa-adjust\"></i></span> Your answer is partially correct.]]></text> <text>Incorrect answer.</text> <text><![CDATA[<span style=\"font-size: 1.5em; color:red;\"><i class=\"fa fa-times\"></i></span> Incorrect answer.]]></text> The API/YAML format will make this kind of maintenance much easier.","title":"Upgrading question defaults"},{"location":"en/Developer/Website/","text":"Updating the Online Docs The STACK documentation is available online on docs.stack-assessment.org . The docs are automatically built whenever this repository is pushed to. This documentation details how to update the styling of the online docs. What is not covered in this document Instructions for updating the main website www.stack-assessment.org . The main website is built in the stack-web repository, and has its own documentation . Framework The website is built using MkDocs , a static site generator which converts STACK documentation, within the /doc directory, into HTML files and pushes them to the gh-pages branch. The website structure mirrors the file structure: the file doc/en/Authoring/Answer_tests.md will be available on docs.stack-assessment.org/en/Authoring/Answer_tests/ . Every sub-folder has an index.md file that will take that folder's name on the website: doc/en/Authoring/index.md will be available on docs.stack-assessment.org/en/Authoring/ . MkDocs is configured in the mkdocs.yml file. MkDocs has a full list of available configuration options . MkDocs can either generate the navigation bar automatically, or accept a custom navigation configuration in the nav variable. The online docs uses the first option. The advantage is that new files are automatically added to the navigation bar when they are added to the repository. The disadvantage is that we cannot tweak the navigation bar manually. The online docs get around this with a number of workarounds. MkDocs cannot display MathJax out-of-the-box, so we use the markdown extension mdx_math , specified in mkdocs.yml , with the variable extra_javascript set to include MathJax. MkDocs can accept a third-party theme, and the main STACK website uses the Material Theme , mainly for its better search display and adaptive structure. The site is hosted by GitHub Pages from the gh-pages branch. A workflow under .github ensures that MkDocs runs its command mkdocs gh-deploy every time the repository is pushed to, which rebuilds the website and pushes the built HTML piles to the gh-pages branch. This overrides all the files currently in the gh-pages branch, so you must never edit files directly in the gh-pages branch . STACK-specific Workarounds The online docs use a number of workarounds to make MkDocs compatible with the STACK docs. Dealing with the structure of the docs MkDocs expects a single folder to contain all the website files, starting with an index.md file that is to be the landing page. However, STACK's docs have a different structure: doc contains the content folder, and the two language folders where the documentation is provided. The landing page is under en/index.md . To work around this, we set doc to be the location of the docs, and use the plugin mkdocs-exclude to unwanted files from the navigation, such as /de and en/Site_map.md . We then use the plugin mkdocs-redirects to redirect the non-existing index.md file to the true landing page en/index.md . The effect of this is that docs.stack-assessment.org will always redirect to docs.stack-assessment.org/en/ . We also update the sidebar navigation, such that it does not show the en directory. This is done by overriding Material's nav-item partial in the site_overrides/partials/ directory. Dealing with the theme The online docs make a number of custom changes to the Material theme. We use the basic MkDocs search algorithm, by including a script in the {% block config %} block under site_overrides/main.html In site_overrides/partials/logo.html we customise how the STACK logo is shown. This is necessary, since the STACK logo is not square. We add a custom footer in the {% block footer %} block under site_overrides/main.html . In here we copy Material's primary and secondary sidebar classes, such that the footer collapses when the sidebar navigation and search bar does. It was necessary to make an identical copy of the md-sidebar--primary class called md-sidebar--primary_footer , to avoid the sidebar breaking when zoomed. Updating the documentation When you change the documentation, the website automatically updates as well. This introduces some new limitations to the sort of elements that can be included in the documentation. This is documented in the Documentation file. Updating the style The online docs uses a custom CSS stylesheet which you can edit. This stylesheet builds upon the stylesheets of MkDocs and Material. You can also edit the theme directly. Any file in the site_overrides folder will override files of the same name in Material's directory . The main.html file is designed to make it easy to override some predetermined blocks , but sometimes it is necessary to override files directly. Notice we directly override some of Material's partials . Testing the website locally Before adding major style changes to the online docs, you are encouraged to test your changes locally. For this, you will need to install MkDocs and all the required extensions. Install MkDocs , including its requirements. Install Bootstrap with pip install mkdocs-bootstrap Install the markdown extension with pip install https://github.com/mitya57/python-markdown-math/archive/master.zip Install the exclude plugin with pip install mkdocs-exclude Install the redirect plugin with pip install mkdocs-redirects You can run a local version of the website with the command mkdocs serve . This will make your local version available on the IP http://127.0.0.1:8000/ . Please test that your changes work on: The following browsers: Chrome, Firefox, Safari, Edge. The following sizes: Computer, tablet, mobile. Chrome's \"inspect\" tool works well for this.","title":"Updating the Online Docs"},{"location":"en/Developer/Website/#updating-the-online-docs","text":"The STACK documentation is available online on docs.stack-assessment.org . The docs are automatically built whenever this repository is pushed to. This documentation details how to update the styling of the online docs.","title":"Updating the Online Docs"},{"location":"en/Developer/Website/#what-is-not-covered-in-this-document","text":"Instructions for updating the main website www.stack-assessment.org . The main website is built in the stack-web repository, and has its own documentation .","title":"What is not covered in this document"},{"location":"en/Developer/Website/#framework","text":"The website is built using MkDocs , a static site generator which converts STACK documentation, within the /doc directory, into HTML files and pushes them to the gh-pages branch. The website structure mirrors the file structure: the file doc/en/Authoring/Answer_tests.md will be available on docs.stack-assessment.org/en/Authoring/Answer_tests/ . Every sub-folder has an index.md file that will take that folder's name on the website: doc/en/Authoring/index.md will be available on docs.stack-assessment.org/en/Authoring/ . MkDocs is configured in the mkdocs.yml file. MkDocs has a full list of available configuration options . MkDocs can either generate the navigation bar automatically, or accept a custom navigation configuration in the nav variable. The online docs uses the first option. The advantage is that new files are automatically added to the navigation bar when they are added to the repository. The disadvantage is that we cannot tweak the navigation bar manually. The online docs get around this with a number of workarounds. MkDocs cannot display MathJax out-of-the-box, so we use the markdown extension mdx_math , specified in mkdocs.yml , with the variable extra_javascript set to include MathJax. MkDocs can accept a third-party theme, and the main STACK website uses the Material Theme , mainly for its better search display and adaptive structure. The site is hosted by GitHub Pages from the gh-pages branch. A workflow under .github ensures that MkDocs runs its command mkdocs gh-deploy every time the repository is pushed to, which rebuilds the website and pushes the built HTML piles to the gh-pages branch. This overrides all the files currently in the gh-pages branch, so you must never edit files directly in the gh-pages branch .","title":"Framework"},{"location":"en/Developer/Website/#stack-specific-workarounds","text":"The online docs use a number of workarounds to make MkDocs compatible with the STACK docs.","title":"STACK-specific Workarounds"},{"location":"en/Developer/Website/#dealing-with-the-structure-of-the-docs","text":"MkDocs expects a single folder to contain all the website files, starting with an index.md file that is to be the landing page. However, STACK's docs have a different structure: doc contains the content folder, and the two language folders where the documentation is provided. The landing page is under en/index.md . To work around this, we set doc to be the location of the docs, and use the plugin mkdocs-exclude to unwanted files from the navigation, such as /de and en/Site_map.md . We then use the plugin mkdocs-redirects to redirect the non-existing index.md file to the true landing page en/index.md . The effect of this is that docs.stack-assessment.org will always redirect to docs.stack-assessment.org/en/ . We also update the sidebar navigation, such that it does not show the en directory. This is done by overriding Material's nav-item partial in the site_overrides/partials/ directory.","title":"Dealing with the structure of the docs"},{"location":"en/Developer/Website/#dealing-with-the-theme","text":"The online docs make a number of custom changes to the Material theme. We use the basic MkDocs search algorithm, by including a script in the {% block config %} block under site_overrides/main.html In site_overrides/partials/logo.html we customise how the STACK logo is shown. This is necessary, since the STACK logo is not square. We add a custom footer in the {% block footer %} block under site_overrides/main.html . In here we copy Material's primary and secondary sidebar classes, such that the footer collapses when the sidebar navigation and search bar does. It was necessary to make an identical copy of the md-sidebar--primary class called md-sidebar--primary_footer , to avoid the sidebar breaking when zoomed.","title":"Dealing with the theme"},{"location":"en/Developer/Website/#updating-the-documentation","text":"When you change the documentation, the website automatically updates as well. This introduces some new limitations to the sort of elements that can be included in the documentation. This is documented in the Documentation file.","title":"Updating the documentation"},{"location":"en/Developer/Website/#updating-the-style","text":"The online docs uses a custom CSS stylesheet which you can edit. This stylesheet builds upon the stylesheets of MkDocs and Material. You can also edit the theme directly. Any file in the site_overrides folder will override files of the same name in Material's directory . The main.html file is designed to make it easy to override some predetermined blocks , but sometimes it is necessary to override files directly. Notice we directly override some of Material's partials .","title":"Updating the style"},{"location":"en/Developer/Website/#testing-the-website-locally","text":"Before adding major style changes to the online docs, you are encouraged to test your changes locally. For this, you will need to install MkDocs and all the required extensions. Install MkDocs , including its requirements. Install Bootstrap with pip install mkdocs-bootstrap Install the markdown extension with pip install https://github.com/mitya57/python-markdown-math/archive/master.zip Install the exclude plugin with pip install mkdocs-exclude Install the redirect plugin with pip install mkdocs-redirects You can run a local version of the website with the command mkdocs serve . This will make your local version available on the IP http://127.0.0.1:8000/ . Please test that your changes work on: The following browsers: Chrome, Firefox, Safari, Edge. The following sizes: Computer, tablet, mobile. Chrome's \"inspect\" tool works well for this.","title":"Testing the website locally"},{"location":"en/Installation/","text":"Installation instructions. STACK is being used live at a number of institutions, including the University of Edinburgh, the UK Open University, Aalto, Loughborough University, and the University of Birmingham in the UK. STACK is designed to be used on a Linux-based server. The Windows/MS option exists to help teachers author questions offline, and for demonstration and development. However, for demonstration, development and offline use we strongly recommend using VirtualBox instead of the Windows port. Note also that support for the optimized Maxima image is not available on Windows platforms, which is a substantial performance improvement. 0. Set up PHP with mbstring STACK v4.3 and later require the mbstring library. While this is included in many distros, it is not yet included by default in all. On an existing Moodle site navigate to /admin/environment.php to confirm before adding this plug-in. On some Linux distros, you simply need to apt-get install php-mbstring and then re-start the web server. 1. Set up Moodle. Please ensure you have installed Moodle . We intend to support STACK within the normal Moodle release cycle . STACK 4.3 has been tested on Moodle 3.5, 3.6, 3.7 and 3.8. STACK is untested on versions before Moodle 3.4. We intend to support all future Moodle releases. If your version of Moodle is not listed here please contact the developers: we probably simply have not done the testing of future versions yet. For longer support of older versions of Moodle please contact us, otherwise will will drop them from our list. Please ensure LaTeX can be displayed. We currently support MathJax through the Moodle MathJax filter. Consider updating the MathJax settings to wrap long equations. In particular, add CommonHTML: { linebreaks: { automatic: true } }, \"HTML-CSS\": { linebreaks: { automatic: true } }, SVG: { linebreaks: { automatic: true } } to filter_mathjaxloader | mathjaxconfig in the filter settings: Dashboard > Site administration > Plugins > Filters > MathJax 2. Install gnuplot and Maxima Ensure gcc, gnuplot and Maxima are installed on your server. Currently Maxima 5.38.1 to 5.42.2 are supported. Please contact the developers to request support for other versions. We currently recommend that you use Maxima 5.38.1. Please note Please avoid versions 5.37.x which are known to have a minor bug which affects STACK. In particular with simp:false , s^{-1} is transformed into 1/s . This apparently minor change makes it impossible to distinguish between the two forms. This causes all sorts of problems. Do not use Maxim 5.37.1 to 5.37.3. Older versions of Maxima: in particular, Maxima 5.23.2 has some differences which result in 1/\\sqrt{x} \\neq \\sqrt{1/x} , and similar problems. This means that we have an inconsistency between questions between versions of maxima. Of course, we can argue about which values of x make 1/\\sqrt{x} = \\sqrt{1/x} , but currently the unit tests and assumption is that these expressions should be considered to be algebraically equivalent! So, older versions of Maxima are not supported for a reason. Please test thoroughly if you try to use an older version, and expect some errors in the mathematical parts of the code. If you install more than one version of Maxima then you will need to tell STACK which version to use. Otherwise just use the \"default\" option. The documentation on Installing Maxima includes code for compiling Maxima from source. Maxima can also be downloaded as a self-contained installer program for Windows, RPMs for Linux or as source for all platforms. Instructions for installing a more recent version of Maxima on CentOS 6 are available on the Moodle forum (Oct 2014). 3. Add some additional question behaviours STACK requires these. Obtain Deferred feedback with explicit validation behaviour code. You can download the zip file , unzip it, and place it in the directory moodle/question/behaviour/dfexplicitvaildate . (You will need to rename the directory moodle-qbehaviour_dfexplicitvaildate -> dfexplicitvaildate .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qbehaviour_dfexplicitvaildate.git question/behaviour/dfexplicitvaildate Obtain Deferred feedback with CBM and explicit validation behaviour code. You can download the zip file , unzip it, and place it in the directory moodle/question/behaviour/dfcbmexplicitvaildate . (You will need to rename the directory moodle-qbehaviour_dfcbmexplicitvaildate -> dfcbmexplicitvaildate .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qbehaviour_dfcbmexplicitvaildate.git question/behaviour/dfcbmexplicitvaildate Obtain adaptivemutlipart behaviour code. You can download the zip file , unzip it, and place it in the directory moodle/question/behaviour/adaptivemultipart . (You will need to rename the directory moodle-qbehaviour_adaptivemultipart -> adaptivemultipart .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qbehaviour_adaptivemultipart.git question/behaviour/adaptivemultipart Login to Moodle as the admin user and click on Notifications in the Site Administration panel. 4. Add the STACK question type STACK is a question type for the Moodle quiz. Obtain the code. You can download the zip file , unzip it, and place it in the directory moodle/question/type/stack . (You will need to rename the directory moodle-qtype_stack -> stack .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qtype_stack.git question/type/stack Login to Moodle as the admin user and click on Notifications in the Site Administration panel. As the admin user, navigate to Home > Site administration > Plugins > Question types > STACK . Please choose and save the appropriate options. On the same page, click on the link to the healthcheck script. This writes local configuration files and then helps you verify that all aspects of STACK are working properly. You must be able to connect to the CAS, and for the CAS to successfully create plots, before you can use STACK. You might want to try optimising Maxima access times. You should now have a question type available to the Moodle quiz. 5. Post-install confirmation. It is essential to confirm that the PHP scripts are connecting to the CAS. We have special scripts which provide confirmation and trouble-shooting data to test the installation . 6. Optional (but recommended): Fix DB case sensitivity issue. Using a database with a case insensitive collation can cause issues; for example MySQL with utf8mb4_unicode_ci. This is a general problem of Moodle, not specific to this plugin. See Database collation issue . If your DB uses case insensitive collations you must change them to case sensitive ones for the following columns: qtype_stacks_inputs -> name Example command for MySQL 8.0: ALTER TABLE mdl_qtype_stack_inputs CHANGE name name VARCHAR(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT ''; STACK will work without this fix, but input names will not be case sensitive (!) as far as Moodle's database is concerned. This will throw errors for some questions. Migration from STACK 3.X to STACK 4.0 STACK 4.0 has one important change in the question authoring. CAS text now uses {@...@} in include mathematics in the text. The change from @...@ to {@...@} gives us matching parentheses to parse, which is much better. The {..} will not break LaTeX. You will need to update all your existing questions which include CAS calculations. This includes all fields, e.g. in the feedback as well. To help with this process we have an automatic conversion script. As an admin user navigate to Site administration -> Plugins -> Question Types -> STACK Then choose the link \"The fix maths delimiters script\". If you have any difficulties with this process please contact the developers. Migration from STACK 2.X to STACK 3.0 If you wish to import STACK 2 questions into STACK 3 you will need to install the STACK question format separately. This is distributed as qformat_stack . It provides a different question format for the Moodle quiz importer. Obtain the code. You can download the zip file , unzip it, and place it in the directory moodle/question/format/stack . (You will need to rename the directory moodle-qformat_stack -> stack .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qformat_stack.git question/format/stack Login to Moodle as the admin user and click on Notifications in the Site Administration panel. There have been a number of changes between STACK 2 and STACK 3. This feature has not been tested since STACK 4.0. If you need to use this please contact the developers. Also, see the notes on the importer before using it.","title":"Installation instructions."},{"location":"en/Installation/#installation-instructions","text":"STACK is being used live at a number of institutions, including the University of Edinburgh, the UK Open University, Aalto, Loughborough University, and the University of Birmingham in the UK. STACK is designed to be used on a Linux-based server. The Windows/MS option exists to help teachers author questions offline, and for demonstration and development. However, for demonstration, development and offline use we strongly recommend using VirtualBox instead of the Windows port. Note also that support for the optimized Maxima image is not available on Windows platforms, which is a substantial performance improvement.","title":"Installation instructions."},{"location":"en/Installation/#0-set-up-php-with-mbstring","text":"STACK v4.3 and later require the mbstring library. While this is included in many distros, it is not yet included by default in all. On an existing Moodle site navigate to /admin/environment.php to confirm before adding this plug-in. On some Linux distros, you simply need to apt-get install php-mbstring and then re-start the web server.","title":"0. Set up PHP with mbstring"},{"location":"en/Installation/#1-set-up-moodle","text":"Please ensure you have installed Moodle . We intend to support STACK within the normal Moodle release cycle . STACK 4.3 has been tested on Moodle 3.5, 3.6, 3.7 and 3.8. STACK is untested on versions before Moodle 3.4. We intend to support all future Moodle releases. If your version of Moodle is not listed here please contact the developers: we probably simply have not done the testing of future versions yet. For longer support of older versions of Moodle please contact us, otherwise will will drop them from our list. Please ensure LaTeX can be displayed. We currently support MathJax through the Moodle MathJax filter. Consider updating the MathJax settings to wrap long equations. In particular, add CommonHTML: { linebreaks: { automatic: true } }, \"HTML-CSS\": { linebreaks: { automatic: true } }, SVG: { linebreaks: { automatic: true } } to filter_mathjaxloader | mathjaxconfig in the filter settings: Dashboard > Site administration > Plugins > Filters > MathJax","title":"1. Set up Moodle."},{"location":"en/Installation/#2-install-gnuplot-and-maxima","text":"Ensure gcc, gnuplot and Maxima are installed on your server. Currently Maxima 5.38.1 to 5.42.2 are supported. Please contact the developers to request support for other versions. We currently recommend that you use Maxima 5.38.1. Please note Please avoid versions 5.37.x which are known to have a minor bug which affects STACK. In particular with simp:false , s^{-1} is transformed into 1/s . This apparently minor change makes it impossible to distinguish between the two forms. This causes all sorts of problems. Do not use Maxim 5.37.1 to 5.37.3. Older versions of Maxima: in particular, Maxima 5.23.2 has some differences which result in 1/\\sqrt{x} \\neq \\sqrt{1/x} , and similar problems. This means that we have an inconsistency between questions between versions of maxima. Of course, we can argue about which values of x make 1/\\sqrt{x} = \\sqrt{1/x} , but currently the unit tests and assumption is that these expressions should be considered to be algebraically equivalent! So, older versions of Maxima are not supported for a reason. Please test thoroughly if you try to use an older version, and expect some errors in the mathematical parts of the code. If you install more than one version of Maxima then you will need to tell STACK which version to use. Otherwise just use the \"default\" option. The documentation on Installing Maxima includes code for compiling Maxima from source. Maxima can also be downloaded as a self-contained installer program for Windows, RPMs for Linux or as source for all platforms. Instructions for installing a more recent version of Maxima on CentOS 6 are available on the Moodle forum (Oct 2014).","title":"2. Install gnuplot and Maxima"},{"location":"en/Installation/#3-add-some-additional-question-behaviours","text":"STACK requires these. Obtain Deferred feedback with explicit validation behaviour code. You can download the zip file , unzip it, and place it in the directory moodle/question/behaviour/dfexplicitvaildate . (You will need to rename the directory moodle-qbehaviour_dfexplicitvaildate -> dfexplicitvaildate .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qbehaviour_dfexplicitvaildate.git question/behaviour/dfexplicitvaildate Obtain Deferred feedback with CBM and explicit validation behaviour code. You can download the zip file , unzip it, and place it in the directory moodle/question/behaviour/dfcbmexplicitvaildate . (You will need to rename the directory moodle-qbehaviour_dfcbmexplicitvaildate -> dfcbmexplicitvaildate .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qbehaviour_dfcbmexplicitvaildate.git question/behaviour/dfcbmexplicitvaildate Obtain adaptivemutlipart behaviour code. You can download the zip file , unzip it, and place it in the directory moodle/question/behaviour/adaptivemultipart . (You will need to rename the directory moodle-qbehaviour_adaptivemultipart -> adaptivemultipart .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qbehaviour_adaptivemultipart.git question/behaviour/adaptivemultipart Login to Moodle as the admin user and click on Notifications in the Site Administration panel.","title":"3. Add some additional question behaviours"},{"location":"en/Installation/#4-add-the-stack-question-type","text":"STACK is a question type for the Moodle quiz. Obtain the code. You can download the zip file , unzip it, and place it in the directory moodle/question/type/stack . (You will need to rename the directory moodle-qtype_stack -> stack .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qtype_stack.git question/type/stack Login to Moodle as the admin user and click on Notifications in the Site Administration panel. As the admin user, navigate to Home > Site administration > Plugins > Question types > STACK . Please choose and save the appropriate options. On the same page, click on the link to the healthcheck script. This writes local configuration files and then helps you verify that all aspects of STACK are working properly. You must be able to connect to the CAS, and for the CAS to successfully create plots, before you can use STACK. You might want to try optimising Maxima access times. You should now have a question type available to the Moodle quiz.","title":"4. Add the STACK question type"},{"location":"en/Installation/#5-post-install-confirmation","text":"It is essential to confirm that the PHP scripts are connecting to the CAS. We have special scripts which provide confirmation and trouble-shooting data to test the installation .","title":"5. Post-install confirmation."},{"location":"en/Installation/#6-optional-but-recommended-fix-db-case-sensitivity-issue","text":"Using a database with a case insensitive collation can cause issues; for example MySQL with utf8mb4_unicode_ci. This is a general problem of Moodle, not specific to this plugin. See Database collation issue . If your DB uses case insensitive collations you must change them to case sensitive ones for the following columns: qtype_stacks_inputs -> name Example command for MySQL 8.0: ALTER TABLE mdl_qtype_stack_inputs CHANGE name name VARCHAR(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT ''; STACK will work without this fix, but input names will not be case sensitive (!) as far as Moodle's database is concerned. This will throw errors for some questions.","title":"6. Optional (but recommended): Fix DB case sensitivity issue."},{"location":"en/Installation/#migration-from-stack-3x-to-stack-40","text":"STACK 4.0 has one important change in the question authoring. CAS text now uses {@...@} in include mathematics in the text. The change from @...@ to {@...@} gives us matching parentheses to parse, which is much better. The {..} will not break LaTeX. You will need to update all your existing questions which include CAS calculations. This includes all fields, e.g. in the feedback as well. To help with this process we have an automatic conversion script. As an admin user navigate to Site administration -> Plugins -> Question Types -> STACK Then choose the link \"The fix maths delimiters script\". If you have any difficulties with this process please contact the developers.","title":"Migration from STACK 3.X to STACK 4.0"},{"location":"en/Installation/#migration-from-stack-2x-to-stack-30","text":"If you wish to import STACK 2 questions into STACK 3 you will need to install the STACK question format separately. This is distributed as qformat_stack . It provides a different question format for the Moodle quiz importer. Obtain the code. You can download the zip file , unzip it, and place it in the directory moodle/question/format/stack . (You will need to rename the directory moodle-qformat_stack -> stack .) Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: git clone https://github.com/maths/moodle-qformat_stack.git question/format/stack Login to Moodle as the admin user and click on Notifications in the Site Administration panel. There have been a number of changes between STACK 2 and STACK 3. This feature has not been tested since STACK 4.0. If you need to use this please contact the developers. Also, see the notes on the importer before using it.","title":"Migration from STACK 2.X to STACK 3.0"},{"location":"en/Installation/LTI/","text":"About LTI Learning Tools Interoperability (LTI) is a web services protocol which allows online learning systems to exchange information and interconnect. It can be used to provide quizzes (containing STACK questions or not) to other learning systems, or to include quizzes within a Moodle system on which STACK is not installed. LTI is entirely separate from STACK, and the details of the protocol are available from the IMS Global website. LTI can be used to provide/consume a wide range of functionality beyond STACK quizzes. Installing LTI There are two sides to LTI: the provider and consumer. If you haven't installed STACK on your server, or use another learning management system, you will need to consume a service with STACK. Moodle has an LTI consumer by default. You don't need to add anything to Moodle to consume LTI. The LTI provider local_ltiprovider is an optional plugin . If you intend to provide STACK questions as an LTI service you will need to install this. Providing STACK quizzes This section describes how to use LTI to provide Moodle quizzes (e.g. containing STACK questions). We assume you have written your quizzes as part of a Moodle course. Setting up a Moodle course as a service for Learn The Moodle LTI provider enables a wide range of possibilities. A single course is provided which contains a number of quizzes. The provided course is (normally) consumed by a single course in Learn. A single grade is provided to Learn. All marks are recorded in the Moodle gradebook separately, and students should be able to access these. Students and teachers follow a single link from Learn. The LTI protocol ensures this connection respects their respective level of permissions. If you would like more than one grade in Learn, then consider having more than one course on Moodle. Students will be able to see their individual grades in Moodle (unless you disable access to the gradebook!), so it is likely to be sufficient for most purposes to return a single grade to Learn. The difficulty with this is the lack of shared question banks. Login to the provider (STACK) directly with Moodle admin privileges and create a course as follows. Site administration -> Courses -> Manage courses and categories. Then choose \"Create new course\". 2. Create the course with appropriate Course full name and Course short name. These should be identical to those on Learn. Course format -> Format -> Topics format Number of sections -> 0 This creates the simplest possible course, with no section breakup. All the quizzes will then appear as a list in this. Other options are, of course, possible. (If you just really want a single quiz, consider the \"Single activity format\"). 3. Delete all unnecessary elements, e.g. News. 4. Add quizzes, etc., as required. This does not need to be complete before the next step, but the course should be non-empty when it is exposed to avoid confusion. 5. Now expose the course using the LTI provider. Course administration -> LTI Provider -> Add Tool to be provided -> Course Layout and CSS -> Hide page header, footer, left, right blocks. Save changes. 6. The \"List of tools provided\" will give the 'Tool name', 'Shared secret' and 'Launch URL'. These will be needed by the LTI consumer. It is possible to expose an individual quiz, but then you need to consume the quiz. It is easier to make one connection at the course level, than many LTI connections at the quiz level. Providing clones of Moodle courses The University of Edinburgh uses a learning management system called \"Learn\". We need to connect Learn up to Moodle to allow a wide variety of courses (on Learn) to use quizzes containing STACK (and other) questions. We want each (Learn) course to have a private area on the Moodle server parallel to the course on Learn. We have developed an enrolement plugin , enrol_lticoursetemplate , which provides an LTI service which enables users to clone a course template from a remote connection, automatically giving each teacher the ability to create a new clean course tied to their consumer content system. This plugin removes the need to set up parallel courses in Moodle by hand. Documention on how to set up this plugin is available.","title":"About LTI"},{"location":"en/Installation/LTI/#about-lti","text":"Learning Tools Interoperability (LTI) is a web services protocol which allows online learning systems to exchange information and interconnect. It can be used to provide quizzes (containing STACK questions or not) to other learning systems, or to include quizzes within a Moodle system on which STACK is not installed. LTI is entirely separate from STACK, and the details of the protocol are available from the IMS Global website. LTI can be used to provide/consume a wide range of functionality beyond STACK quizzes.","title":"About LTI"},{"location":"en/Installation/LTI/#installing-lti","text":"There are two sides to LTI: the provider and consumer. If you haven't installed STACK on your server, or use another learning management system, you will need to consume a service with STACK. Moodle has an LTI consumer by default. You don't need to add anything to Moodle to consume LTI. The LTI provider local_ltiprovider is an optional plugin . If you intend to provide STACK questions as an LTI service you will need to install this.","title":"Installing LTI"},{"location":"en/Installation/LTI/#providing-stack-quizzes","text":"This section describes how to use LTI to provide Moodle quizzes (e.g. containing STACK questions). We assume you have written your quizzes as part of a Moodle course.","title":"Providing STACK quizzes"},{"location":"en/Installation/LTI/#setting-up-a-moodle-course-as-a-service-for-learn","text":"The Moodle LTI provider enables a wide range of possibilities. A single course is provided which contains a number of quizzes. The provided course is (normally) consumed by a single course in Learn. A single grade is provided to Learn. All marks are recorded in the Moodle gradebook separately, and students should be able to access these. Students and teachers follow a single link from Learn. The LTI protocol ensures this connection respects their respective level of permissions. If you would like more than one grade in Learn, then consider having more than one course on Moodle. Students will be able to see their individual grades in Moodle (unless you disable access to the gradebook!), so it is likely to be sufficient for most purposes to return a single grade to Learn. The difficulty with this is the lack of shared question banks. Login to the provider (STACK) directly with Moodle admin privileges and create a course as follows. Site administration -> Courses -> Manage courses and categories. Then choose \"Create new course\". 2. Create the course with appropriate Course full name and Course short name. These should be identical to those on Learn. Course format -> Format -> Topics format Number of sections -> 0 This creates the simplest possible course, with no section breakup. All the quizzes will then appear as a list in this. Other options are, of course, possible. (If you just really want a single quiz, consider the \"Single activity format\"). 3. Delete all unnecessary elements, e.g. News. 4. Add quizzes, etc., as required. This does not need to be complete before the next step, but the course should be non-empty when it is exposed to avoid confusion. 5. Now expose the course using the LTI provider. Course administration -> LTI Provider -> Add Tool to be provided -> Course Layout and CSS -> Hide page header, footer, left, right blocks. Save changes. 6. The \"List of tools provided\" will give the 'Tool name', 'Shared secret' and 'Launch URL'. These will be needed by the LTI consumer. It is possible to expose an individual quiz, but then you need to consume the quiz. It is easier to make one connection at the course level, than many LTI connections at the quiz level.","title":"Setting up a Moodle course as a service for Learn"},{"location":"en/Installation/LTI/#providing-clones-of-moodle-courses","text":"The University of Edinburgh uses a learning management system called \"Learn\". We need to connect Learn up to Moodle to allow a wide variety of courses (on Learn) to use quizzes containing STACK (and other) questions. We want each (Learn) course to have a private area on the Moodle server parallel to the course on Learn. We have developed an enrolement plugin , enrol_lticoursetemplate , which provides an LTI service which enables users to clone a course template from a remote connection, automatically giving each teacher the ability to create a new clean course tied to their consumer content system. This plugin removes the need to set up parallel courses in Moodle by hand. Documention on how to set up this plugin is available.","title":"Providing clones of Moodle courses"},{"location":"en/Installation/Mathjax/","text":"Displaying mathematics for STACK in Moodle STACK generates LaTeX code on the fly and expects to use a Moodle filter to convert this into something the user's browser will display. For Moodle 2.7 or later, MathJax is distributed as a filter. We strongly recommend using the Moodle MathJax filter. One reason for adopting MathJax is that it aids accessibility . Using the MathJax filter These are notes on configuring the MathJax filter options for use with STACK. Do not use \"TeX filter compatibility\" unless you want all equations to appear inline! To add support for actuarial notation you need to add the option 'enclose.js' to the extensions. I.e. within the \"MathJax configuration\" text we need the following. TeX: { extensions: ['enclose.js'] } Accessibility The accessibility features supported by MathJax are given detailed here . Adding MathJax to additional HTML If the MathJax filter is not available then you can include it in the head of every page by adding additional HTML to every page. We don't recommend you do this, but have retained this information in the documentation for completeness. Option 1: install MathJax locally A local installation may be preferable, e.g., if you want your STACK-equipped Moodle to work off-line, or if you want to try to speed up LaTeX rendering. Download MathJax Unpack the archive and rename folder to \"mathjax\". Place the mathjax folder in .../moodle/lib and set appropriate ownership, e.g., chown -R root.root mathjax . Carry out the procedure in Option 1, editing the script above to reflect your path to MathJax. The last line can resemble the following: Option 2: link to external MathJax setup As of August 2017, you can use an external CDN at cdnjs.cloudflare.com . Admin -> Appearance -> Additional HTML -> Within HEAD Put the following script in it and save MathJax.Hub.Config({ MMLorHTML: { prefer: \"HTML\" }, tex2jax: { displayMath: [['\\[', '\\]']], inlineMath: [['\\(', '\\)']], processEscapes: true }, TeX: { extensions: ['enclose.js'], Macros: { pounds: '{\\it\\unicode{xA3}}', euro: '\\unicode{x20AC}' } } }); Please note the following. These settings enable only the strict LaTeX maths environments, and does not support the use of dollars; The processEscapes flag enables you to include a dollar symbol in mathematics environments with \\$ . The line extensions: ['enclose.js'], enables support for actuarial notation . The line Macros: { pounds: '{\\\\it\\\\unicode{xA3}}', euro: '\\\\unicode{x20AC}' } enables support for the UK pounds sign and the Euro symbol in LaTeX using \\pounds and \\euro macros respectively. E.g. \\pounds and \\euro . What about dollar mathematics delimiters? Please note that we strongly discourage the use of dollar symbols for denoting LaTeX mathematics environments such as $...$ and $$...$$ for inline and displayed mathematics respectively. As of STACK 4.0 use of dollars are officially unsupported. The reasons are (1) they do not match, which makes parsing more difficult, and (2) many courses use currency which needs this symbol and protecting it is always problematic. If you have extensive existing materials using these delimiters then we have scripts which will automatically convert them for you. All fields within existing questions can be converted with the automatic scripts available from Home > Site administration > Plugins > Question types > STACK If you have ad-hoc text to convert then the CAS chat script always converts dollars into the forms \\( .... \\) and \\[ .... \\] . You can test and edit the display of text in this window to see the conversion. If you really want to use dollars, MathJax can display them with the code displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']], inlineMath: [['$', '$' ], ['\\\\(', '\\\\)']], Before deciding to support the use of dollars for mathematics on your site, please see the notes on the use of dollars for currency .","title":"Displaying mathematics for STACK in Moodle"},{"location":"en/Installation/Mathjax/#displaying-mathematics-for-stack-in-moodle","text":"STACK generates LaTeX code on the fly and expects to use a Moodle filter to convert this into something the user's browser will display. For Moodle 2.7 or later, MathJax is distributed as a filter. We strongly recommend using the Moodle MathJax filter. One reason for adopting MathJax is that it aids accessibility .","title":"Displaying mathematics for STACK in Moodle"},{"location":"en/Installation/Mathjax/#using-the-mathjax-filter","text":"These are notes on configuring the MathJax filter options for use with STACK. Do not use \"TeX filter compatibility\" unless you want all equations to appear inline! To add support for actuarial notation you need to add the option 'enclose.js' to the extensions. I.e. within the \"MathJax configuration\" text we need the following. TeX: { extensions: ['enclose.js'] }","title":"Using the MathJax filter"},{"location":"en/Installation/Mathjax/#accessibility","text":"The accessibility features supported by MathJax are given detailed here .","title":"Accessibility"},{"location":"en/Installation/Mathjax/#adding-mathjax-to-additional-html","text":"If the MathJax filter is not available then you can include it in the head of every page by adding additional HTML to every page. We don't recommend you do this, but have retained this information in the documentation for completeness.","title":"Adding MathJax to additional HTML"},{"location":"en/Installation/Mathjax/#option-1-install-mathjax-locally","text":"A local installation may be preferable, e.g., if you want your STACK-equipped Moodle to work off-line, or if you want to try to speed up LaTeX rendering. Download MathJax Unpack the archive and rename folder to \"mathjax\". Place the mathjax folder in .../moodle/lib and set appropriate ownership, e.g., chown -R root.root mathjax . Carry out the procedure in Option 1, editing the script above to reflect your path to MathJax. The last line can resemble the following:","title":"Option 1: install MathJax locally"},{"location":"en/Installation/Mathjax/#option-2-link-to-external-mathjax-setup","text":"As of August 2017, you can use an external CDN at cdnjs.cloudflare.com . Admin -> Appearance -> Additional HTML -> Within HEAD Put the following script in it and save MathJax.Hub.Config({ MMLorHTML: { prefer: \"HTML\" }, tex2jax: { displayMath: [['\\[', '\\]']], inlineMath: [['\\(', '\\)']], processEscapes: true }, TeX: { extensions: ['enclose.js'], Macros: { pounds: '{\\it\\unicode{xA3}}', euro: '\\unicode{x20AC}' } } }); Please note the following. These settings enable only the strict LaTeX maths environments, and does not support the use of dollars; The processEscapes flag enables you to include a dollar symbol in mathematics environments with \\$ . The line extensions: ['enclose.js'], enables support for actuarial notation . The line Macros: { pounds: '{\\\\it\\\\unicode{xA3}}', euro: '\\\\unicode{x20AC}' } enables support for the UK pounds sign and the Euro symbol in LaTeX using \\pounds and \\euro macros respectively. E.g. \\pounds and \\euro .","title":"Option 2: link to external MathJax setup"},{"location":"en/Installation/Mathjax/#delimiters","text":"Please note that we strongly discourage the use of dollar symbols for denoting LaTeX mathematics environments such as $...$ and $$...$$ for inline and displayed mathematics respectively. As of STACK 4.0 use of dollars are officially unsupported. The reasons are (1) they do not match, which makes parsing more difficult, and (2) many courses use currency which needs this symbol and protecting it is always problematic. If you have extensive existing materials using these delimiters then we have scripts which will automatically convert them for you. All fields within existing questions can be converted with the automatic scripts available from Home > Site administration > Plugins > Question types > STACK If you have ad-hoc text to convert then the CAS chat script always converts dollars into the forms \\( .... \\) and \\[ .... \\] . You can test and edit the display of text in this window to see the conversion. If you really want to use dollars, MathJax can display them with the code displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']], inlineMath: [['$', '$' ], ['\\\\(', '\\\\)']], Before deciding to support the use of dollars for mathematics on your site, please see the notes on the use of dollars for currency .","title":"What about dollar mathematics delimiters?"},{"location":"en/Installation/Maxima/","text":"Compiling Maxima from source. You are strongly advised to read the installation instructions for the various components you need! As of 21st Dec 2015 the following has been used to compile Maxima from source. You will need the following, and GNU autotools sudo apt-get install texinfo Download and compile SBCL (Lisp) cd /home/sangwinc/src wget http://downloads.sourceforge.net/project/sbcl/sbcl/1.3.1/sbcl-1.3.1-source.tar.bz2 tar -xf sbcl-1.3.1-source.tar.bz2 cd sbcl-1.3.1/ ./make-config.sh ./make.sh sudo ./install.sh Download and compile Maxima cd /home/sangwinc/src wget http://kent.dl.sourceforge.net/project/maxima/Maxima-source/5.36.1-source/maxima-5.36.1.tar.gz tar -zxf maxima-5.36.1.tar.gz cd maxima-5.36.1/ ./configure --with-sbcl make sudo make install","title":"Compiling Maxima from source."},{"location":"en/Installation/Maxima/#compiling-maxima-from-source","text":"You are strongly advised to read the installation instructions for the various components you need! As of 21st Dec 2015 the following has been used to compile Maxima from source.","title":"Compiling Maxima from source."},{"location":"en/Installation/Maxima/#you-will-need-the-following-and-gnu-autotools","text":"sudo apt-get install texinfo","title":"You will need the following, and GNU autotools"},{"location":"en/Installation/Maxima/#download-and-compile-sbcl-lisp","text":"cd /home/sangwinc/src wget http://downloads.sourceforge.net/project/sbcl/sbcl/1.3.1/sbcl-1.3.1-source.tar.bz2 tar -xf sbcl-1.3.1-source.tar.bz2 cd sbcl-1.3.1/ ./make-config.sh ./make.sh sudo ./install.sh","title":"Download and compile SBCL (Lisp)"},{"location":"en/Installation/Maxima/#download-and-compile-maxima","text":"cd /home/sangwinc/src wget http://kent.dl.sourceforge.net/project/maxima/Maxima-source/5.36.1-source/maxima-5.36.1.tar.gz tar -zxf maxima-5.36.1.tar.gz cd maxima-5.36.1/ ./configure --with-sbcl make sudo make install","title":"Download and compile Maxima"},{"location":"en/Installation/Testing_installation/","text":"Testing Installation It is important to confirm that STACK has been installed correctly, and that it is connecting to the CAS. Multi-language support STACK questions can be localised into multiple languages . Your site administrator must enable the Moodle multi-language content filter . The multi-language content filter must be applied before the MathJax filter, otherwise strange results will occur. STACK configuration page STACK provides a number of options. To set these you must login as the Moodle site Administrator. Navigate to Site administration -> Plugins -> Question Types -> STACK Healthcheck script To confirm if the PHP scripts are connecting to Maxima navigate to the STACK configuration page . Choose the link to the healthcheck script. The CAS-debug option in the STACK settings will provide a very verbose output which is indispensable at this stage. Turn this off for production servers, as it is wasteful of storage, particularly when caching results. The healthcheck script checks the following. Check LaTeX is being converted correctly? Check MathJax or another LaTeX converter. Can PHP call external applications? No, then change PHP settings. Can PHP call Maxima? No, then see below. Graph plotting. Are auto-generated plots being created correctly? There should be two different graphs. If not, check the gnuplot settings, and directory permissions. If PHP does not connect to Maxima then this checklist might help. Maxima version. If you have installed more than one version of Maxima on your machine you will probably need to choose one explicitly. If you get the following error loadfile: failed to load /usr/share/maxima/5.32.1/share/draw/draw.lisp then remove the optional libraries from Load optional Maxima libraries: . Set this to blank and re-try the healthcheck. Maxima optional packages Maxima has a wide range of optional libraries. Which are loaded on your server is set with the option qtype_stack | maximalibraries from the STACK question type settings page. Currently the default setting is to load the following optional Maxima packages whenever Maxima is used. stats, distrib, descriptive We need to support STACK in a wide range of situations. In production environments system admins have asked us to check packages do not write files to the server, or have other server-side effects. E.g. the plot2d command executes a gnuplot process on the server for example. For this reason only some optional packages can be loaded into STACK. Currently the only supported packages are stats, distrib, descriptive If you wish to subvert this process you will need to alter the source code of STACK. If you have authority on your server to modify the source code you already have some level of responsibility and trust on the server! In the file /stack/cas/installhelper.class.php , there is a static class $maximalibraries which contains the list of permitted libraries. Caching CAS output By default, the interactions with the CAS are cached. You can connect freshly to the CAS each time, which is useful for debugging, and this option is available on the STACK configuration page. To clear the cache, click the button on the bottom of the healthcheck script. Optimizing Maxima Maxima is the rate-determining step in performance to STACK. Once you have the STACK question type working with a direct connection to the CAS, then you should consider optimizing the performance of Maxima. See the page dedicated to optimizing Maxima CAS Chat At any stage you can evaluate a fragment of CASText by using the CASChat script. There is a link from the STACK configuration page. Testing your questions when you upgrade Whenever you upgrade to a new version of the STACK plugin, it is a really good idea to run all of the question tests to be sure that the behaviour of STACK has not changed in a way that breaks any of your questions. To do this, go to Site administration -> Plugins -> Question types -> STACK and follow the \"run the question tests in bulk script\" link. It is even possible, with a bit of hacking, to execute the question tests from one Moodle site on a different Moodle site . For example you may be evaluating the latest release of STACK on a test server, and you would like to know if the upgrade will break any of your existing questions. (And you don't want to do a lot of exporting and importing.)","title":"Testing Installation"},{"location":"en/Installation/Testing_installation/#testing-installation","text":"It is important to confirm that STACK has been installed correctly, and that it is connecting to the CAS.","title":"Testing Installation"},{"location":"en/Installation/Testing_installation/#multi-language-support","text":"STACK questions can be localised into multiple languages . Your site administrator must enable the Moodle multi-language content filter . The multi-language content filter must be applied before the MathJax filter, otherwise strange results will occur.","title":"Multi-language support"},{"location":"en/Installation/Testing_installation/#stack-configuration-page","text":"STACK provides a number of options. To set these you must login as the Moodle site Administrator. Navigate to Site administration -> Plugins -> Question Types -> STACK","title":"STACK configuration page"},{"location":"en/Installation/Testing_installation/#healthcheck-script","text":"To confirm if the PHP scripts are connecting to Maxima navigate to the STACK configuration page . Choose the link to the healthcheck script. The CAS-debug option in the STACK settings will provide a very verbose output which is indispensable at this stage. Turn this off for production servers, as it is wasteful of storage, particularly when caching results. The healthcheck script checks the following. Check LaTeX is being converted correctly? Check MathJax or another LaTeX converter. Can PHP call external applications? No, then change PHP settings. Can PHP call Maxima? No, then see below. Graph plotting. Are auto-generated plots being created correctly? There should be two different graphs. If not, check the gnuplot settings, and directory permissions. If PHP does not connect to Maxima then this checklist might help. Maxima version. If you have installed more than one version of Maxima on your machine you will probably need to choose one explicitly. If you get the following error loadfile: failed to load /usr/share/maxima/5.32.1/share/draw/draw.lisp then remove the optional libraries from Load optional Maxima libraries: . Set this to blank and re-try the healthcheck.","title":"Healthcheck script"},{"location":"en/Installation/Testing_installation/#maxima-optional-packages","text":"Maxima has a wide range of optional libraries. Which are loaded on your server is set with the option qtype_stack | maximalibraries from the STACK question type settings page. Currently the default setting is to load the following optional Maxima packages whenever Maxima is used. stats, distrib, descriptive We need to support STACK in a wide range of situations. In production environments system admins have asked us to check packages do not write files to the server, or have other server-side effects. E.g. the plot2d command executes a gnuplot process on the server for example. For this reason only some optional packages can be loaded into STACK. Currently the only supported packages are stats, distrib, descriptive If you wish to subvert this process you will need to alter the source code of STACK. If you have authority on your server to modify the source code you already have some level of responsibility and trust on the server! In the file /stack/cas/installhelper.class.php , there is a static class $maximalibraries which contains the list of permitted libraries.","title":"Maxima optional packages"},{"location":"en/Installation/Testing_installation/#caching-cas-output","text":"By default, the interactions with the CAS are cached. You can connect freshly to the CAS each time, which is useful for debugging, and this option is available on the STACK configuration page. To clear the cache, click the button on the bottom of the healthcheck script.","title":"Caching CAS output"},{"location":"en/Installation/Testing_installation/#optimizing-maxima","text":"Maxima is the rate-determining step in performance to STACK. Once you have the STACK question type working with a direct connection to the CAS, then you should consider optimizing the performance of Maxima. See the page dedicated to optimizing Maxima","title":"Optimizing Maxima"},{"location":"en/Installation/Testing_installation/#cas-chat","text":"At any stage you can evaluate a fragment of CASText by using the CASChat script. There is a link from the STACK configuration page.","title":"CAS Chat"},{"location":"en/Installation/Testing_installation/#testing-your-questions-when-you-upgrade","text":"Whenever you upgrade to a new version of the STACK plugin, it is a really good idea to run all of the question tests to be sure that the behaviour of STACK has not changed in a way that breaks any of your questions. To do this, go to Site administration -> Plugins -> Question types -> STACK and follow the \"run the question tests in bulk script\" link. It is even possible, with a bit of hacking, to execute the question tests from one Moodle site on a different Moodle site . For example you may be evaluating the latest release of STACK on a test server, and you would like to know if the upgrade will break any of your existing questions. (And you don't want to do a lot of exporting and importing.)","title":"Testing your questions when you upgrade"},{"location":"en/Students/","text":"Information for students STACK is software for setting and automatically marking mathematical questions as part of a Moodle quiz. You are normally expected to type in your answer using a simple linear syntax, details of which are given on the Answer input page. Then you submit your answer and it is assessed . STACK establishes that your answer is valid . Next it decides if you are correct , and assigns feedback . Multiple attempts at a question are usually encouraged. You will often be given randomly generated questions, so you may be able to practice similar questions. You can also read about accessibility features and how to use the equivalence reasoning input. There is also page for frequently asked questions, FAQ .","title":"Information for students"},{"location":"en/Students/#information-for-students","text":"STACK is software for setting and automatically marking mathematical questions as part of a Moodle quiz. You are normally expected to type in your answer using a simple linear syntax, details of which are given on the Answer input page. Then you submit your answer and it is assessed . STACK establishes that your answer is valid . Next it decides if you are correct , and assigns feedback . Multiple attempts at a question are usually encouraged. You will often be given randomly generated questions, so you may be able to practice similar questions. You can also read about accessibility features and how to use the equivalence reasoning input. There is also page for frequently asked questions, FAQ .","title":"Information for students"},{"location":"en/Students/Accessibility/","text":"Accessibility How do I make the fonts bigger? Warning: do not change the size of the font while taking a quiz. Navigate away from the quiz page first. Sometimes the browser will \"reload\" the page when you change the font size, and this may cause your work to be submitted or lost! The fonts which STACK uses should be able to scale. Use the normal options on the browser to change the sizes of the fonts. This changes all the fonts on the page, including the mathematics. Other accessibility features As part of Moodle, we are able to take advantage of the work done by that community, detailed here . The preferred route to displaying mathematics in STACK is to use MathJax. Details of what accessibility features this support are given here . STACK itself uses very simple CSS and HTML form fields, which present very low barriers to accessibility software.","title":"Accessibility"},{"location":"en/Students/Accessibility/#accessibility","text":"","title":"Accessibility"},{"location":"en/Students/Accessibility/#how-do-i-make-the-fonts-bigger","text":"Warning: do not change the size of the font while taking a quiz. Navigate away from the quiz page first. Sometimes the browser will \"reload\" the page when you change the font size, and this may cause your work to be submitted or lost! The fonts which STACK uses should be able to scale. Use the normal options on the browser to change the sizes of the fonts. This changes all the fonts on the page, including the mathematics.","title":"How do I make the fonts bigger?"},{"location":"en/Students/Accessibility/#other-accessibility-features","text":"As part of Moodle, we are able to take advantage of the work done by that community, detailed here . The preferred route to displaying mathematics in STACK is to use MathJax. Details of what accessibility features this support are given here . STACK itself uses very simple CSS and HTML form fields, which present very low barriers to accessibility software.","title":"Other accessibility features"},{"location":"en/Students/Answer_assessment/","text":"Answer assessment How are my answers assessed? A STACK question may have one or more parts . Each part may have one or more inputs , such as typing in a mathematical expression as your answer. An individual mathematical expression you type might be used in more than one part. This sounds complicated, but since there are many possibilities it is difficult to make general statements. The question should be clear. If not, please ask your teacher. If you need to answer a part but have not then you will be told to do so. You should normally answer all the parts! Your answers are assessed in a two-stage process. Your answer must be valid . Once all answers relevant to a part are valid the mathematical properties will be established. What properties are required depends on the question being asked! Sometimes these processes are done in one step, sometimes you will need to submit a page twice. Therefore you should answer parts of a question and press check to validate your answer. If all parts are valid, then you should press check again to ask for your answer to be assessed. You may change your answer. Just press check to validate and then check again to assess. The system keeps track of any changes you make. You will never lose marks for making a syntax error, e.g. missing a closing bracket. However, you may type in a valid expression which is not what you meant and which is wrong. You need to learn how to express yourself using an unambiguous syntax. This is simple and comes to most students easily with practice. If you make a mathematical mistake you should try to do the question again! If you have asked for a worked solution then you may not change any of your answers. Mathematical expressions are normally entered using a typed linear syntax. For more details, see input . Repeated attempts STACK encourages repeated attempts if you do not get the correct answer first time. Normally, a small percentage (e.g. 10%) of the marks available for the question are deducted for each valid but incorrect attempt. However, your final mark will be the maximum mark you achieve over all attempts. You are never worse off trying a partially correct question again. Why is my answer invalid? Only when all the interaction elements for a question part are valid do we consider assessing your answer to the question. The validation process is designed to help you express your mathematics in the correct form and in an unambiguous way. On paper we might \"know what you meant\" but with the computer you have to \"say what you mean\". You do not lose marks if one of your interaction elements is invalid so do not be afraid of typing in your answer. Feedback is always provided. There are a number of reasons why your answer could be considered to be invalid. You may have a syntax error in your answer, such as mismatched brackets. Variables in your answers should be single letters only. The range of Maxima functions you are permitted to type in is limited to mathematical ones, not programming, plotting, and so on. Sometimes the teacher may insist your answer is of the correct type. There are lots of types of mathematical objects, such as equations: 3*x=x^2-1 . These need an equals sign! inequalities: x<=1 . sets: {1,2,3} . Sets must be in curly brackets. lists: [1,1,2,3] . List must be in square brackets. matrices. matrix([1,2],[3,3]) . Think about the form your answer should have before you type it in. Sometimes the teacher may not let you type in certain strings for educational reasons. Sometimes the teacher may not permit you to use floating point numbers, e.g. 0.33 . In this case you should give an exact answer as, e.g. a fraction: 1/2 or a surd: sqrt(2) . Some expressions make no mathematical sense at all, e.g. one divided by zero. These are also invalid. What are mathematical properties ? When your answers are all valid you submit them again. This time they are assessed. The outcomes are a mark, and sometimes some written feedback. If you did not obtain full marks then you should try the question again. Assessing your answer is not often a simple case of correct or incorrect . Often we might want your answer to satisfy a number of different mathematical properties. For example: If your expression algebraically equivalent to the correct expression? Is your expression fully simplified (e.g. have you gathered all like terms or factored your expression)? does your expression satisfy the equation ? Is every element of your set a solution? Does your set of solutions contain them all? Answering the question is all about thinking about what properties your answer should have! If you are unsure then you need to ask the teacher.","title":"Answer assessment"},{"location":"en/Students/Answer_assessment/#answer-assessment","text":"","title":"Answer assessment"},{"location":"en/Students/Answer_assessment/#how-are-my-answers-assessed","text":"A STACK question may have one or more parts . Each part may have one or more inputs , such as typing in a mathematical expression as your answer. An individual mathematical expression you type might be used in more than one part. This sounds complicated, but since there are many possibilities it is difficult to make general statements. The question should be clear. If not, please ask your teacher. If you need to answer a part but have not then you will be told to do so. You should normally answer all the parts! Your answers are assessed in a two-stage process. Your answer must be valid . Once all answers relevant to a part are valid the mathematical properties will be established. What properties are required depends on the question being asked! Sometimes these processes are done in one step, sometimes you will need to submit a page twice. Therefore you should answer parts of a question and press check to validate your answer. If all parts are valid, then you should press check again to ask for your answer to be assessed. You may change your answer. Just press check to validate and then check again to assess. The system keeps track of any changes you make. You will never lose marks for making a syntax error, e.g. missing a closing bracket. However, you may type in a valid expression which is not what you meant and which is wrong. You need to learn how to express yourself using an unambiguous syntax. This is simple and comes to most students easily with practice. If you make a mathematical mistake you should try to do the question again! If you have asked for a worked solution then you may not change any of your answers. Mathematical expressions are normally entered using a typed linear syntax. For more details, see input .","title":"How are my answers assessed?"},{"location":"en/Students/Answer_assessment/#repeated-attempts","text":"STACK encourages repeated attempts if you do not get the correct answer first time. Normally, a small percentage (e.g. 10%) of the marks available for the question are deducted for each valid but incorrect attempt. However, your final mark will be the maximum mark you achieve over all attempts. You are never worse off trying a partially correct question again.","title":"Repeated attempts"},{"location":"en/Students/Answer_assessment/#why-is-my-answer-invalid","text":"Only when all the interaction elements for a question part are valid do we consider assessing your answer to the question. The validation process is designed to help you express your mathematics in the correct form and in an unambiguous way. On paper we might \"know what you meant\" but with the computer you have to \"say what you mean\". You do not lose marks if one of your interaction elements is invalid so do not be afraid of typing in your answer. Feedback is always provided. There are a number of reasons why your answer could be considered to be invalid. You may have a syntax error in your answer, such as mismatched brackets. Variables in your answers should be single letters only. The range of Maxima functions you are permitted to type in is limited to mathematical ones, not programming, plotting, and so on. Sometimes the teacher may insist your answer is of the correct type. There are lots of types of mathematical objects, such as equations: 3*x=x^2-1 . These need an equals sign! inequalities: x<=1 . sets: {1,2,3} . Sets must be in curly brackets. lists: [1,1,2,3] . List must be in square brackets. matrices. matrix([1,2],[3,3]) . Think about the form your answer should have before you type it in. Sometimes the teacher may not let you type in certain strings for educational reasons. Sometimes the teacher may not permit you to use floating point numbers, e.g. 0.33 . In this case you should give an exact answer as, e.g. a fraction: 1/2 or a surd: sqrt(2) . Some expressions make no mathematical sense at all, e.g. one divided by zero. These are also invalid.","title":"Why is my answer invalid?"},{"location":"en/Students/Answer_assessment/#what-are-mathematical-properties","text":"When your answers are all valid you submit them again. This time they are assessed. The outcomes are a mark, and sometimes some written feedback. If you did not obtain full marks then you should try the question again. Assessing your answer is not often a simple case of correct or incorrect . Often we might want your answer to satisfy a number of different mathematical properties. For example: If your expression algebraically equivalent to the correct expression? Is your expression fully simplified (e.g. have you gathered all like terms or factored your expression)? does your expression satisfy the equation ? Is every element of your set a solution? Does your set of solutions contain them all? Answering the question is all about thinking about what properties your answer should have! If you are unsure then you need to ask the teacher.","title":"What are mathematical properties?"},{"location":"en/Students/Answer_input/","text":"Answer input In STACK you often need to enter an answer which is an algebraic expression. You should type in your answers using the same syntax as that used in the symbolic mathematics package Maxima. The syntax is broadly similar to the syntax used for mathematical formulae in graphical calculators; general programming languages such as Java, C and Basic; and in spreadsheet programs. You will find it useful to master it. For example, to enter e^{-t}\\sin(3t) you need to type in e^(-t)*sin(3*t) STACK tries quite hard to give helpful information about any syntax errors. It might also forgive some errors you make. Basic Notation Numbers You should type in numbers without spaces, and use fractions rather than decimals where possible. For example, 1/4 should be entered as 1/4 , not as 0.25 . Also, \\pi is entered as either pi or %pi , e , the base of the natural logarithms, is entered as either e or %e , i is entered as either i or %i . i is also sometimes entered as j if you are an engineer. If in doubt ask your teacher. You could also use sqrt(-1) , or (-1)^(1/2) , being careful with the brackets. STACK modifies Maxima's normal input rules so that you don't get caught out with a variable i when you meant %i . You can also use scientific notation for large numbers, e.g. 1000 can be entered as 1E+3 . Note, however, that in many situations floating point numbers are forbidden. Multiplication Use a star for multiplication. Forgetting this is by far the most common source of syntax errors. For example, 3x should be entered as 3*x . x(ax+1)(x-1) should be entered as x*(a*x+1)*(x-1) . STACK does sometimes try to insert stars for you where there is no ambiguity, 2x or (x+1)(x-1) . This guessing cannot be perfect since traditional mathematical notation is sometimes ambiguous! Compare f(x+1) and x(t+1) . Powers Use a caret (^) for raising something to a power: for example, x^2 should be entered as x^2 . You can get a caret by holding down the SHIFT key and pressing the 6 key on most keyboards. Negative or fractional powers need brackets: x^{-2} should be entered as x^(-2) . x^{1/3} should be entered as x^(1/3) . The function root(x,n) can be used for x^(1/n) . If you omit the second argument you get root(x)=sqrt(x) . Brackets Brackets are important to group terms in an expression. This is particularly the case in STACK since we use a one-dimensional input rather than traditional written mathematics. Try to consciously develop a sense of when you need brackets and avoid putting in too many. For example, \\frac{a+b}{c+d} should be entered as (a+b)/(c+d) . If you type a+b/(c+d) , then STACK will think that you mean a+\\frac{b}{c+d}. If you type (a+b)/c+d , then STACK will think that you mean \\frac{a+b}{c}+d. If you type a+b/c+d , then STACK will think that you mean a+\\frac{b}{c}+d. Think carefully about the expression a/b/c . What do you think this means? There are two options \\frac{a}{b}\\cdot\\frac{1}{c} = \\frac{a}{bc}\\quad\\mbox{or}\\quad\\frac{a}{\\frac{b}{c}}=\\frac{ac}{b}. Maxima interprets this as \\frac{a}{bc} . If in doubt use brackets. Note that in this context you should always use ordinary round bracket (like (a+b)), not square or curly ones (like [a+b] or {a+b}). {a+b} means a set, [a+b] means a list. Scientific units You may be asked to answer a question in which the answer has units. E.g. 9.81\\mbox{m}\\mbox{s}^{-2} . To enter units you must use multiplication, so this is entered as either 9.81*m/s^2 or 9.81*m*s^(-2) . Don't use a space, or another symbol such as + . Subscripts Use the underscore character to denote a subscript. For example, a_b should be entered as a_b . More examples 2^{a+b} should be entered as 2^(a+b) 2 \\cos 3x should be entered as 2*cos(3*x) e^{ax}\\sin(bx) should be entered as exp(a*x)*sin(b*x) (ax^2 + b x + c)^{-1} should be entered as (a*x^2 + b*x + c)^(-1) . Functions Standard functions : Functions, such as \\sin , \\cos , \\tan , \\exp , \\log and so on can be entered using their usual names. However, the argument must always be enclosed in brackets: \\sin x should be entered as sin(x) , \\ln 3 should be entered as ln(3) and so on. Modulus function : The modulus function, sometimes called the absolute value of x , is written as | x | in traditional notation. This must be entered as abs(x) . Trigonometrical functions Things to remember: STACK uses radians for the angles not degrees! The function 1/\\sin(x) should be typed in as csc(x) rather than cosec(x) . You can type cosec(x) or just call it 1/sin(x) if you prefer. \\sin^2x must be entered as sin(x)^2 (which is what it really means, after all). Similarly for \\tan^2(x) , \\sinh^2(x) and so on. Recall that \\sin^{-1}(x) traditionally means the number t such that \\sin(t) = x , which is completely different from the number \\sin(x)^{-1} = 1/\\sin(x) . This traditional notation is really rather unfortunate and is not used by the CAS; instead, \\sin^{-1}(x) should be entered as asin(x) . Similarly, \\tan^{-1}(x) should be entered as atan(x) and so on. Exponentials and Logarithms To enter the exponential function type exp(x) . Typing e^x should work in STACK, but gets you into bad habits when using a CAS later! Type ln(x) or log(x) to enter the natural logarithm of x with base e\\approx 2.71\\cdots . Note that both of these start with a lower case l for logarithm, not a capital I ( i ). The logarithm of x to base 10 is entered as lg(x) . The logarithm of x to base a is entered as lg(x,a) , sometimes written \\log_{a}(x) . Matrices You may be given a grid of boxes to fill in. If not, the teacher may provide a hint as to the correct syntax. Otherwise you will need to use Maxima's notation for entering the matrix. The matrix: \\left( \\begin{array}{ccc} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{array} \\right) must be entered as matrix([1,2,3],[4,5,6]) . Each row is entered as a list, and these should be the same length. The function matrix is used to indicate this is a matrix and not a \"list of lists\". Equations and Inequalities Equations can be entered using the equals sign. For example, to enter the equation y=x^2-2x+1 type y=x^2-2*x+1 . Inequalities can be entered using the greater than and less than signs on the keyboard. Notice that there are four possibilities for you to choose from: < or > or <= or >= . Note there is no space between these symbols, and the equality must come second when it is used, i.e. you cannot use =< . Sometimes you will need to connect inequalities together as x>1 and x<=5 . You must use the logical connectives and and or . \"Chained inequalities\" such as 1<x<5 are not permitted as input syntax. You should enter this as 1<x and x<5 . Reasoning line by line Sometimes you will be asked to reason line by line. This is called reasoning by equivalence . Other notes Greek letters can be entered using their English names. For example, enter \\alpha+\\beta as alpha+beta , and 2\\pi as 2*pi . Sets : To enter a set such as \\{1,2,3\\} in Maxima you could use the function set(1,2,3) , or use curly brackets and type {1,2,3} . Lists : can be entered using square brackets. For example, to enter the list 1,2,2,3 type [1,2,2,3] . Note that you do not need a semicolon at the end, unlike when you are using a CAS directly. You can also learn about the right syntax by doing tests in practice mode and asking for the solutions; as well as displaying the right answers in ordinary mathematical notation, STACK will tell you how they could be entered. However, there are often several possible ways, and STACK will not always suggest the easiest one. If you have difficulties in entering your answer into STACK you should contact your teacher.","title":"Answer input"},{"location":"en/Students/Answer_input/#answer-input","text":"In STACK you often need to enter an answer which is an algebraic expression. You should type in your answers using the same syntax as that used in the symbolic mathematics package Maxima. The syntax is broadly similar to the syntax used for mathematical formulae in graphical calculators; general programming languages such as Java, C and Basic; and in spreadsheet programs. You will find it useful to master it. For example, to enter e^{-t}\\sin(3t) you need to type in e^(-t)*sin(3*t) STACK tries quite hard to give helpful information about any syntax errors. It might also forgive some errors you make.","title":"Answer input"},{"location":"en/Students/Answer_input/#basic-notation","text":"","title":"Basic Notation"},{"location":"en/Students/Answer_input/#numbers","text":"You should type in numbers without spaces, and use fractions rather than decimals where possible. For example, 1/4 should be entered as 1/4 , not as 0.25 . Also, \\pi is entered as either pi or %pi , e , the base of the natural logarithms, is entered as either e or %e , i is entered as either i or %i . i is also sometimes entered as j if you are an engineer. If in doubt ask your teacher. You could also use sqrt(-1) , or (-1)^(1/2) , being careful with the brackets. STACK modifies Maxima's normal input rules so that you don't get caught out with a variable i when you meant %i . You can also use scientific notation for large numbers, e.g. 1000 can be entered as 1E+3 . Note, however, that in many situations floating point numbers are forbidden.","title":"Numbers"},{"location":"en/Students/Answer_input/#multiplication","text":"Use a star for multiplication. Forgetting this is by far the most common source of syntax errors. For example, 3x should be entered as 3*x . x(ax+1)(x-1) should be entered as x*(a*x+1)*(x-1) . STACK does sometimes try to insert stars for you where there is no ambiguity, 2x or (x+1)(x-1) . This guessing cannot be perfect since traditional mathematical notation is sometimes ambiguous! Compare f(x+1) and x(t+1) .","title":"Multiplication"},{"location":"en/Students/Answer_input/#powers","text":"Use a caret (^) for raising something to a power: for example, x^2 should be entered as x^2 . You can get a caret by holding down the SHIFT key and pressing the 6 key on most keyboards. Negative or fractional powers need brackets: x^{-2} should be entered as x^(-2) . x^{1/3} should be entered as x^(1/3) . The function root(x,n) can be used for x^(1/n) . If you omit the second argument you get root(x)=sqrt(x) .","title":"Powers"},{"location":"en/Students/Answer_input/#brackets","text":"Brackets are important to group terms in an expression. This is particularly the case in STACK since we use a one-dimensional input rather than traditional written mathematics. Try to consciously develop a sense of when you need brackets and avoid putting in too many. For example, \\frac{a+b}{c+d} should be entered as (a+b)/(c+d) . If you type a+b/(c+d) , then STACK will think that you mean a+\\frac{b}{c+d}. If you type (a+b)/c+d , then STACK will think that you mean \\frac{a+b}{c}+d. If you type a+b/c+d , then STACK will think that you mean a+\\frac{b}{c}+d. Think carefully about the expression a/b/c . What do you think this means? There are two options \\frac{a}{b}\\cdot\\frac{1}{c} = \\frac{a}{bc}\\quad\\mbox{or}\\quad\\frac{a}{\\frac{b}{c}}=\\frac{ac}{b}. Maxima interprets this as \\frac{a}{bc} . If in doubt use brackets. Note that in this context you should always use ordinary round bracket (like (a+b)), not square or curly ones (like [a+b] or {a+b}). {a+b} means a set, [a+b] means a list.","title":"Brackets"},{"location":"en/Students/Answer_input/#scientific-units","text":"You may be asked to answer a question in which the answer has units. E.g. 9.81\\mbox{m}\\mbox{s}^{-2} . To enter units you must use multiplication, so this is entered as either 9.81*m/s^2 or 9.81*m*s^(-2) . Don't use a space, or another symbol such as + .","title":"Scientific units"},{"location":"en/Students/Answer_input/#subscripts","text":"Use the underscore character to denote a subscript. For example, a_b should be entered as a_b .","title":"Subscripts"},{"location":"en/Students/Answer_input/#more-examples","text":"2^{a+b} should be entered as 2^(a+b) 2 \\cos 3x should be entered as 2*cos(3*x) e^{ax}\\sin(bx) should be entered as exp(a*x)*sin(b*x) (ax^2 + b x + c)^{-1} should be entered as (a*x^2 + b*x + c)^(-1) .","title":"More examples"},{"location":"en/Students/Answer_input/#functions","text":"Standard functions : Functions, such as \\sin , \\cos , \\tan , \\exp , \\log and so on can be entered using their usual names. However, the argument must always be enclosed in brackets: \\sin x should be entered as sin(x) , \\ln 3 should be entered as ln(3) and so on. Modulus function : The modulus function, sometimes called the absolute value of x , is written as | x | in traditional notation. This must be entered as abs(x) .","title":"Functions"},{"location":"en/Students/Answer_input/#trigonometrical-functions","text":"Things to remember: STACK uses radians for the angles not degrees! The function 1/\\sin(x) should be typed in as csc(x) rather than cosec(x) . You can type cosec(x) or just call it 1/sin(x) if you prefer. \\sin^2x must be entered as sin(x)^2 (which is what it really means, after all). Similarly for \\tan^2(x) , \\sinh^2(x) and so on. Recall that \\sin^{-1}(x) traditionally means the number t such that \\sin(t) = x , which is completely different from the number \\sin(x)^{-1} = 1/\\sin(x) . This traditional notation is really rather unfortunate and is not used by the CAS; instead, \\sin^{-1}(x) should be entered as asin(x) . Similarly, \\tan^{-1}(x) should be entered as atan(x) and so on.","title":"Trigonometrical functions"},{"location":"en/Students/Answer_input/#exponentials-and-logarithms","text":"To enter the exponential function type exp(x) . Typing e^x should work in STACK, but gets you into bad habits when using a CAS later! Type ln(x) or log(x) to enter the natural logarithm of x with base e\\approx 2.71\\cdots . Note that both of these start with a lower case l for logarithm, not a capital I ( i ). The logarithm of x to base 10 is entered as lg(x) . The logarithm of x to base a is entered as lg(x,a) , sometimes written \\log_{a}(x) .","title":"Exponentials and Logarithms"},{"location":"en/Students/Answer_input/#matrices","text":"You may be given a grid of boxes to fill in. If not, the teacher may provide a hint as to the correct syntax. Otherwise you will need to use Maxima's notation for entering the matrix. The matrix: \\left( \\begin{array}{ccc} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{array} \\right) must be entered as matrix([1,2,3],[4,5,6]) . Each row is entered as a list, and these should be the same length. The function matrix is used to indicate this is a matrix and not a \"list of lists\".","title":"Matrices"},{"location":"en/Students/Answer_input/#equations-and-inequalities","text":"Equations can be entered using the equals sign. For example, to enter the equation y=x^2-2x+1 type y=x^2-2*x+1 . Inequalities can be entered using the greater than and less than signs on the keyboard. Notice that there are four possibilities for you to choose from: < or > or <= or >= . Note there is no space between these symbols, and the equality must come second when it is used, i.e. you cannot use =< . Sometimes you will need to connect inequalities together as x>1 and x<=5 . You must use the logical connectives and and or . \"Chained inequalities\" such as 1<x<5 are not permitted as input syntax. You should enter this as 1<x and x<5 .","title":"Equations and Inequalities"},{"location":"en/Students/Answer_input/#reasoning-line-by-line","text":"Sometimes you will be asked to reason line by line. This is called reasoning by equivalence .","title":"Reasoning line by line"},{"location":"en/Students/Answer_input/#other-notes","text":"Greek letters can be entered using their English names. For example, enter \\alpha+\\beta as alpha+beta , and 2\\pi as 2*pi . Sets : To enter a set such as \\{1,2,3\\} in Maxima you could use the function set(1,2,3) , or use curly brackets and type {1,2,3} . Lists : can be entered using square brackets. For example, to enter the list 1,2,2,3 type [1,2,2,3] . Note that you do not need a semicolon at the end, unlike when you are using a CAS directly. You can also learn about the right syntax by doing tests in practice mode and asking for the solutions; as well as displaying the right answers in ordinary mathematical notation, STACK will tell you how they could be entered. However, there are often several possible ways, and STACK will not always suggest the easiest one. If you have difficulties in entering your answer into STACK you should contact your teacher.","title":"Other notes"},{"location":"en/Students/Equivalence_reasoning/","text":"Reasoning by Equivalence Sometimes STACK allows you to work line by line to solve an equation or inequality. You must work in such a way that adjacent lines are equivalent to each other. Start by typing in the equation in the question. Then work line by line in the text area until you have solved the problem. Normally some feedback will be available as you type. For example, to solve the quadratic equation x^2-4x-5=0 you might reason in the following way. x^2-4*x-5=0 (x+1)*(x-5)=0 x=-1 or x=5 You can copy and paste from one line to the next and modify the line if this helps. This might be displayed as follows \\begin{array}{ccc} \\ & x^2-4 x-5=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & \\left(x+1\\right) \\left(x-5\\right)=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & x=-1\\lor x=5 & \\mbox{ } \\end{array} Whether this feedback is available to you or not immediately depends on your question. This feedback indicates that STACK considers that each line is equivalent to the previous line. The last line of working is your final answer, although the whole argument is considered as well. You should use the normal syntax for answer input in STACK, including brackets and * symbols for multiplication. Sets, lists and matrices are not permitted when reasoning by equivalence. Do not enter your answer as a list or set of numbers, use logical notation such as x=-1 or x=5 . You can also work line by line with expressions, not equations. For example, to expand out (x-1)(x+4) you might reason in the following way. (x-1)*(x+4) =x^2-x+4*x-4 =x^2+3*x-4 This might be displayed as follows \\begin{array}{ll}\\ &\\left(x-1\\right) \\left(x+4\\right) \\cr \\color{green}{\\checkmark}&=x^2-x+4 x-4 \\cr \\color{green}{\\checkmark}&=x^2+3 x-4\\end{array} Here, each new line must start with an equals sign = . What is \"equivalence\"? Two equations are equivalent if they have the same solutions with the same multiplicities. Two expressions are equivalent if they have the same value when the variables are evaluated. Some general advice for solving equations when reasoning by equivalence is Factorise expressions, then use AB=0 \\color{green}{\\Leftrightarrow} A=0 \\lor B=0 . Use the difference of two squares, a^2-b^2=(a-b)(a+b) . Complete the square: e.g. (x-a)^2+b=0 . Avoid taking roots. Do not take the square root of both sides of an equation. \\mbox{ If } a=b \\mbox{ then } a^2=b^2. However, \\mbox{ if } a^2=b^2 \\mbox{ then } a=b \\mbox{ or } a=-b. So, if you take the square root of both sides of an equation to transform a^2=b^2 into a=b you might miss a root! To avoid this problem use the difference of two squares in the following way. a^2=b^2 a^2-b^2=0 (a-b)*(a+b)=0 a=b or a=-b \\begin{array}{ccc} \\ & a^2=b^2 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & a^2-b^2=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & \\left(a-b\\right) \\left(a+b\\right)=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & a=b\\lor a=-b & \\mbox{ } \\end{array} Edge cases Sometimes you will have an equation with no solutions. You can express the fact there are no solutions in the following ways false . This is because sometimes you end up with a contradiction such as 1=2 , since this equation is false you can type that as the final line in your argument. none . The special keyword none is used to signify that any values of the variables satisfy the equation. {} . The empty set indicates there are no solutions. Sometimes you will have an equation in which every number is a solution, such as x=x . You can express the fact every number is a solution in the following ways true . This is because sometimes you end up with an equation such as x=x , and since this equation is true you can type that as the final line in your argument. all . The special keyword all is used to signify that any values of the variables satisfy the equation.","title":"Reasoning by Equivalence"},{"location":"en/Students/Equivalence_reasoning/#reasoning-by-equivalence","text":"Sometimes STACK allows you to work line by line to solve an equation or inequality. You must work in such a way that adjacent lines are equivalent to each other. Start by typing in the equation in the question. Then work line by line in the text area until you have solved the problem. Normally some feedback will be available as you type. For example, to solve the quadratic equation x^2-4x-5=0 you might reason in the following way. x^2-4*x-5=0 (x+1)*(x-5)=0 x=-1 or x=5 You can copy and paste from one line to the next and modify the line if this helps. This might be displayed as follows \\begin{array}{ccc} \\ & x^2-4 x-5=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & \\left(x+1\\right) \\left(x-5\\right)=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & x=-1\\lor x=5 & \\mbox{ } \\end{array} Whether this feedback is available to you or not immediately depends on your question. This feedback indicates that STACK considers that each line is equivalent to the previous line. The last line of working is your final answer, although the whole argument is considered as well. You should use the normal syntax for answer input in STACK, including brackets and * symbols for multiplication. Sets, lists and matrices are not permitted when reasoning by equivalence. Do not enter your answer as a list or set of numbers, use logical notation such as x=-1 or x=5 . You can also work line by line with expressions, not equations. For example, to expand out (x-1)(x+4) you might reason in the following way. (x-1)*(x+4) =x^2-x+4*x-4 =x^2+3*x-4 This might be displayed as follows \\begin{array}{ll}\\ &\\left(x-1\\right) \\left(x+4\\right) \\cr \\color{green}{\\checkmark}&=x^2-x+4 x-4 \\cr \\color{green}{\\checkmark}&=x^2+3 x-4\\end{array} Here, each new line must start with an equals sign = .","title":"Reasoning by Equivalence"},{"location":"en/Students/Equivalence_reasoning/#what-is-equivalence","text":"Two equations are equivalent if they have the same solutions with the same multiplicities. Two expressions are equivalent if they have the same value when the variables are evaluated. Some general advice for solving equations when reasoning by equivalence is Factorise expressions, then use AB=0 \\color{green}{\\Leftrightarrow} A=0 \\lor B=0 . Use the difference of two squares, a^2-b^2=(a-b)(a+b) . Complete the square: e.g. (x-a)^2+b=0 .","title":"What is \"equivalence\"?"},{"location":"en/Students/Equivalence_reasoning/#avoid-taking-roots","text":"Do not take the square root of both sides of an equation. \\mbox{ If } a=b \\mbox{ then } a^2=b^2. However, \\mbox{ if } a^2=b^2 \\mbox{ then } a=b \\mbox{ or } a=-b. So, if you take the square root of both sides of an equation to transform a^2=b^2 into a=b you might miss a root! To avoid this problem use the difference of two squares in the following way. a^2=b^2 a^2-b^2=0 (a-b)*(a+b)=0 a=b or a=-b \\begin{array}{ccc} \\ & a^2=b^2 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & a^2-b^2=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & \\left(a-b\\right) \\left(a+b\\right)=0 & \\mbox{ } \\\\ \\color{green}{\\Leftrightarrow} & a=b\\lor a=-b & \\mbox{ } \\end{array}","title":"Avoid taking roots."},{"location":"en/Students/Equivalence_reasoning/#edge-cases","text":"Sometimes you will have an equation with no solutions. You can express the fact there are no solutions in the following ways false . This is because sometimes you end up with a contradiction such as 1=2 , since this equation is false you can type that as the final line in your argument. none . The special keyword none is used to signify that any values of the variables satisfy the equation. {} . The empty set indicates there are no solutions. Sometimes you will have an equation in which every number is a solution, such as x=x . You can express the fact every number is a solution in the following ways true . This is because sometimes you end up with an equation such as x=x , and since this equation is true you can type that as the final line in your argument. all . The special keyword all is used to signify that any values of the variables satisfy the equation.","title":"Edge cases"},{"location":"en/Students/FAQ/","text":"Frequently asked questions This page is designed to help student users of STACK, rather than question authors. How do I enter my answers? You often need to enter an answer which is an algebraic expression. Details and examples are given on the answer input page. The short answer to this question is that you should type in your answers using the same syntax as that used in the symbolic mathematics package Maxima (this page is written for teachers, but you may find it interesting). Why is my answer \"invalid\"? STACK validates students' answers before they are graded, checking if the answers are in an acceptable syntax and giving the student a chance to confirm their answer is correct. By default, answers not explicitly specifying multiplication (fx. 2x instead of 2*x ) are not accepted. This is linked to a core philosophy of STACK ; students should not be penalized for poor computer syntax. It is better to bug students until their answer is unambiguous, than to risk students being marking wrong for typic in \"sinx\" instead of \"sin(x)\" and having the computer interpret it as \"s*i*n*x\". That being said, there are options in STACK to be less strict with student syntax, so that the system may accept \"2x\" as a valid input. The question author has to activate this function, so contact your teacher if you think they should choose this option. There may be other reasons your answer is not allowed. By default, STACK does not allow variables that are longer than two characters, and your teacher may also have forbidden names and functions they do not want you to use in your answer. Why is my quiz acting differently? Different quizzes can have different question behaviours . Some quizzes may only accept one answer, others may accept an unlimited amount. Some quizzes may allow you to \"check\" if each question is correct before moving on to the next, others may not include this. Some quizzes may give you feedback immediately, other only after a while. Your teacher may have picked different question behaviours for your different quizzes. How do I change the language? Click on your profile, and go to Preferences , Preferred language and then select the language. Here is a direct link to this page (for sites using Moodle). If your language is not available, contact your site administrator - it is likely that they have not installed the relevant language package. Currently, only some languages are supported by STACK. See Language packages for a full list. If the interface is translated, but the question text and feedback is not, it is because your teacher has not added support for multilingual questions when authoring the question. Where can I report bugs? Depends. Is it an issue in the question authoring? Fx. The feedback contains strange symbols, like \"@nn@\". My answer was marked \"wrong\", but I think it should be marked \"correct\". My quiz is not open, but I think it should be. There is a spelling error in the question text. In this case, it is likely your teacher has made an error when authoring the question, so you should contact them first. In general, if you are unsure what is responsible for your bug, the safest option is to contact your teacher, as they are likely to have a better idea of how to categorize the issue. If you think you have found a genuine STACK bug, you should report it in the STACK GitHub . If the bug seems to concern something outside of the question, for example the quiz or the website, you may have found a bug in the learning management system your institution uses. This should be reported to their respective bug report system, for example the one for Moodle . How do I make the fonts bigger? See the information on Accessibility .","title":"Frequently asked questions"},{"location":"en/Students/FAQ/#frequently-asked-questions","text":"This page is designed to help student users of STACK, rather than question authors.","title":"Frequently asked questions"},{"location":"en/Students/FAQ/#how-do-i-enter-my-answers","text":"You often need to enter an answer which is an algebraic expression. Details and examples are given on the answer input page. The short answer to this question is that you should type in your answers using the same syntax as that used in the symbolic mathematics package Maxima (this page is written for teachers, but you may find it interesting).","title":"How do I enter my answers?"},{"location":"en/Students/FAQ/#why-is-my-answer-invalid","text":"STACK validates students' answers before they are graded, checking if the answers are in an acceptable syntax and giving the student a chance to confirm their answer is correct. By default, answers not explicitly specifying multiplication (fx. 2x instead of 2*x ) are not accepted. This is linked to a core philosophy of STACK ; students should not be penalized for poor computer syntax. It is better to bug students until their answer is unambiguous, than to risk students being marking wrong for typic in \"sinx\" instead of \"sin(x)\" and having the computer interpret it as \"s*i*n*x\". That being said, there are options in STACK to be less strict with student syntax, so that the system may accept \"2x\" as a valid input. The question author has to activate this function, so contact your teacher if you think they should choose this option. There may be other reasons your answer is not allowed. By default, STACK does not allow variables that are longer than two characters, and your teacher may also have forbidden names and functions they do not want you to use in your answer.","title":"Why is my answer \"invalid\"?"},{"location":"en/Students/FAQ/#why-is-my-quiz-acting-differently","text":"Different quizzes can have different question behaviours . Some quizzes may only accept one answer, others may accept an unlimited amount. Some quizzes may allow you to \"check\" if each question is correct before moving on to the next, others may not include this. Some quizzes may give you feedback immediately, other only after a while. Your teacher may have picked different question behaviours for your different quizzes.","title":"Why is my quiz acting differently?"},{"location":"en/Students/FAQ/#how-do-i-change-the-language","text":"Click on your profile, and go to Preferences , Preferred language and then select the language. Here is a direct link to this page (for sites using Moodle). If your language is not available, contact your site administrator - it is likely that they have not installed the relevant language package. Currently, only some languages are supported by STACK. See Language packages for a full list. If the interface is translated, but the question text and feedback is not, it is because your teacher has not added support for multilingual questions when authoring the question.","title":"How do I change the language?"},{"location":"en/Students/FAQ/#where-can-i-report-bugs","text":"Depends. Is it an issue in the question authoring? Fx. The feedback contains strange symbols, like \"@nn@\". My answer was marked \"wrong\", but I think it should be marked \"correct\". My quiz is not open, but I think it should be. There is a spelling error in the question text. In this case, it is likely your teacher has made an error when authoring the question, so you should contact them first. In general, if you are unsure what is responsible for your bug, the safest option is to contact your teacher, as they are likely to have a better idea of how to categorize the issue. If you think you have found a genuine STACK bug, you should report it in the STACK GitHub . If the bug seems to concern something outside of the question, for example the quiz or the website, you may have found a bug in the learning management system your institution uses. This should be reported to their respective bug report system, for example the one for Moodle .","title":"Where can I report bugs?"},{"location":"en/Students/FAQ/#how-do-i-make-the-fonts-bigger","text":"See the information on Accessibility .","title":"How do I make the fonts bigger?"}]}